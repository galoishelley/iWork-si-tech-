/*
**Created: Tophill(zhangkun)
**Date:    2009.03.18
*/

/*
#include "order_xml.h"
#include "pubOrder.h"
#include "pubLog.h"
*/
#include "boss_srv.h"

#define _DEBUG_

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE SQLDA;

/*
**Created: liph
**Date:    2009.03.23

**函数名称: OrderInsertCustMsg
**功能描述: 向dcustmsg插入数据
**输入参数：i_op_code
**	i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**	i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
		i_tdCustMsg
**输出参数：v_ret
**版本号：
**编码作者：liph
**编码时间：2009.03.23
**修改：
*/

int OrderInsertCustMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_tdCustMsg)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustMsg i_tdCustMsg;
{
	int v_ret;/*返回代码*/
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(i_tdCustMsg.sIdNo);
	Coltrim(i_tdCustMsg.sCustId);
	Coltrim(i_tdCustMsg.sContractNo);
	Coltrim(i_tdCustMsg.sIds);
	Coltrim(i_tdCustMsg.sPhoneNo);
	Coltrim(i_tdCustMsg.sSmCode);
	Coltrim(i_tdCustMsg.sServiceType);
	Coltrim(i_tdCustMsg.sAttrCode);
	Coltrim(i_tdCustMsg.sUserPasswd);
	Coltrim(i_tdCustMsg.sOpenTime);
	Coltrim(i_tdCustMsg.sBelongCode);
	Coltrim(i_tdCustMsg.sLimitOwe);
	Coltrim(i_tdCustMsg.sCreditCode);
	Coltrim(i_tdCustMsg.sCreditValue);
	Coltrim(i_tdCustMsg.sRunCode);
	Coltrim(i_tdCustMsg.sRunTime);
	Coltrim(i_tdCustMsg.sBillDate);
	Coltrim(i_tdCustMsg.sBillType);
	Coltrim(i_tdCustMsg.sEncryptPrepay);
	Coltrim(i_tdCustMsg.sCmdRight);
	Coltrim(i_tdCustMsg.sLastBillType);
	Coltrim(i_tdCustMsg.sBakField);
	Coltrim(i_tdCustMsg.sGroupId);
	Coltrim(i_tdCustMsg.sGroupNo);
	Coltrim(i_tdCustMsg.sgroupmsg);

	EXEC SQL INSERT INTO dCustMsg(id_no,cust_id,contract_no,ids,
								  phone_no,sm_code,service_type,attr_code,
								  user_passwd,open_time,belong_code,limit_owe,
								  credit_code,credit_value,run_code,run_time,
								  bill_date,bill_type,encrypt_prepay,cmd_right,
								  last_bill_type,bak_field,group_id,group_no,group_msg)
		VALUES(to_number(:i_tdCustMsg.sIdNo),to_number(:i_tdCustMsg.sCustId),to_number(:i_tdCustMsg.sContractNo),to_number(:i_tdCustMsg.sIds),
			:i_tdCustMsg.sPhoneNo,:i_tdCustMsg.sSmCode,:i_tdCustMsg.sServiceType,:i_tdCustMsg.sAttrCode,
			:i_tdCustMsg.sUserPasswd,to_date(:i_tdCustMsg.sOpenTime,'yyyymmdd HH24:mi:ss'),	:i_tdCustMsg.sBelongCode,to_number(:i_tdCustMsg.sLimitOwe),
			:i_tdCustMsg.sCreditCode,to_number(:i_tdCustMsg.sCreditValue),:i_tdCustMsg.sRunCode,to_date(:i_tdCustMsg.sRunTime,'yyyymmdd HH24:mi:ss'),
			to_date(:i_tdCustMsg.sBillDate,'yyyymmdd HH24:mi:ss'),to_number(:i_tdCustMsg.sBillType),:i_tdCustMsg.sEncryptPrepay,to_number(:i_tdCustMsg.sCmdRight),
			:i_tdCustMsg.sLastBillType,:i_tdCustMsg.sBakField,:i_tdCustMsg.sGroupId,:i_tdCustMsg.sGroupNo,:i_tdCustMsg.sgroupmsg);

	if(SQLCODE!=SQLOK)
		return -500110;

	strcpy(v_table_name,"DCUSTMSG");
    /*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",         ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"cust_id",       ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_no",   ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"ids",           ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sIds);
	OrderSetDataItem(&vMsgBodyType,"phone_no",      ORDERDATAFORMAT_STRING, i_tdCustMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"sm_code",       ORDERDATAFORMAT_STRING, i_tdCustMsg.sSmCode);
	OrderSetDataItem(&vMsgBodyType,"service_type",  ORDERDATAFORMAT_STRING, i_tdCustMsg.sServiceType);
	OrderSetDataItem(&vMsgBodyType,"attr_code",     ORDERDATAFORMAT_STRING, i_tdCustMsg.sAttrCode);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",   ORDERDATAFORMAT_STRING, i_tdCustMsg.sUserPasswd);
	OrderSetDataItem(&vMsgBodyType,"open_time",     ORDERDATAFORMAT_DATE,   i_tdCustMsg.sOpenTime);
	OrderSetDataItem(&vMsgBodyType,"belong_code",   ORDERDATAFORMAT_STRING, i_tdCustMsg.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",     ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sLimitOwe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",   ORDERDATAFORMAT_STRING, i_tdCustMsg.sCreditCode);
	OrderSetDataItem(&vMsgBodyType,"credit_value",  ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sCreditValue);
	OrderSetDataItem(&vMsgBodyType,"run_code",      ORDERDATAFORMAT_STRING, i_tdCustMsg.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",      ORDERDATAFORMAT_DATE,   i_tdCustMsg.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"bill_date",     ORDERDATAFORMAT_DATE,   i_tdCustMsg.sBillDate);
	OrderSetDataItem(&vMsgBodyType,"bill_type",     ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sBillType);
	OrderSetDataItem(&vMsgBodyType,"encrypt_prepay",ORDERDATAFORMAT_STRING, i_tdCustMsg.sEncryptPrepay);
	OrderSetDataItem(&vMsgBodyType,"cmd_right",     ORDERDATAFORMAT_NUMBER, i_tdCustMsg.sCmdRight);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type",ORDERDATAFORMAT_STRING, i_tdCustMsg.sLastBillType);
	OrderSetDataItem(&vMsgBodyType,"bak_field",     ORDERDATAFORMAT_STRING, i_tdCustMsg.sBakField);
	OrderSetDataItem(&vMsgBodyType,"group_id",      ORDERDATAFORMAT_STRING, i_tdCustMsg.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"group_no",      ORDERDATAFORMAT_STRING, i_tdCustMsg.sGroupNo);
	OrderSetDataItem(&vMsgBodyType,"group_msg",     ORDERDATAFORMAT_STRING, i_tdCustMsg.sgroupmsg);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if(v_ret<0)
		return -500011;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if(v_ret!=0)
	{
		return -500012;
	}

	return 0;
}

/*
**函数名称: OrderDeleteCustMsg
**功能描述: 从dcustmsg删除数据
**输入参数：i_op_code
	    i_id_no
	    i_where_sql
	    i_parameter_array
	    i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
	    i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
	    i_id_no,主键
**输出参数：v_ret
**版本号：
**编码作者：liph
**编码时间：2009.03.23
**修改：
*/

int OrderDeleteCustMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_id_no,
	i_where_sql,i_parameter_array
	)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
	char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustMsg a WHERE a.id_no=to_number(:NG_Param0) %s",i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;

	if(v_ret<0)
		return -500013;

	if(v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTMSG");

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if(v_ret<0)
	{
		return -500014;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);


	if(v_ret!=0)
		return -500015;

	return 0;
}

/*
**函数名称: OrderUpdateCustMsg
**功能描述: 更新dcustmsg数据
**输入参数：i_op_code
	    i_id_no
	    i_update_sql
	    i_where_sql
	    i_where_sql,i_parameter_array更新辅助信息
**输出参数：v_ret
**版本号：
**编码作者：liph
**编码时间：2009.03.23
**修改：
*/

int OrderUpdateCustMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_id_no,
	i_update_sql,i_where_sql,i_parameter_array
	)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		char v_id_no[14+1];
		char v_cust_id[10+1];
		char v_contract_no[14+1];
		char v_ids[4+1];
		char v_phone_no[15+1];
		char v_sm_code[2+1];
		char v_service_type[2+1];
		char v_attr_code[8+1];
		char v_user_passwd[8+1];
		char v_open_time[17+1];
		char v_belong_code[7+1];
		char v_limit_owe[15+1];
		char v_credit_code[1+1];
		char v_credit_value[8+1];
		char v_run_code[2+1];
		char v_run_time[17+1];
		char v_bill_date[17+1];
		char v_bill_type[4+1];
		char v_encrypt_prepay[16+1];
		char v_cmd_right[10+1];
		char v_last_bill_type[1+1];
		char v_bak_field[12+1];
		char v_group_id[20+1];
		char v_group_no[10+1];
		char v_group_msg[20+1];
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"UPDATE dCustMsg SET %s WHERE id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);
	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);

	if(v_ret<0){
		printf("OrderMultiParaDML,ret=%d\n",v_ret);
		return -500016;
	}

	/*没有更新到数据，可以不做后续处理*/
	if(v_ret>0)
	{
		return 1;
	}

	EXEC SQL SELECT id_no,cust_id,contract_no,ids,
					phone_no,sm_code,service_type,attr_code,
					user_passwd,to_char(open_time,'yyyymmdd hh24:mi:ss'),belong_code,limit_owe,
					credit_code,credit_value,run_code,to_char(run_time,'yyyymmdd hh24:mi:ss'),
					to_char(bill_date,'yyyymmdd hh24:mi:ss'),bill_type,encrypt_prepay,cmd_right,
					last_bill_type,bak_field,nvl(group_id,chr(0)),nvl(group_no,chr(0)),nvl(group_msg,chr(0))
		INTO :v_id_no,:v_cust_id,:v_contract_no,:v_ids,
			 :v_phone_no,:v_sm_code,:v_service_type,:v_attr_code,
			 :v_user_passwd,:v_open_time,:v_belong_code,:v_limit_owe,
			 :v_credit_code,:v_credit_value,:v_run_code,:v_run_time,
			 :v_bill_date,:v_bill_type,:v_encrypt_prepay,:v_cmd_right,
			 :v_last_bill_type,:v_bak_field,:v_group_id,:v_group_no,:v_group_msg
		FROM dCustMsg
		WHERE id_no=:i_id_no;
	if(SQLCODE!=SQLOK)
		return -500017;

	Coltrim(v_id_no);
	Coltrim(v_cust_id);
	Coltrim(v_contract_no);
	Coltrim(v_ids);
	Coltrim(v_phone_no);
	Coltrim(v_sm_code);
	Coltrim(v_service_type);
	Coltrim(v_attr_code);
	Coltrim(v_user_passwd);
	Coltrim(v_open_time);
	Coltrim(v_belong_code);
	Coltrim(v_limit_owe);
	Coltrim(v_credit_code);
	Coltrim(v_credit_value);
	Coltrim(v_run_code);
	Coltrim(v_run_time);
	Coltrim(v_bill_date);
	Coltrim(v_bill_type);
	Coltrim(v_encrypt_prepay);
	Coltrim(v_cmd_right);
	Coltrim(v_last_bill_type);
	Coltrim(v_bak_field);
	Coltrim(v_group_id);
	Coltrim(v_group_no);
	Coltrim(v_group_msg);

	strcpy(v_table_name,"DCUSTMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",         ORDERDATAFORMAT_NUMBER, v_id_no);
	OrderSetDataItem(&vMsgBodyType,"cust_id",       ORDERDATAFORMAT_NUMBER, v_cust_id);
	OrderSetDataItem(&vMsgBodyType,"contract_no",   ORDERDATAFORMAT_NUMBER, v_contract_no);
	OrderSetDataItem(&vMsgBodyType,"ids",           ORDERDATAFORMAT_NUMBER, v_ids);
	OrderSetDataItem(&vMsgBodyType,"phone_no",      ORDERDATAFORMAT_STRING, v_phone_no);
	OrderSetDataItem(&vMsgBodyType,"sm_code",       ORDERDATAFORMAT_STRING, v_sm_code);
	OrderSetDataItem(&vMsgBodyType,"service_type",  ORDERDATAFORMAT_STRING, v_service_type);
	OrderSetDataItem(&vMsgBodyType,"attr_code",     ORDERDATAFORMAT_STRING, v_attr_code);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",   ORDERDATAFORMAT_STRING, v_user_passwd);
	OrderSetDataItem(&vMsgBodyType,"open_time",     ORDERDATAFORMAT_DATE,   v_open_time);
	OrderSetDataItem(&vMsgBodyType,"belong_code",   ORDERDATAFORMAT_STRING, v_belong_code);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",     ORDERDATAFORMAT_NUMBER, v_limit_owe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",   ORDERDATAFORMAT_STRING, v_credit_code);
	OrderSetDataItem(&vMsgBodyType,"credit_value",  ORDERDATAFORMAT_NUMBER, v_credit_value);
	OrderSetDataItem(&vMsgBodyType,"run_code",      ORDERDATAFORMAT_STRING, v_run_code);
	OrderSetDataItem(&vMsgBodyType,"run_time",      ORDERDATAFORMAT_DATE,   v_run_time);
	OrderSetDataItem(&vMsgBodyType,"bill_date",     ORDERDATAFORMAT_DATE,   v_bill_date);
	OrderSetDataItem(&vMsgBodyType,"bill_type",     ORDERDATAFORMAT_NUMBER, v_bill_type);
	OrderSetDataItem(&vMsgBodyType,"encrypt_prepay",ORDERDATAFORMAT_STRING, v_encrypt_prepay);
	OrderSetDataItem(&vMsgBodyType,"cmd_right",     ORDERDATAFORMAT_NUMBER, v_cmd_right);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type",ORDERDATAFORMAT_STRING, v_last_bill_type);
	OrderSetDataItem(&vMsgBodyType,"bak_field",     ORDERDATAFORMAT_STRING, v_bak_field);
	OrderSetDataItem(&vMsgBodyType,"group_id",      ORDERDATAFORMAT_STRING, v_group_id);
	OrderSetDataItem(&vMsgBodyType,"group_no",      ORDERDATAFORMAT_STRING, v_group_no);
	OrderSetDataItem(&vMsgBodyType,"group_msg",     ORDERDATAFORMAT_STRING, v_group_msg);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if(v_ret<0)
		return -500018;

	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);

	if(v_ret!=0)
		return -500019;
	return 0;
}


/*
*函数名称：OrderInsertConMsg
*功能描述：对dConMsg进行插入
*输入参数：i_op_code	操作代码
	   i_tdConMsg	结构体
*输出参数：
*版本号：v0.1
*编码作者：lanhai
*编码时间：2009-4-2
*修改：2009-4-15
*/
int OrderInsertConMsg(
				i_sendid_type,i_sendid_no,i_order_right,
				i_op_code,i_op_accept,i_op_login,i_op_note,
				i_tdConMsg)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConMsg i_tdConMsg;
{
	int v_ret;
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);
	Coltrim(i_tdConMsg.sContract_no);
	Coltrim(i_tdConMsg.sConCustId);
	Coltrim(i_tdConMsg.sContractPasswd);
	Coltrim(i_tdConMsg.sBankCust);
	Coltrim(i_tdConMsg.sOddment);
	Coltrim(i_tdConMsg.sBelongCode);
	Coltrim(i_tdConMsg.sPrepayFee);
	Coltrim(i_tdConMsg.sPrepayTime);
	Coltrim(i_tdConMsg.sStatus);
	Coltrim(i_tdConMsg.sStatus_time);
	Coltrim(i_tdConMsg.sPostFlag);
	Coltrim(i_tdConMsg.sDeposit);
	Coltrim(i_tdConMsg.sMinYm);
	Coltrim(i_tdConMsg.sOweFee);
	Coltrim(i_tdConMsg.sAccountMark);
	Coltrim(i_tdConMsg.sAccountLimit);
	Coltrim(i_tdConMsg.sPayCode);
	Coltrim(i_tdConMsg.sBankCode);
	Coltrim(i_tdConMsg.sPostBankCode);
	Coltrim(i_tdConMsg.sAccountNo);
	Coltrim(i_tdConMsg.sAccountType);
	Coltrim(i_tdConMsg.sGroupId);

	EXEC SQL INSERT INTO dConMsg(CONTRACT_NO,CON_CUST_ID,CONTRACT_PASSWD,BANK_CUST,
				ODDMENT,BELONG_CODE,PREPAY_FEE,PREPAY_TIME,
				STATUS,STATUS_TIME,POST_FLAG,DEPOSIT,
				MIN_YM,OWE_FEE,ACCOUNT_MARK,ACCOUNT_LIMIT,
				PAY_CODE,BANK_CODE,POST_BANK_CODE,ACCOUNT_NO,
				ACCOUNT_TYPE,GROUP_ID)
		values(to_number(:i_tdConMsg.sContract_no),to_number(:i_tdConMsg.sConCustId),:i_tdConMsg.sContractPasswd,:i_tdConMsg.sBankCust,
		to_number(:i_tdConMsg.sOddment),:i_tdConMsg.sBelongCode,to_number(:i_tdConMsg.sPrepayFee),to_date(:i_tdConMsg.sPrepayTime,'yyyymmdd hh24:mi:ss'),
		:i_tdConMsg.sStatus,to_date(:i_tdConMsg.sStatus_time,'yyyymmdd hh24:mi:ss'),:i_tdConMsg.sPostFlag,to_number(:i_tdConMsg.sDeposit),
		to_number(:i_tdConMsg.sMinYm),to_number(:i_tdConMsg.sOweFee),to_number(:i_tdConMsg.sAccountMark),:i_tdConMsg.sAccountLimit,
		:i_tdConMsg.sPayCode,:i_tdConMsg.sBankCode,:i_tdConMsg.sPostBankCode,:i_tdConMsg.sAccountNo,:i_tdConMsg.sAccountType,:i_tdConMsg.sGroupId);
	if(SQLCODE!=SQLOK){
		return -500020;
	}

	strcpy(v_table_name,"DCONMSG");


	/* 组装报文开始 */
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER, i_tdConMsg.sContract_no);
	OrderSetDataItem(&vMsgBodyType,"con_cust_id",    ORDERDATAFORMAT_NUMBER, i_tdConMsg.sConCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_passwd",ORDERDATAFORMAT_STRING, i_tdConMsg.sContractPasswd);
	OrderSetDataItem(&vMsgBodyType,"bank_cust",      ORDERDATAFORMAT_STRING, i_tdConMsg.sBankCust);
	OrderSetDataItem(&vMsgBodyType,"oddment",        ORDERDATAFORMAT_NUMBER, i_tdConMsg.sOddment);
	OrderSetDataItem(&vMsgBodyType,"belong_code",    ORDERDATAFORMAT_STRING, i_tdConMsg.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"prepay_fee",     ORDERDATAFORMAT_NUMBER, i_tdConMsg.sPrepayFee);
	OrderSetDataItem(&vMsgBodyType,"prepay_time",    ORDERDATAFORMAT_DATE,   i_tdConMsg.sPrepayTime);
	OrderSetDataItem(&vMsgBodyType,"status",         ORDERDATAFORMAT_STRING, i_tdConMsg.sStatus);
	OrderSetDataItem(&vMsgBodyType,"status_time",    ORDERDATAFORMAT_DATE,   i_tdConMsg.sStatus_time);
	OrderSetDataItem(&vMsgBodyType,"post_flag",      ORDERDATAFORMAT_STRING, i_tdConMsg.sPostFlag);
	OrderSetDataItem(&vMsgBodyType,"deposit",        ORDERDATAFORMAT_NUMBER, i_tdConMsg.sDeposit);
	OrderSetDataItem(&vMsgBodyType,"min_ym",         ORDERDATAFORMAT_NUMBER, i_tdConMsg.sMinYm);
	OrderSetDataItem(&vMsgBodyType,"owe_fee",        ORDERDATAFORMAT_NUMBER, i_tdConMsg.sOweFee);
	OrderSetDataItem(&vMsgBodyType,"account_mark",   ORDERDATAFORMAT_NUMBER, i_tdConMsg.sAccountMark);
	OrderSetDataItem(&vMsgBodyType,"account_limit",  ORDERDATAFORMAT_STRING, i_tdConMsg.sAccountLimit);
	OrderSetDataItem(&vMsgBodyType,"pay_code",       ORDERDATAFORMAT_STRING, i_tdConMsg.sPayCode);
	OrderSetDataItem(&vMsgBodyType,"bank_code",      ORDERDATAFORMAT_STRING, i_tdConMsg.sBankCode);
	OrderSetDataItem(&vMsgBodyType,"post_bank_code", ORDERDATAFORMAT_STRING, i_tdConMsg.sPostBankCode);
	OrderSetDataItem(&vMsgBodyType,"account_no",     ORDERDATAFORMAT_STRING, i_tdConMsg.sAccountNo);
	OrderSetDataItem(&vMsgBodyType,"account_type",   ORDERDATAFORMAT_STRING, i_tdConMsg.sAccountType);
	OrderSetDataItem(&vMsgBodyType,"group_id",       ORDERDATAFORMAT_STRING, i_tdConMsg.sGroupId);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500021;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500022;

	return 0;

}

/*
*函数名称：OrderDeleteConMsg
*功能描述：对dConMsg进行删除
*输入参数：i_op_code		操作代码
	   i_contract_no	账号
	   i_where_sql		删除sql语句的where条件
	   i_parameter_array
*输出参数：
*版本号：v0.1
*编码作者：lanhai
*编码时间：2009-4-2
*修改：2009-4-15
*/
int OrderDeleteConMsg(
					i_sendid_type,i_sendid_no,i_order_right,
					i_op_code,i_op_accept,i_op_login,i_op_note,
					i_contract_no,
					i_where_sql,i_parameter_array)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dConMsg a where a.CONTRACT_NO=to_number(:NG_Param0)%s",i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if(v_ret<0){
		return -500023;
	}


	/*没有更新到数据，可以不做后续处理*/
	if(v_ret>0){
		return 1;
	}

	strcpy(v_table_name,"DCONMSG");

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	Trim(i_contract_no);
	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,i_contract_no);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);

	if (v_ret!=0){
		return -500024;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500025;

	return 0;


}

/*
*函数名称：OrderUpdateConMsg
*功能描述：对dConMsg进行修改
*输入参数：i_op_code		操作代码
	   i_contract_no	账号
	   i_update_sql		更新sql语句的条件
	   i_where_sql		删除sql语句的where条件
	   i_parameter_array
*输出参数：
*版本号：v0.1
*编码作者：lanhai
*编码时间：2009-4-2
*修改：2009-4-15
*/
int OrderUpdateConMsg(
				i_sendid_type,i_sendid_no,i_order_right,
				i_op_code,i_op_accept,i_op_login,i_op_note,
				i_contract_no,i_update_sql,i_where_sql,i_parameter_array)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;
char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];

	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		char v_ContractNo[14+1];
		char v_ConCustId[14+1];		/* CON_CUST_ID     NUMBER(14) 	*/
		char v_ContractPasswd[8+1];	/* CONTRACT_PASSWD CHAR(8) 	*/
		char v_BankCust[60+1];		/* BANK_CUST       VARCHAR2(60) */
		char v_Oddment[4+1];		/* ODDMENT         NUMBER(2,2)  */
		char v_BelongCode[7+1];		/* BELONG_CODE     CHAR(7) 	*/
		char v_PrepayFee[14+1];		/* PREPAY_FEE      NUMBER(14,2) */
		char v_PrepayTime[17+1];	/* PREPAY_TIME     DATE		*/
		char v_Status[1+1];		/* STATUS          CHAR(1) 	*/
		char v_Status_time[17+1];	/* STATUS_TIME     DATE	 	*/
		char v_PostFlag[1+1];		/* POST_FLAG       CHAR(1) 	*/
		char v_Deposit[14+1];		/* DEPOSIT         NUMBER(14,2) */
		char v_MinYm[6+1];		/* MIN_YM          NUMBER(6) 	*/
		char v_OweFee[14+1];		/* OWE_FEE         NUMBER(14,2) */
		char v_AccountMark[10+1];	/* ACCOUNT_MARK    NUMBER(10) 	*/
		char v_AccountLimit[1+1];	/* ACCOUNT_LIMIT   CHAR(1) 	*/
		char v_PayCode[5+1];		/* PAY_CODE        CHAR(1) 	*/
		char v_BankCode[5+1];		/* BANK_CODE       CHAR(5) 	*/
		char v_PostBankCode[5+1];	/* POST_BANK_CODE  CHAR(5) 	*/
		char v_AccountNo[30+1];		/* ACCOUNT_NO      CHAR(30) 	*/
		char v_AccountType[1+1];	/* ACCOUNT_TYPE    CHAR(1) 	*/
		char v_GroupId[10+1];		/* GROUP_ID	   VARCHAR2(10) */
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dConMsg a set %s where a.CONTRACT_NO=to_number(:NG_Param0) %s",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if(v_ret < 0)
	{
		return -500026;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}


	EXEC SQL SELECT to_char(contract_no),to_char(CON_CUST_ID),CONTRACT_PASSWD,BANK_CUST,to_char(ODDMENT),
				BELONG_CODE,to_char(PREPAY_FEE),to_char(PREPAY_TIME,'yyyymmdd hh24:mi:ss'),
				STATUS,to_char(STATUS_TIME,'yyyymmdd hh24:mi:ss'),POST_FLAG,to_char(DEPOSIT),
				to_char(MIN_YM),to_char(OWE_FEE),to_char(ACCOUNT_MARK),ACCOUNT_LIMIT,
				PAY_CODE,nvl(BANK_CODE,chr(0)),nvl(POST_BANK_CODE,chr(0)),ACCOUNT_NO,ACCOUNT_TYPE,nvl(GROUP_ID,chr(0))
			into :v_ContractNo,:v_ConCustId,:v_ContractPasswd,:v_BankCust,:v_Oddment,
			     :v_BelongCode,:v_PrepayFee,:v_PrepayTime,
			     :v_Status,:v_Status_time,:v_PostFlag,:v_Deposit,
			     :v_MinYm,:v_OweFee,:v_AccountMark,:v_AccountLimit,
			     :v_PayCode,:v_BankCode,:v_PostBankCode,:v_AccountNo,:v_AccountType,:v_GroupId
			FROM dConMsg
			where CONTRACT_NO=:i_contract_no;

	if(SQLCODE!=SQLOK){
		return -500027;
	}


	Coltrim(v_ContractNo);
	Coltrim(v_ConCustId);
	Coltrim(v_ContractPasswd);
	Coltrim(v_BankCust);
	Coltrim(v_Oddment);
	Coltrim(v_BelongCode);
	Coltrim(v_PrepayFee);
	Coltrim(v_PrepayTime);
	Coltrim(v_Status);
	Coltrim(v_Status_time);
	Coltrim(v_PostFlag);
	Coltrim(v_Deposit);
	Coltrim(v_MinYm);
	Coltrim(v_OweFee);
	Coltrim(v_AccountMark);
	Coltrim(v_AccountLimit);
	Coltrim(v_PayCode);
	Coltrim(v_BankCode);
	Coltrim(v_PostBankCode);
	Coltrim(v_AccountNo);
	Coltrim(v_AccountType);
	Coltrim(v_GroupId);

	strcpy(v_table_name,"DCONMSG");

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);


	OrderSetPrimaryKey(&vMsgBodyType,"CONTRACT_NO",ORDERDATAFORMAT_NUMBER,v_ContractNo);

	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",    ORDERDATAFORMAT_NUMBER, v_ContractNo);
	OrderSetDataItem(&vMsgBodyType,"CON_CUST_ID",    ORDERDATAFORMAT_NUMBER, v_ConCustId);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_PASSWD",ORDERDATAFORMAT_STRING, v_ContractPasswd);
	OrderSetDataItem(&vMsgBodyType,"BANK_CUST",      ORDERDATAFORMAT_STRING, v_BankCust);
	OrderSetDataItem(&vMsgBodyType,"ODDMENT",        ORDERDATAFORMAT_NUMBER, v_Oddment);
	OrderSetDataItem(&vMsgBodyType,"BELONG_CODE",    ORDERDATAFORMAT_STRING, v_BelongCode);
	OrderSetDataItem(&vMsgBodyType,"PREPAY_FEE",     ORDERDATAFORMAT_NUMBER, v_PrepayFee);
	OrderSetDataItem(&vMsgBodyType,"PREPAY_TIME",    ORDERDATAFORMAT_DATE,   v_PrepayTime);
	OrderSetDataItem(&vMsgBodyType,"STATUS",         ORDERDATAFORMAT_STRING, v_Status);
	OrderSetDataItem(&vMsgBodyType,"STATUS_TIME",    ORDERDATAFORMAT_DATE,   v_Status_time);
	OrderSetDataItem(&vMsgBodyType,"POST_FLAG",      ORDERDATAFORMAT_STRING, v_PostFlag);
	OrderSetDataItem(&vMsgBodyType,"DEPOSIT",        ORDERDATAFORMAT_NUMBER, v_Deposit);
	OrderSetDataItem(&vMsgBodyType,"MIN_YM",         ORDERDATAFORMAT_NUMBER, v_MinYm);
	OrderSetDataItem(&vMsgBodyType,"OWE_FEE",        ORDERDATAFORMAT_NUMBER, v_OweFee);
	OrderSetDataItem(&vMsgBodyType,"ACCOUNT_MARK",   ORDERDATAFORMAT_NUMBER, v_AccountMark);
	OrderSetDataItem(&vMsgBodyType,"ACCOUNT_LIMIT",  ORDERDATAFORMAT_STRING, v_AccountLimit);
	OrderSetDataItem(&vMsgBodyType,"PAY_CODE",       ORDERDATAFORMAT_STRING, v_PayCode);
	OrderSetDataItem(&vMsgBodyType,"BANK_CODE",      ORDERDATAFORMAT_STRING, v_BankCode);
	OrderSetDataItem(&vMsgBodyType,"POST_BANK_CODE", ORDERDATAFORMAT_STRING, v_PostBankCode);
	OrderSetDataItem(&vMsgBodyType,"ACCOUNT_NO",     ORDERDATAFORMAT_STRING, v_AccountNo);
	OrderSetDataItem(&vMsgBodyType,"ACCOUNT_TYPE",   ORDERDATAFORMAT_STRING, v_AccountType);
	OrderSetDataItem(&vMsgBodyType,"GROUP_ID",       ORDERDATAFORMAT_STRING, v_GroupId);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500028;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/


	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500029;

	return 0;

}


/*********************************************************************/

/*
**函数名称: OrderInsertCustDoc
**功能描述: 向dcustdoc插入数据
**输入参数：i_op_code
			sTdCustDoc
**输出参数：v_ret
**版本号：
**编码作者：wangls
**编码时间：2009.03.23
**修改：
*/

int OrderInsertCustDoc(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustDoc
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustDoc	sTdCustDoc;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];
	Coltrim(i_sendid_no);

	Coltrim(sTdCustDoc.sCustId);
	Coltrim(sTdCustDoc.sRegionCode);
	Coltrim(sTdCustDoc.sDistrictCode);
	Coltrim(sTdCustDoc.sTownCode);
	Coltrim(sTdCustDoc.sCustName);
	Coltrim(sTdCustDoc.sCustPasswd);
	Coltrim(sTdCustDoc.sCustStatus);
	Coltrim(sTdCustDoc.sRunTime);
	Coltrim(sTdCustDoc.sOwnerGrade);
	Coltrim(sTdCustDoc.sOwnerType);
	Coltrim(sTdCustDoc.sCustAddress);
	Coltrim(sTdCustDoc.sIdType);
	Coltrim(sTdCustDoc.sIdIccid);
	Coltrim(sTdCustDoc.sIdAddress);
	Coltrim(sTdCustDoc.sIdValiddate);
	Coltrim(sTdCustDoc.sContactPerson);
	Coltrim(sTdCustDoc.sContactPhone);
	Coltrim(sTdCustDoc.sContactAddress);
	Coltrim(sTdCustDoc.sContactPost);
	Coltrim(sTdCustDoc.sContactMailaddress);
	Coltrim(sTdCustDoc.sContactFax);
	Coltrim(sTdCustDoc.sContactEmaill);
	Coltrim(sTdCustDoc.sOrgCode);
	Coltrim(sTdCustDoc.sCreateTime);
	Coltrim(sTdCustDoc.sCloseTime);
	Coltrim(sTdCustDoc.sParentId);
	Coltrim(sTdCustDoc.sCreateNote);
	Coltrim(sTdCustDoc.sTrueFlag);
	Coltrim(sTdCustDoc.sInfoType);
	Coltrim(sTdCustDoc.sAgreementType);
	Coltrim(sTdCustDoc.sGroupId);
	Coltrim(sTdCustDoc.sOrgId);

	EXEC SQL INSERT INTO dCustDoc(cust_id, region_code, district_code, town_code, cust_name,
									cust_passwd, cust_status, run_time, owner_grade, owner_type,
									cust_address, id_type, id_iccid, id_address, id_validdate,
									contact_person, contact_phone, contact_address, contact_post,contact_mailaddress,
									contact_fax, contact_emaill, org_code, create_time, close_time,
									parent_id, create_note, true_flag, info_type, agreement_type, group_id, org_id)

		VALUES(to_number(:sTdCustDoc.sCustId),:sTdCustDoc.sRegionCode,:sTdCustDoc.sDistrictCode,:sTdCustDoc.sTownCode,:sTdCustDoc.sCustName,
				:sTdCustDoc.sCustPasswd,:sTdCustDoc.sCustStatus,to_date(:sTdCustDoc.sRunTime,'yyyymmdd HH24:mi:ss'),:sTdCustDoc.sOwnerGrade,:sTdCustDoc.sOwnerType,
				:sTdCustDoc.sCustAddress,:sTdCustDoc.sIdType,:sTdCustDoc.sIdIccid,:sTdCustDoc.sIdAddress,to_date(:sTdCustDoc.sIdValiddate,'yyyymmdd HH24:mi:ss'),
				:sTdCustDoc.sContactPerson,:sTdCustDoc.sContactPhone,:sTdCustDoc.sContactAddress,:sTdCustDoc.sContactPost,:sTdCustDoc.sContactMailaddress,
				:sTdCustDoc.sContactFax,:sTdCustDoc.sContactEmaill,:sTdCustDoc.sOrgCode,to_date(:sTdCustDoc.sCreateTime,'yyyymmdd HH24:mi:ss'),to_date(:sTdCustDoc.sCloseTime,'yyyymmdd HH24:mi:ss'),
				to_number(:sTdCustDoc.sParentId),:sTdCustDoc.sCreateNote,:sTdCustDoc.sTrueFlag,:sTdCustDoc.sInfoType,:sTdCustDoc.sAgreementType,:sTdCustDoc.sGroupId,:sTdCustDoc.sOrgId);
	if (SQLCODE != SQLOK)
		return -500030;
	strcpy(v_table_name,"DCUSTDOC");
	/*组装报文开始*/
	init(vXmlString);
	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);
	OrderSetDataItem(&vMsgBodyType,"cust_id",            ORDERDATAFORMAT_NUMBER, sTdCustDoc.sCustId);
	OrderSetDataItem(&vMsgBodyType,"region_code",        ORDERDATAFORMAT_STRING, sTdCustDoc.sRegionCode);
	OrderSetDataItem(&vMsgBodyType,"district_code",      ORDERDATAFORMAT_STRING, sTdCustDoc.sDistrictCode);
	OrderSetDataItem(&vMsgBodyType,"town_code",          ORDERDATAFORMAT_STRING, sTdCustDoc.sTownCode);
	OrderSetDataItem(&vMsgBodyType,"cust_name",          ORDERDATAFORMAT_STRING, sTdCustDoc.sCustName);
	OrderSetDataItem(&vMsgBodyType,"cust_passwd",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCustPasswd);
	OrderSetDataItem(&vMsgBodyType,"cust_status",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCustStatus);
	OrderSetDataItem(&vMsgBodyType,"run_time",           ORDERDATAFORMAT_DATE,   sTdCustDoc.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"owner_grade",        ORDERDATAFORMAT_STRING, sTdCustDoc.sOwnerGrade);
	OrderSetDataItem(&vMsgBodyType,"owner_type",         ORDERDATAFORMAT_STRING, sTdCustDoc.sOwnerType);
	OrderSetDataItem(&vMsgBodyType,"cust_address",       ORDERDATAFORMAT_STRING, sTdCustDoc.sCustAddress);
	OrderSetDataItem(&vMsgBodyType,"id_type",            ORDERDATAFORMAT_STRING, sTdCustDoc.sIdType);
	OrderSetDataItem(&vMsgBodyType,"id_iccid",           ORDERDATAFORMAT_STRING, sTdCustDoc.sIdIccid);
	OrderSetDataItem(&vMsgBodyType,"id_address",         ORDERDATAFORMAT_STRING, sTdCustDoc.sIdAddress);
	OrderSetDataItem(&vMsgBodyType,"id_validdate",       ORDERDATAFORMAT_DATE,   sTdCustDoc.sIdValiddate);
	OrderSetDataItem(&vMsgBodyType,"contact_person",     ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPerson);
	OrderSetDataItem(&vMsgBodyType,"contact_phone",      ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPhone);
	OrderSetDataItem(&vMsgBodyType,"contact_address",    ORDERDATAFORMAT_STRING, sTdCustDoc.sContactAddress);
	OrderSetDataItem(&vMsgBodyType,"contact_post",       ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPost);
	OrderSetDataItem(&vMsgBodyType,"contact_mailaddress",ORDERDATAFORMAT_STRING, sTdCustDoc.sContactMailaddress);
	OrderSetDataItem(&vMsgBodyType,"contact_fax",        ORDERDATAFORMAT_STRING, sTdCustDoc.sContactFax);
	OrderSetDataItem(&vMsgBodyType,"contact_emaill",     ORDERDATAFORMAT_STRING, sTdCustDoc.sContactEmaill);
	OrderSetDataItem(&vMsgBodyType,"org_code",           ORDERDATAFORMAT_STRING, sTdCustDoc.sOrgCode);
	OrderSetDataItem(&vMsgBodyType,"create_time",        ORDERDATAFORMAT_DATE,   sTdCustDoc.sCreateTime);
	OrderSetDataItem(&vMsgBodyType,"close_time",         ORDERDATAFORMAT_DATE,   sTdCustDoc.sCloseTime);
	OrderSetDataItem(&vMsgBodyType,"parent_id",          ORDERDATAFORMAT_NUMBER, sTdCustDoc.sParentId);
	OrderSetDataItem(&vMsgBodyType,"create_note",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCreateNote);
	OrderSetDataItem(&vMsgBodyType,"true_flag",          ORDERDATAFORMAT_STRING, sTdCustDoc.sTrueFlag);
	OrderSetDataItem(&vMsgBodyType,"info_type",          ORDERDATAFORMAT_STRING, sTdCustDoc.sInfoType);
	OrderSetDataItem(&vMsgBodyType,"agreement_type",     ORDERDATAFORMAT_STRING, sTdCustDoc.sAgreementType);
	OrderSetDataItem(&vMsgBodyType,"group_id",           ORDERDATAFORMAT_STRING,sTdCustDoc.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"org_id",             ORDERDATAFORMAT_STRING,sTdCustDoc.sOrgId);
	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);
	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);


	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

/*
**函数名称: OrderDeleteCustDoc
**功能描述: 删除dcustdoc中数据
**输入参数：i_op_code
			i_cust_id
			i_where_sql
			i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：wangls
**编码时间：2009.03.23
**修改：
*/

int OrderDeleteCustDoc(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_cust_id,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_cust_id;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustdoc a WHERE a.cust_id=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTDOC");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

/*
**函数名称: OrderUpdateCustDoc
**功能描述: 更新dcustdoc中数据
**输入参数：i_op_code
			i_cust_id
			i_update_sql
			i_where_sql
			i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：wangls
**编码时间：2009.03.23
**修改：
*/

int OrderUpdateCustDoc(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_cust_id,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_cust_id;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustDoc	sTdCustDoc;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustDoc a SET %s WHERE a.cust_id=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(cust_id),region_code,district_code, town_code, cust_name,
					cust_passwd, cust_status, to_char(run_time,'yyyymmdd hh24:mi:ss'), owner_grade, owner_type,
					cust_address, id_type, id_iccid, id_address, to_char(id_validdate,'yyyymmdd hh24:mi:ss'),
					contact_person, contact_phone, contact_address, contact_post,contact_mailaddress,
					contact_fax, contact_emaill, org_code, to_char(create_time,'yyyymmdd hh24:mi:ss'), to_char(close_time,'yyyymmdd hh24:mi:ss'),
					parent_id, nvl(create_note,chr(0)), nvl(true_flag,chr(0)), nvl(info_type,chr(0)),
					nvl(agreement_type,chr(0)), nvl(group_id,chr(0)), nvl(org_id,chr(0))
			INTO :sTdCustDoc.sCustId,:sTdCustDoc.sRegionCode,:sTdCustDoc.sDistrictCode,:sTdCustDoc.sTownCode,:sTdCustDoc.sCustName,
				:sTdCustDoc.sCustPasswd,:sTdCustDoc.sCustStatus,:sTdCustDoc.sRunTime,:sTdCustDoc.sOwnerGrade,:sTdCustDoc.sOwnerType,
				:sTdCustDoc.sCustAddress,:sTdCustDoc.sIdType,:sTdCustDoc.sIdIccid,:sTdCustDoc.sIdAddress,:sTdCustDoc.sIdValiddate,
				:sTdCustDoc.sContactPerson,:sTdCustDoc.sContactPhone,:sTdCustDoc.sContactAddress,:sTdCustDoc.sContactPost,:sTdCustDoc.sContactMailaddress,
				:sTdCustDoc.sContactFax,:sTdCustDoc.sContactEmaill,:sTdCustDoc.sOrgCode,:sTdCustDoc.sCreateTime,:sTdCustDoc.sCloseTime,
				:sTdCustDoc.sParentId,:sTdCustDoc.sCreateNote,:sTdCustDoc.sTrueFlag,:sTdCustDoc.sInfoType,:sTdCustDoc.sAgreementType,:sTdCustDoc.sGroupId,:sTdCustDoc.sOrgId
			FROM dCustDoc
			WHERE cust_id = :i_cust_id;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustDoc.sCustId);
	Coltrim(sTdCustDoc.sRegionCode);
	Coltrim(sTdCustDoc.sDistrictCode);
	Coltrim(sTdCustDoc.sTownCode);
	Coltrim(sTdCustDoc.sCustName);

	Coltrim(sTdCustDoc.sCustPasswd);
	Coltrim(sTdCustDoc.sCustStatus);
	Coltrim(sTdCustDoc.sRunTime);
	Coltrim(sTdCustDoc.sOwnerGrade);
	Coltrim(sTdCustDoc.sOwnerType);

	Coltrim(sTdCustDoc.sCustAddress);
	Coltrim(sTdCustDoc.sIdType);
	Coltrim(sTdCustDoc.sIdIccid);
	Coltrim(sTdCustDoc.sIdAddress);
	Coltrim(sTdCustDoc.sIdValiddate);

	Coltrim(sTdCustDoc.sContactPerson);
	Coltrim(sTdCustDoc.sContactPhone);
	Coltrim(sTdCustDoc.sContactAddress);
	Coltrim(sTdCustDoc.sContactPost);
	Coltrim(sTdCustDoc.sContactMailaddress);

	Coltrim(sTdCustDoc.sContactFax);
	Coltrim(sTdCustDoc.sContactEmaill);
	Coltrim(sTdCustDoc.sOrgCode);
	Coltrim(sTdCustDoc.sCreateTime);
	Coltrim(sTdCustDoc.sCloseTime);

	Coltrim(sTdCustDoc.sParentId);
	Coltrim(sTdCustDoc.sCreateNote);
	Coltrim(sTdCustDoc.sTrueFlag);
	Coltrim(sTdCustDoc.sInfoType);
	Coltrim(sTdCustDoc.sAgreementType);
	Coltrim(sTdCustDoc.sGroupId);
	Coltrim(sTdCustDoc.sOrgId);

	strcpy(v_table_name,"DCUSTDOC");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	OrderSetDataItem(&vMsgBodyType,"cust_id",            ORDERDATAFORMAT_NUMBER, sTdCustDoc.sCustId);
	OrderSetDataItem(&vMsgBodyType,"region_code",        ORDERDATAFORMAT_STRING, sTdCustDoc.sRegionCode);
	OrderSetDataItem(&vMsgBodyType,"district_code",      ORDERDATAFORMAT_STRING, sTdCustDoc.sDistrictCode);
	OrderSetDataItem(&vMsgBodyType,"town_code",          ORDERDATAFORMAT_STRING, sTdCustDoc.sTownCode);
	OrderSetDataItem(&vMsgBodyType,"cust_name",          ORDERDATAFORMAT_STRING, sTdCustDoc.sCustName);
	OrderSetDataItem(&vMsgBodyType,"cust_passwd",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCustPasswd);
	OrderSetDataItem(&vMsgBodyType,"cust_status",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCustStatus);
	OrderSetDataItem(&vMsgBodyType,"run_time",           ORDERDATAFORMAT_DATE,   sTdCustDoc.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"owner_grade",        ORDERDATAFORMAT_STRING, sTdCustDoc.sOwnerGrade);
	OrderSetDataItem(&vMsgBodyType,"owner_type",         ORDERDATAFORMAT_STRING, sTdCustDoc.sOwnerType);
	OrderSetDataItem(&vMsgBodyType,"cust_address",       ORDERDATAFORMAT_STRING, sTdCustDoc.sCustAddress);
	OrderSetDataItem(&vMsgBodyType,"id_type",            ORDERDATAFORMAT_STRING, sTdCustDoc.sIdType);
	OrderSetDataItem(&vMsgBodyType,"id_iccid",           ORDERDATAFORMAT_STRING, sTdCustDoc.sIdIccid);
	OrderSetDataItem(&vMsgBodyType,"id_address",         ORDERDATAFORMAT_STRING, sTdCustDoc.sIdAddress);
	OrderSetDataItem(&vMsgBodyType,"id_validdate",       ORDERDATAFORMAT_DATE,   sTdCustDoc.sIdValiddate);
	OrderSetDataItem(&vMsgBodyType,"contact_person",     ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPerson);
	OrderSetDataItem(&vMsgBodyType,"contact_phone",      ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPhone);
	OrderSetDataItem(&vMsgBodyType,"contact_address",    ORDERDATAFORMAT_STRING, sTdCustDoc.sContactAddress);
	OrderSetDataItem(&vMsgBodyType,"contact_post",       ORDERDATAFORMAT_STRING, sTdCustDoc.sContactPost);
	OrderSetDataItem(&vMsgBodyType,"contact_mailaddress",ORDERDATAFORMAT_STRING, sTdCustDoc.sContactMailaddress);
	OrderSetDataItem(&vMsgBodyType,"contact_fax",        ORDERDATAFORMAT_STRING, sTdCustDoc.sContactFax);
	OrderSetDataItem(&vMsgBodyType,"contact_emaill",     ORDERDATAFORMAT_STRING, sTdCustDoc.sContactEmaill);
	OrderSetDataItem(&vMsgBodyType,"org_code",           ORDERDATAFORMAT_STRING, sTdCustDoc.sOrgCode);
	OrderSetDataItem(&vMsgBodyType,"create_time",        ORDERDATAFORMAT_DATE,   sTdCustDoc.sCreateTime);
	OrderSetDataItem(&vMsgBodyType,"close_time",         ORDERDATAFORMAT_DATE,   sTdCustDoc.sCloseTime);
	OrderSetDataItem(&vMsgBodyType,"parent_id",          ORDERDATAFORMAT_NUMBER, sTdCustDoc.sParentId);
	OrderSetDataItem(&vMsgBodyType,"create_note",        ORDERDATAFORMAT_STRING, sTdCustDoc.sCreateNote);
	OrderSetDataItem(&vMsgBodyType,"true_flag",          ORDERDATAFORMAT_STRING, sTdCustDoc.sTrueFlag);
	OrderSetDataItem(&vMsgBodyType,"info_type",          ORDERDATAFORMAT_STRING, sTdCustDoc.sInfoType);
	OrderSetDataItem(&vMsgBodyType,"agreement_type",     ORDERDATAFORMAT_STRING, sTdCustDoc.sAgreementType);
	OrderSetDataItem(&vMsgBodyType,"group_id",           ORDERDATAFORMAT_STRING,sTdCustDoc.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"org_id",             ORDERDATAFORMAT_STRING,sTdCustDoc.sOrgId);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

/*
函数名称：OrderInsertCustDocInAdd
功能描述：向dcustdocinadd插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

tdCustDocInAdd    以表dcustdocinadd建立的结构体
输出参数：
版本号：
编码作者：yeya
编码时间：
修改：
*/
int OrderInsertCustDocInAdd(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		tdCustDocInAdd)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustDocInAdd tdCustDocInAdd;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(tdCustDocInAdd.scust_id);
	Coltrim(tdCustDocInAdd.sSex);
	Coltrim(tdCustDocInAdd.sBirthday);
	Coltrim(tdCustDocInAdd.sProfessionId);
	Coltrim(tdCustDocInAdd.sEduLevel);
	Coltrim(tdCustDocInAdd.sCustLove);
	Coltrim(tdCustDocInAdd.sCustHabit);

	EXEC SQL INSERT INTO dCustDocInAdd(cust_id,
										cust_sex,
										birthday,
										profession_id,
										edu_level,
										cust_love,
										cust_habit)
	VALUES(to_number(:tdCustDocInAdd.scust_id),
			:tdCustDocInAdd.sSex,
			to_date(:tdCustDocInAdd.sBirthday,'YYYY/MM/DD'),
			:tdCustDocInAdd.sProfessionId,
			:tdCustDocInAdd.sEduLevel,
			:tdCustDocInAdd.sCustLove,
			:tdCustDocInAdd.sCustHabit);
	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500070;
	}
	strcpy(v_table_name,"DCUSTDOCINADD");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"cust_id",      ORDERDATAFORMAT_NUMBER, tdCustDocInAdd.scust_id);
	OrderSetDataItem(&vMsgBodyType,"cust_sex",     ORDERDATAFORMAT_STRING, tdCustDocInAdd.sSex);
	OrderSetDataItem(&vMsgBodyType,"birthday",     ORDERDATAFORMAT_DATE,   tdCustDocInAdd.sBirthday);
	OrderSetDataItem(&vMsgBodyType,"profession_id",ORDERDATAFORMAT_STRING, tdCustDocInAdd.sProfessionId);
	OrderSetDataItem(&vMsgBodyType,"edu_level",    ORDERDATAFORMAT_STRING, tdCustDocInAdd.sEduLevel);
	OrderSetDataItem(&vMsgBodyType,"cust_love",    ORDERDATAFORMAT_STRING, tdCustDocInAdd.sCustLove);
	OrderSetDataItem(&vMsgBodyType,"cust_habit",   ORDERDATAFORMAT_STRING, tdCustDocInAdd.sCustHabit);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500071;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500072;
	}

	return 0;
}
/*
函数名称：OrderUpdateCustDocInAdd
功能描述：向dcustdocinadd更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：yeya
编码时间：
修改：
*/
int  OrderUpdateCustDocInAdd(
				i_sendid_type,i_sendid_no,i_order_right,
				i_op_code,i_op_accept,i_op_login,i_op_note,
				i_cust_id,
				i_update_sql,i_where_sql,i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char* i_cust_id;

char* i_update_sql;
char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret = 0;
	char ret_msg[128+1] = {"the function execute successfully!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		char v_cust_id[14+1];
		char v_sex[1+1];
		char v_birthday[17+1];
		char v_profession_id[4+1];
		char v_edu_level[2+1];
		char v_cust_love[60+1];
		char v_cust_habit[60+1];

	EXEC SQL END DECLARE SECTION;
	init(v_sql_buff);
	init(v_cust_id);
	init(v_sex);
	init(v_birthday);
	init(v_profession_id);
	init(v_edu_level);
	init(v_cust_love);
	init(v_cust_habit);

	Coltrim(i_sendid_no);
	sprintf(v_sql_buff,"UPDATE dCustDocInAdd a SET %s WHERE a.cust_id=to_number(:NG_Param8) %s ",i_update_sql,i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0) {
		sprintf(ret_msg,"update function execute error!!");
		printf("[%d],\t[%d]\n",SQLCODE,v_ret);
		printf("[%s]\n",ret_msg);
		return -500073;
	}
	if (v_ret > 0 )
	{
		return 1;
	}
	EXEC SQL SELECT to_char(cust_id),
					 cust_sex,
					 to_char(birthday,'YYYY/MM/DD'),
					 profession_id,
					 edu_level,
					 cust_love,
					 cust_habit
	INTO :v_cust_id,:v_sex,:v_birthday,:v_profession_id,:v_edu_level,:v_cust_love,:v_cust_habit
	FROM dCustDocInAdd
	WHERE cust_id=:i_cust_id;

	if (SQLCODE!=SQLOK) {
		sprintf(ret_msg,"SQL execute error22222!!");
		printf("[%s]\n",ret_msg);
		return -500074;
	}
	Coltrim(v_cust_id);
	Coltrim(v_sex);
	Coltrim(v_birthday);
	Coltrim(v_profession_id);
	Coltrim(v_edu_level);
	Coltrim(v_cust_love);
	Coltrim(v_cust_habit);

	strcpy(v_table_name,"DCUSTDOCINADD");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	OrderSetDataItem(&vMsgBodyType,"cust_id",      ORDERDATAFORMAT_NUMBER, v_cust_id);
	OrderSetDataItem(&vMsgBodyType,"cust_sex",     ORDERDATAFORMAT_STRING, v_sex);
	OrderSetDataItem(&vMsgBodyType,"birthday",     ORDERDATAFORMAT_DATE,   v_birthday);
	OrderSetDataItem(&vMsgBodyType,"profession_id",ORDERDATAFORMAT_STRING, v_profession_id);
	OrderSetDataItem(&vMsgBodyType,"edu_level",    ORDERDATAFORMAT_STRING, v_edu_level);
	OrderSetDataItem(&vMsgBodyType,"cust_love",    ORDERDATAFORMAT_STRING, v_cust_love);
	OrderSetDataItem(&vMsgBodyType,"cust_habit",   ORDERDATAFORMAT_STRING, v_cust_habit);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500075;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);
	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
	v_order_data.order_right=i_order_right;

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		sprintf(ret_msg,"Order send execute error!!");
		printf("[%s]\n",ret_msg);
		return -500076;
	}

	return 0;
}
/*
函数名称：OrderDeleteCustDocInAdd
功能描述：向dcustdocinadd删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：yeya
编码时间：
修改：
*/
int OrderDeleteCustDocInAdd(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			i_cust_id,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char* i_cust_id;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustDocInAdd a WHERE a.cust_id=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500077;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DCUSTDOCINADD");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500078;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500079;
	}

	return 0;
}

/*********************************************************************/
/*
函数名称：OrderInsertBillCustDetail
功能描述：插入表dBillCustDetail
输入参数：
	i_op_code：								操作代码
	i_tdBillCustDetail
			sId_no							用户id
			sDetailType						优惠明细类别
			sDetailCode						优惠明细代码
			sBeginTime						优惠开始时间
			sEndTime						优惠结束时间
			sFavOrder						优惠顺序
			sModeCode						资费套餐模板代码
			sModeFlag						模板类别
			sModeTime						模板周期标志
			sModeStatus						模板状态
			sLoginAccept					操作流水
			sOpCode							操作代码
			sTotalDate						账务日期
			sOpTime							操作时间
			sLoginNo						操作工号
			sRegionCode						地市代码
输出参数：错误代码
版本号：
编码作者：zhangmeng
编码时间：20090401
修改:
 [修改人姓名][修改时间][修改内容]
*/
int OrderInsertBillCustDetail(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_tdBillCustDetail
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillCustDetail i_tdBillCustDetail;
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];			/*缓冲区，用来存储SQL语句*/
	EXEC SQL END DECLARE SECTION;

	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];			/*XML报文*/
	char v_parameter_array[DLMAXITEMS][DLINTERFACEDATA];		/*参数列表*/
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];

	char v_id_no[14+1];											/*用户Id*/
	char v_table_name[DLTABLENAME];										/*表名称*/

	/******初始化变量*******/
	init(vXmlString);
	init(v_id_no);
	init(v_parameter_array);
	init(v_sql_buff);
	init(v_table_name);
	Coltrim(i_sendid_no);

	Coltrim(i_tdBillCustDetail.sIdNo);
	Coltrim(i_tdBillCustDetail.sDetailType);
	Coltrim(i_tdBillCustDetail.sDetailCode);
	Coltrim(i_tdBillCustDetail.sBeginTime);
	Coltrim(i_tdBillCustDetail.sEndTime);
	Coltrim(i_tdBillCustDetail.sFavOrder);
	Coltrim(i_tdBillCustDetail.sModeCode);
	Coltrim(i_tdBillCustDetail.sModeFlag);
	Coltrim(i_tdBillCustDetail.sModeTime);
	Coltrim(i_tdBillCustDetail.sModeStatus);
	Coltrim(i_tdBillCustDetail.sLoginAccept);
	Coltrim(i_tdBillCustDetail.sOpCode);
	Coltrim(i_tdBillCustDetail.sTotalDate);
	Coltrim(i_tdBillCustDetail.sOpTime);
	Coltrim(i_tdBillCustDetail.sLoginNo);
	Coltrim(i_tdBillCustDetail.sRegionCode);

	/*设置表名参数*/
	strcpy(v_id_no, i_tdBillCustDetail.sIdNo);
	sprintf(v_table_name,"DBILLCUSTDETAIL%c",v_id_no[strlen(v_id_no)-1]);

	/*设置绑定变量*/
	strcpy(v_parameter_array[0],  i_tdBillCustDetail.sIdNo);
	strcpy(v_parameter_array[1],  i_tdBillCustDetail.sDetailType);
	strcpy(v_parameter_array[2],  i_tdBillCustDetail.sDetailCode);
	strcpy(v_parameter_array[3],  i_tdBillCustDetail.sBeginTime);
	strcpy(v_parameter_array[4],  i_tdBillCustDetail.sEndTime);
	strcpy(v_parameter_array[5],  i_tdBillCustDetail.sFavOrder);
	strcpy(v_parameter_array[6],  i_tdBillCustDetail.sModeCode);
	strcpy(v_parameter_array[7],  i_tdBillCustDetail.sModeFlag);
	strcpy(v_parameter_array[8],  i_tdBillCustDetail.sModeTime);
	strcpy(v_parameter_array[9],  i_tdBillCustDetail.sModeStatus);
	strcpy(v_parameter_array[10], i_tdBillCustDetail.sLoginAccept);
	strcpy(v_parameter_array[11], i_tdBillCustDetail.sOpCode);
	strcpy(v_parameter_array[12], i_tdBillCustDetail.sTotalDate);
	strcpy(v_parameter_array[13], i_tdBillCustDetail.sOpTime);
	strcpy(v_parameter_array[14], i_tdBillCustDetail.sLoginNo);
	strcpy(v_parameter_array[15], i_tdBillCustDetail.sRegionCode);

	/*SQL插入语句*/
	sprintf(v_sql_buff,"INSERT INTO %s(id_no, detail_type, detail_code,\
										begin_time, end_time, fav_order,\
										mode_code, mode_flag, mode_time, mode_status,\
										login_accept, op_code, total_date,\
										op_time, login_no, region_code \
										)         \
							VALUES(to_number(:NG_Param1),:NG_Param2, :NG_Param3, to_date(:NG_Param4,'YYYYMMDD HH24:MI:ss'),to_date(:NG_Param5,'YYYYMMDD HH24:MI:ss'),\
							to_number(:NG_Param6), :NG_Param7, :NG_Param8, :NG_Param9, :NG_Param10,to_number(:NG_Param11), \
							:NG_Param12, to_number(:NG_Param13), to_date(:NG_Param14,'YYYYMMDD HH24:MI:ss'), :NG_Param15, :NG_Param16)",v_table_name);

	/*插入表dBillCustDetail*/
#ifdef _DEBUG_
	printf("插入表dBillCustDetail%c：%s\n",v_id_no[strlen(v_id_no)-1],v_sql_buff);
#endif

	v_ret=OrderMultiParaDML(v_sql_buff,&v_parameter_array);

	if (v_ret!=0&&SQLCODE!=SQLOK)
		return -500040;

	/*组装报文开始*/
	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",			ORDERDATAFORMAT_NUMBER, i_tdBillCustDetail.sIdNo		);
	OrderSetDataItem(&vMsgBodyType,"detail_type",	ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sDetailType	);
	OrderSetDataItem(&vMsgBodyType,"detail_code",	ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sDetailCode	);
	OrderSetDataItem(&vMsgBodyType,"begin_time",	ORDERDATAFORMAT_DATE, 	i_tdBillCustDetail.sBeginTime	);
	OrderSetDataItem(&vMsgBodyType,"end_time",		ORDERDATAFORMAT_DATE, 	i_tdBillCustDetail.sEndTime	);
	OrderSetDataItem(&vMsgBodyType,"fav_order",		ORDERDATAFORMAT_NUMBER, i_tdBillCustDetail.sFavOrder	);
	OrderSetDataItem(&vMsgBodyType,"mode_code",		ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sModeCode	);
	OrderSetDataItem(&vMsgBodyType,"mode_flag",		ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sModeFlag	);
	OrderSetDataItem(&vMsgBodyType,"mode_time",		ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sModeTime	);
	OrderSetDataItem(&vMsgBodyType,"mode_status",	ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sModeStatus	);
	OrderSetDataItem(&vMsgBodyType,"login_accept",	ORDERDATAFORMAT_NUMBER, i_tdBillCustDetail.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"op_code",		ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sOpCode		);
	OrderSetDataItem(&vMsgBodyType,"total_date",	ORDERDATAFORMAT_NUMBER, i_tdBillCustDetail.sTotalDate	);
	OrderSetDataItem(&vMsgBodyType,"op_time",		ORDERDATAFORMAT_DATE,	i_tdBillCustDetail.sOpTime		);
	OrderSetDataItem(&vMsgBodyType,"login_no",		ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sLoginNo	);
	OrderSetDataItem(&vMsgBodyType,"region_code",	ORDERDATAFORMAT_STRING, i_tdBillCustDetail.sRegionCode	);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500041;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	/*发送工单表
	v_ret=OrderInserSendCrm(ORDERIDTYPE_USER,i_tdBillCustDetail.sId_no,ORDERTYPEDATA,ORDEROPTYPE_INSERT,i_op_code,"1",vXmlArray,"");
	*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
	#ifdef _DEBUG_
		printf("插入工单表失败！\n");
	#endif
		return -500042;
	}

	return 0;
}
/*
函数名称：OrderDeleteBillCustDetail
功能描述：删除表dBillCustDetail
输入参数：
	i_op_code：								操作代码
	i_tdBillCustDetailIndex					唯一索引
			sId_no						用户id
			sModeCode					资费套餐模板代码
			sLoginAccept				操作流水
			sDetailType					优惠明细类别
			sDetailCode					优惠明细代码
			sBeginTime					优惠开始时间
	i_where_sql								where子句
	i_parameter_array						虚拟变量参数列表.顺序：唯一索引中的顺序,where子句
输出参数：
版本号：
编码作者：zhangmeng
编码时间：20090401
修改:
 [修改人姓名][修改时间][修改内容]
*/
int OrderDeleteBillCustDetail(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_tdBillCustDetailIndex,
	i_where_sql,i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillCustDetailIndex i_tdBillCustDetailIndex;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];/*XML报文*/
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_id_no[14+1];								/*用户Id*/
	char 		v_table_name[DLTABLENAME];					/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];	/*缓冲区，用来存储SQL语句*/
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_id_no);
	init(v_table_name);
	init(vXmlString);

	/*设置表名称*/
	strcpy(v_id_no, i_tdBillCustDetailIndex.sIdNo);
	sprintf(v_table_name,"DBILLCUSTDETAIL%c",v_id_no[strlen(v_id_no)-1]);

	sprintf(v_sql_buff,"delete %s a where a.id_no=to_number(:NG_Param0) \
		AND a.mode_code=rpad(:NG_Param1,8,' ')  AND a.login_accept=to_number(:NG_Param2) \
		AND a.detail_type=:NG_Param3 AND a.detail_code=rpad(:NG_Param4,4,' ') \
		 %s ",v_table_name,i_where_sql);

#ifdef _DEBUG_
	printf("删除表%s：%s\n",v_table_name,v_sql_buff);
#endif
	Coltrim(i_parameter_array[0][5]);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500043;
	}

	/*if ((SQLCODE != SQLOK) && (SQLCODE != NOTFOUND))
	{
		return -500044;
	}*/

	/*没有更新到数据，可以不做后续处理*/
	/*if (SQLCODE == NOTFOUND)*/
	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType, v_table_name);

	/*设置主键*/
	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,i_tdBillCustDetailIndex.sIdNo		);
	OrderSetPrimaryKey(&vMsgBodyType,"mode_code",	ORDERDATAFORMAT_STRING,i_tdBillCustDetailIndex.sModeCode	);
	OrderSetPrimaryKey(&vMsgBodyType,"login_accept",ORDERDATAFORMAT_NUMBER,i_tdBillCustDetailIndex.sLoginAccept);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_type",	ORDERDATAFORMAT_STRING,i_tdBillCustDetailIndex.sDetailType	);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_code",	ORDERDATAFORMAT_STRING,i_tdBillCustDetailIndex.sDetailCode	);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500004;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	/*发送工单表*/
	/*v_ret=OrderInserSendCrm(ORDERIDTYPE_USER,i_tdBillCustDetailIndex.sId_no,ORDERTYPEDATA,ORDEROPTYPE_DELETE,i_op_code,"1",vXmlArray,"");
	*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500045;

	return 0;
}

/*
函数名称：OrderUpdateBillCustDetail
功能描述：更新表dBillCustDetail
输入参数：
	i_op_code：								操作代码
	i_tdBillCustDetailIndex					唯一索引
			sId_no						用户id
			sModeCode					资费套餐模板代码
			sLoginAccept				操作流水
			sDetailType					优惠明细类别
			sDetailCode					优惠明细代码
			sBeginTime					优惠开始时间
	i_update_sql							set子句
	i_where_sql								where子句
	i_parameter_array						虚拟变量参数列表。顺序：set子句，唯一索引中的顺序，where子句
输出参数：
版本号：
编码作者：zhangmeng
编码时间：20090401
修改:
 [修改人姓名][修改时间][修改内容]
*/
int OrderUpdateBillCustDetail(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,i_update_sql,i_where_sql,i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillCustDetailIndex oldIndex;
TdBillCustDetailIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/
	char v_id_no[14+1];									/*用户Id*/
	char v_parameter[DLMAXITEMS][DLINTERFACEDATA];		/*存储查询语句中所用参数的值*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];	/*缓冲区，用来存储SQL语句*/
		TdBillCustDetail v_tdBillCustDetail;			/*表信息结构体*/
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_id_no);
	init(v_table_name);
	init(v_parameter);
	init(vXmlString);
	memset(&v_tdBillCustDetail,0,sizeof(TdBillCustDetail));

	/*设置表名参数*/
	strcpy(v_id_no, oldIndex.sIdNo);
	sprintf(v_table_name,"DBILLCUSTDETAIL%c",v_id_no[strlen(v_id_no)-1]);

	sprintf(v_sql_buff,"UPDATE %s a SET %s WHERE a.id_no=to_number(:NG_Param0)\
						AND a.mode_code=rpad(:NG_Param1,8,' ') AND a.login_accept=to_number(:NG_Param2) \
				AND a.detail_type=:NG_Param3 AND a.detail_code=rpad(:NG_Param4,4,' ') \
				 %s ",v_table_name,i_update_sql,i_where_sql);

#ifdef _DEBUG_
	printf("更新表%s：%s\n",v_table_name,v_sql_buff);
#endif

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500046;

	/*if (SQLCODE!=SQLOK && SQLCODE!=NOTFOUND)
		return -500046;
	*/

	/*没有更新到数据，可以不做后续处理*/
	/*if (SQLCODE == NOTFOUND)*/
	if (v_ret > 0)
	{
		return 1;
	}

	/*查询更新内容*/
	init(v_sql_buff);
	sprintf(v_sql_buff,"SELECT to_char(id_no),detail_type,detail_code,to_char(begin_time,'yyyymmdd hh24:mi:ss'),\
	                            to_char(end_time,'yyyymmdd hh24:mi:ss'),to_char(fav_order),mode_code,\
								mode_flag,mode_time,mode_status,to_char(login_accept),op_code,to_char(total_date),\
								to_char(op_time,'yyyymmdd hh24:mi:ss'),login_no,region_code \
							FROM %s a WHERE a.id_no=to_number(:NG_Param0)\
								AND a.mode_code=rpad(:NG_Param1,8,' ') AND a.login_accept=to_number(:NG_Param2) \
								AND a.detail_type=:NG_Param3 AND a.detail_code=rpad(:NG_Param4,4,' ') ",v_table_name);
/*
	EXEC SQL PREPARE select_stmt FROM :v_sql_buff;
	EXEC SQL EXECUTE select_stmt
	            INTO :v_tdBillCustDetail.sIdNo,
	            	 :v_tdBillCustDetail.sDetailType,
		             :v_tdBillCustDetail.sDetailCode,
		             :v_tdBillCustDetail.sBeginTime,
		             :v_tdBillCustDetail.sEndTime,
		             :v_tdBillCustDetail.sFavOrder,
				     :v_tdBillCustDetail.sModeCode,
				     :v_tdBillCustDetail.sModeFlag,
				     :v_tdBillCustDetail.sModeTime,
				     :v_tdBillCustDetail.sModeStatus,
				     :v_tdBillCustDetail.sLoginAccept,
				     :v_tdBillCustDetail.sOpCode,
				     :v_tdBillCustDetail.sTotalDate,
				     :v_tdBillCustDetail.sOpTime,
				     :v_tdBillCustDetail.sLoginNo,
				     :v_tdBillCustDetail.sRegionCode
			   USING :newIndex.sIdNo,
					 :newIndex.sModeCode,
					 :newIndex.sLoginAccept,
					 :newIndex.sDetailType,
					 :newIndex.sDetailCode;
*/


	EXEC SQL PREPARE ng_billy FROM :v_sql_buff;
	EXEC SQL DECLARE ng_Cur3 CURSOR FOR ng_billy;
	EXEC SQL OPEN ng_Cur3
			   USING :newIndex.sIdNo,
					 :newIndex.sModeCode,
					 :newIndex.sLoginAccept,
					 :newIndex.sDetailType,
					 :newIndex.sDetailCode;

	if (SQLCODE!=SQLOK) return -500044;
	EXEC SQL FETCH ng_Cur3 INTO :v_tdBillCustDetail;
	if (SQLCODE!=SQLOK) return -500045;
	EXEC SQL CLOSE ng_Cur3;

	if (SQLCODE!=SQLOK)
	{
		return -500047;
	}

	Coltrim(v_tdBillCustDetail.sIdNo);
	Coltrim(v_tdBillCustDetail.sDetailType);
	Coltrim(v_tdBillCustDetail.sDetailCode);
	Coltrim(v_tdBillCustDetail.sBeginTime);
	Coltrim(v_tdBillCustDetail.sEndTime);
	Coltrim(v_tdBillCustDetail.sFavOrder);
	Coltrim(v_tdBillCustDetail.sModeCode);
	Coltrim(v_tdBillCustDetail.sModeFlag);
	Coltrim(v_tdBillCustDetail.sModeTime);
	Coltrim(v_tdBillCustDetail.sModeStatus);
	Coltrim(v_tdBillCustDetail.sLoginAccept);
	Coltrim(v_tdBillCustDetail.sOpCode);
	Coltrim(v_tdBillCustDetail.sTotalDate);
	Coltrim(v_tdBillCustDetail.sOpTime);
	Coltrim(v_tdBillCustDetail.sLoginNo);
	Coltrim(v_tdBillCustDetail.sRegionCode);

	/*组装报文开始*/
	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo		);
	OrderSetPrimaryKey(&vMsgBodyType,"mode_code",	ORDERDATAFORMAT_STRING,oldIndex.sModeCode	);
	OrderSetPrimaryKey(&vMsgBodyType,"login_accept",ORDERDATAFORMAT_NUMBER,oldIndex.sLoginAccept);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_type",	ORDERDATAFORMAT_STRING,oldIndex.sDetailType	);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_code",	ORDERDATAFORMAT_STRING,oldIndex.sDetailCode	);

	OrderSetDataItem(&vMsgBodyType,"id_no",			ORDERDATAFORMAT_NUMBER, v_tdBillCustDetail.sIdNo		);
	OrderSetDataItem(&vMsgBodyType,"detail_type",	ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sDetailType);
	OrderSetDataItem(&vMsgBodyType,"detail_code",	ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sDetailCode);
	OrderSetDataItem(&vMsgBodyType,"begin_time",	ORDERDATAFORMAT_DATE, 	v_tdBillCustDetail.sBeginTime	);
	OrderSetDataItem(&vMsgBodyType,"end_time",		ORDERDATAFORMAT_DATE, 	v_tdBillCustDetail.sEndTime			);
	OrderSetDataItem(&vMsgBodyType,"fav_order",		ORDERDATAFORMAT_NUMBER, v_tdBillCustDetail.sFavOrder		);
	OrderSetDataItem(&vMsgBodyType,"mode_code",		ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sModeCode	);
	OrderSetDataItem(&vMsgBodyType,"mode_flag",		ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sModeFlag		);
	OrderSetDataItem(&vMsgBodyType,"mode_time",		ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sModeTime		);
	OrderSetDataItem(&vMsgBodyType,"mode_status",	ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sModeStatus		);
	OrderSetDataItem(&vMsgBodyType,"login_accept",	ORDERDATAFORMAT_NUMBER, v_tdBillCustDetail.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"op_code",		ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sOpCode			);
	OrderSetDataItem(&vMsgBodyType,"total_date",	ORDERDATAFORMAT_NUMBER, v_tdBillCustDetail.sTotalDate		);
	OrderSetDataItem(&vMsgBodyType,"op_time",		ORDERDATAFORMAT_DATE,	v_tdBillCustDetail.sOpTime			);
	OrderSetDataItem(&vMsgBodyType,"login_no",		ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sLoginNo			);
	OrderSetDataItem(&vMsgBodyType,"region_code",	ORDERDATAFORMAT_STRING, v_tdBillCustDetail.sRegionCode		);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500048;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
	/*strcpy(v_order_data.order_right,i_order_right);*/

	/*发送工单表
	v_ret=OrderInserSendCrm(ORDERIDTYPE_USER,i_tdBillCustDetailIndex.sId_no,ORDERTYPEDATA,ORDEROPTYPE_UPDATE,i_op_code,"1",vXmlArray,"");
	*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500049;

	return 0;
}

int OrderInsertConUserMsg(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdConUserMsg
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserMsg tdConUserMsg;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/
	Coltrim(i_sendid_no);

	Coltrim(tdConUserMsg.sIdNo);
	Coltrim(tdConUserMsg.sContractNo);
	Coltrim(tdConUserMsg.sBillOrder);
	Coltrim(tdConUserMsg.sSerialNo);
	Coltrim(tdConUserMsg.sPayOrder);
	Coltrim(tdConUserMsg.sBeginYmd);
	Coltrim(tdConUserMsg.sBeginTm);
	Coltrim(tdConUserMsg.sEndYmd);
	Coltrim(tdConUserMsg.sEndTm);
	Coltrim(tdConUserMsg.sLimitPay);
	Coltrim(tdConUserMsg.sRateFlag);
	Coltrim(tdConUserMsg.sStopFlag);

	EXEC SQL INSERT INTO dConUserMsg(id_no, contract_no, bill_order, serial_no,
	                                 pay_order, begin_ymd, begin_tm, end_ymd,
	                                 end_tm, limit_pay, rate_flag, stop_flag)
		     				  VALUES(to_number(:tdConUserMsg.sIdNo),
		     				  		 to_number(:tdConUserMsg.sContractNo),
		     	                     to_number(:tdConUserMsg.sBillOrder),
		     	                     to_number(:tdConUserMsg.sSerialNo),
		     	    				 to_number(:tdConUserMsg.sPayOrder),
		     	    				 :tdConUserMsg.sBeginYmd, :tdConUserMsg.sBeginTm,
		     	    				 :tdConUserMsg.sEndYmd, :tdConUserMsg.sEndTm,
		     	    				 to_number(:tdConUserMsg.sLimitPay),
		     	    				 :tdConUserMsg.sRateFlag, :tdConUserMsg.sStopFlag
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DCONUSERMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdConUserMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no",	ORDERDATAFORMAT_NUMBER, tdConUserMsg.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "bill_order",	ORDERDATAFORMAT_NUMBER, tdConUserMsg.sBillOrder);
	OrderSetDataItem(&vMsgBodyType, "serial_no",	ORDERDATAFORMAT_NUMBER, tdConUserMsg.sSerialNo);
	OrderSetDataItem(&vMsgBodyType, "pay_order",	ORDERDATAFORMAT_NUMBER, tdConUserMsg.sPayOrder);
	OrderSetDataItem(&vMsgBodyType, "begin_ymd",	ORDERDATAFORMAT_STRING, tdConUserMsg.sBeginYmd);
	OrderSetDataItem(&vMsgBodyType, "begin_tm",		ORDERDATAFORMAT_STRING, tdConUserMsg.sBeginTm);
	OrderSetDataItem(&vMsgBodyType, "end_ymd",		ORDERDATAFORMAT_STRING, tdConUserMsg.sEndYmd);
	OrderSetDataItem(&vMsgBodyType, "end_tm",		ORDERDATAFORMAT_STRING, tdConUserMsg.sEndTm);
	OrderSetDataItem(&vMsgBodyType, "limit_pay",	ORDERDATAFORMAT_NUMBER, tdConUserMsg.sLimitPay);
	OrderSetDataItem(&vMsgBodyType, "rate_flag",	ORDERDATAFORMAT_STRING, tdConUserMsg.sRateFlag);
	OrderSetDataItem(&vMsgBodyType, "stop_flag",	ORDERDATAFORMAT_STRING, tdConUserMsg.sStopFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteConUserMsg(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dConUserMsg a WHERE a.id_no=to_number(:NG_Param0) \
	and a.contract_no=to_number(:NG_Param1) and a.serial_no=to_number(:NG_Param2) %s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DCONUSERMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",			ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no",	ORDERDATAFORMAT_NUMBER, oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType, "serial_no",		ORDERDATAFORMAT_NUMBER, oldIndex.sSerialNo);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


/* 增加一个输入参数，op_time作为插入计费小表wConUserChg之用 */
int OrderUpdateConUserMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserMsgIndex oldIndex;
TdConUserMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdConUserMsg	tdConUserMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dconusermsg a SET %s WHERE a.id_no=to_number(:NG_Param0) \
	and a.contract_no=to_number(:NG_Param1) and a.serial_no=to_number(:NG_Param2) %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(id_no), to_char(contract_no), to_char(bill_order), to_char(serial_no),
					to_char(pay_order), begin_ymd, begin_tm, end_ymd,end_tm,
					to_char(limit_pay), rate_flag, stop_flag
			   INTO :tdConUserMsg.sIdNo, :tdConUserMsg.sContractNo, :tdConUserMsg.sBillOrder, :tdConUserMsg.sSerialNo,
			   		:tdConUserMsg.sPayOrder, :tdConUserMsg.sBeginYmd, :tdConUserMsg.sBeginTm,
			   		:tdConUserMsg.sEndYmd, :tdConUserMsg.sEndTm,:tdConUserMsg.sLimitPay,
			   		:tdConUserMsg.sRateFlag, :tdConUserMsg.sStopFlag
			   FROM dConUserMsg
			  WHERE id_no=to_number(:newIndex.sIdNo) and contract_no=to_number(:newIndex.sContractNo)
			    and serial_no=to_number(:newIndex.sSerialNo);
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdConUserMsg.sIdNo);
	Coltrim(tdConUserMsg.sContractNo);
	Coltrim(tdConUserMsg.sBillOrder);
	Coltrim(tdConUserMsg.sSerialNo);
	Coltrim(tdConUserMsg.sPayOrder);
	Coltrim(tdConUserMsg.sBeginYmd);
	Coltrim(tdConUserMsg.sBeginTm);
	Coltrim(tdConUserMsg.sEndYmd);
	Coltrim(tdConUserMsg.sEndTm);
	Coltrim(tdConUserMsg.sLimitPay);
	Coltrim(tdConUserMsg.sRateFlag);
	Coltrim(tdConUserMsg.sStopFlag);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DCONUSERMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no", ORDERDATAFORMAT_NUMBER, oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType, "serial_no",	 ORDERDATAFORMAT_NUMBER, oldIndex.sSerialNo);

	OrderSetDataItem(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no",	 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "bill_order",	 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sBillOrder);
	OrderSetDataItem(&vMsgBodyType, "serial_no",	 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sSerialNo);
	OrderSetDataItem(&vMsgBodyType, "pay_order",	 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sPayOrder);
	OrderSetDataItem(&vMsgBodyType, "begin_ymd",	 ORDERDATAFORMAT_STRING, tdConUserMsg.sBeginYmd);
	OrderSetDataItem(&vMsgBodyType, "begin_tm",		 ORDERDATAFORMAT_STRING, tdConUserMsg.sBeginTm);
	OrderSetDataItem(&vMsgBodyType, "end_ymd",		 ORDERDATAFORMAT_STRING, tdConUserMsg.sEndYmd);
	OrderSetDataItem(&vMsgBodyType, "end_tm",		 ORDERDATAFORMAT_STRING, tdConUserMsg.sEndTm);
	OrderSetDataItem(&vMsgBodyType, "limit_pay",	 ORDERDATAFORMAT_NUMBER, tdConUserMsg.sLimitPay);
	OrderSetDataItem(&vMsgBodyType, "rate_flag",	 ORDERDATAFORMAT_STRING, tdConUserMsg.sRateFlag);
	OrderSetDataItem(&vMsgBodyType, "stop_flag",	 ORDERDATAFORMAT_STRING, tdConUserMsg.sStopFlag);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderInsertConUserRate(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdConUserRate
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserRate tdConUserRate;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/
	char sLimitPay[14+1];
	char sRateFlag[1+1];
	init(sLimitPay);
	init(sRateFlag);
	Coltrim(i_sendid_no);

	Coltrim(tdConUserRate.sIdNo);
	Coltrim(tdConUserRate.sContractNo);
	Coltrim(tdConUserRate.sBillOrder);
	Coltrim(tdConUserRate.sFeeCode);
	Coltrim(tdConUserRate.sPayOrder);
	Coltrim(tdConUserRate.sFeeRate);
	Coltrim(tdConUserRate.sDetailCode);

	EXEC SQL INSERT INTO dConUserRate(ID_NO,CONTRACT_NO,BILL_ORDER,FEE_CODE,
									 PAY_ORDER,FEE_RATE,DETAIL_CODE)
		     				  VALUES(to_number(:tdConUserRate.sIdNo),
		     				  		 to_number(:tdConUserRate.sContractNo),
		     	                     to_number(:tdConUserRate.sBillOrder),
		     	                     :tdConUserRate.sFeeCode,
		     	    				 to_number(:tdConUserRate.sPayOrder),
		     	    				 to_number(:tdConUserRate.sFeeRate),
		     	    				 :tdConUserRate.sDetailCode
		     	    				 );
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/* 查询wConUserChg所需的两个字段 */
	EXEC SQL SELECT to_char(limit_pay),rate_flag
			   INTO :sLimitPay,:sRateFlag
			   FROM dConUserMsg
			  WHERE id_no=to_number(:tdConUserRate.sIdNo)
			  	AND contract_no=to_number(:tdConUserRate.sContractNo)
			  	AND bill_order=to_number(:tdConUserRate.sBillOrder);
	if (SQLCODE != SQLOK)
	{
		return -500133;

	}
	Coltrim(sLimitPay);
	Coltrim(sRateFlag);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DCONUSERRATE");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdConUserRate.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no",	ORDERDATAFORMAT_NUMBER, tdConUserRate.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "bill_order",	ORDERDATAFORMAT_NUMBER, tdConUserRate.sBillOrder);
	OrderSetDataItem(&vMsgBodyType, "fee_code",	    ORDERDATAFORMAT_STRING, tdConUserRate.sFeeCode);
	OrderSetDataItem(&vMsgBodyType, "pay_order",	ORDERDATAFORMAT_NUMBER, tdConUserRate.sPayOrder);
	OrderSetDataItem(&vMsgBodyType, "fee_rate",	    ORDERDATAFORMAT_NUMBER, tdConUserRate.sFeeRate);
	OrderSetDataItem(&vMsgBodyType, "detail_code",	ORDERDATAFORMAT_STRING, tdConUserRate.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "limit_pay",	ORDERDATAFORMAT_NUMBER, sLimitPay);
	OrderSetDataItem(&vMsgBodyType, "rate_flag",    ORDERDATAFORMAT_STRING, sRateFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderUpdateConUserRate(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,op_time,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserRateIndex oldIndex;
TdConUserRateIndex newIndex;
char *op_time;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdConUserRate	tdConUserRate;
		char sLimitPay[14+1];
		char sRateFlag[1+1];
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);
	init(sLimitPay);
	init(sRateFlag);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dconuserRate a SET %s WHERE a.id_no=to_number(:NG_Param0) \
	and a.contract_no=to_number(:NG_Param1) and a.bill_order=to_number(:NG_Param2) and a.fee_code=rpad(:NG_Param3,2,' ') \
	and a.detail_code=rpad(:NG_Param4,2,' ') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(id_no),to_char(contract_no),to_char(bill_order),
	                fee_code,to_char(pay_order), to_char(fee_rate),detail_code
			   INTO :tdConUserRate.sIdNo,:tdConUserRate.sContractNo,:tdConUserRate.sBillOrder,
			   	    :tdConUserRate.sFeeCode,:tdConUserRate.sPayOrder, :tdConUserRate.sFeeRate, :tdConUserRate.sDetailCode
			   FROM dConUserRate
			  WHERE id_no=to_number(:newIndex.sIdNo) and contract_no=to_number(:newIndex.sContractNo)
			    and bill_order=to_number(:newIndex.sBillOrder)
			  	and fee_code=:newIndex.sFeeCode and detail_code=:newIndex.sDetailCode;
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdConUserRate.sIdNo);
	Coltrim(tdConUserRate.sContractNo);
	Coltrim(tdConUserRate.sBillOrder);
	Coltrim(tdConUserRate.sFeeCode);
	Coltrim(tdConUserRate.sPayOrder);
	Coltrim(tdConUserRate.sFeeRate);
	Coltrim(tdConUserRate.sFeeRate);
	Coltrim(tdConUserRate.sDetailCode);

	/* 查询wConUserChg所需的两个字段 */
	EXEC SQL SELECT to_char(limit_pay),rate_flag
			   INTO :sLimitPay,:sRateFlag
			   FROM dConUserMsg
			  WHERE id_no=to_number(:tdConUserRate.sIdNo)
			  	AND contract_no=to_number(:tdConUserRate.sContractNo)
			  	AND bill_order=to_number(:tdConUserRate.sBillOrder);
	if (SQLCODE != SQLOK)
	{
		return -500133;

	}
	Coltrim(sLimitPay);
	Coltrim(sRateFlag);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DCONUSERRATE");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no", ORDERDATAFORMAT_NUMBER, oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType, "bill_order",	 ORDERDATAFORMAT_NUMBER, oldIndex.sBillOrder);
	OrderSetPrimaryKey(&vMsgBodyType, "fee_code",	 ORDERDATAFORMAT_STRING, oldIndex.sFeeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "detail_code", ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);

	OrderSetDataItem(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, tdConUserRate.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no",   ORDERDATAFORMAT_NUMBER, tdConUserRate.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "bill_order",	 ORDERDATAFORMAT_NUMBER, tdConUserRate.sBillOrder);
	OrderSetDataItem(&vMsgBodyType, "fee_code",	 	 ORDERDATAFORMAT_STRING, tdConUserRate.sFeeCode);
	OrderSetDataItem(&vMsgBodyType, "pay_order",     ORDERDATAFORMAT_NUMBER, tdConUserRate.sPayOrder);
	OrderSetDataItem(&vMsgBodyType, "fee_rate",	     ORDERDATAFORMAT_NUMBER, tdConUserRate.sFeeRate);
	OrderSetDataItem(&vMsgBodyType, "detail_code",	 ORDERDATAFORMAT_STRING, tdConUserRate.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "limit_pay",	 ORDERDATAFORMAT_NUMBER, sLimitPay);
	OrderSetDataItem(&vMsgBodyType, "rate_flag",     ORDERDATAFORMAT_STRING, sRateFlag);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderDeleteConUserRate(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserRateIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dConUserRate a WHERE a.id_no=to_number(:NG_Param0) \
	and a.contract_no=to_number(:NG_Param1) and a.bill_order=to_number(:NG_Param2) and a.fee_code=rpad(:NG_Param3,2,' ') \
	and a.detail_code=rpad(:NG_Param4,2,' ') %s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DCONUSERRATE");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no", ORDERDATAFORMAT_NUMBER, oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType, "bill_order",	 ORDERDATAFORMAT_NUMBER, oldIndex.sBillOrder);
	OrderSetPrimaryKey(&vMsgBodyType, "fee_code",	 ORDERDATAFORMAT_STRING, oldIndex.sFeeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "detail_code", ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderInsertBaseFav(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdBaseFav
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseFav tdBaseFav;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/
	Coltrim(i_sendid_no);

	Coltrim(tdBaseFav.sMsisdn);
	Coltrim(tdBaseFav.sRegionCode);
	Coltrim(tdBaseFav.sFavBrand);
	Coltrim(tdBaseFav.sFavType);
	Coltrim(tdBaseFav.sFlagCode);
	Coltrim(tdBaseFav.sFavOrder);
	Coltrim(tdBaseFav.sFavDay);
	Coltrim(tdBaseFav.sStartTime);
	Coltrim(tdBaseFav.sEndTime);
	Coltrim(tdBaseFav.sServiceId);
	Coltrim(tdBaseFav.sFavPeriod);
	Coltrim(tdBaseFav.sFreeValue);
	Coltrim(tdBaseFav.sIdNo);
	Coltrim(tdBaseFav.sGroupId);
	Coltrim(tdBaseFav.sProductCode);

	EXEC SQL INSERT INTO dBaseFav(msisdn, region_code, fav_brand, fav_type, flag_code,
								  fav_order, fav_day, start_time, end_time, service_id,
								  fav_period, free_value, id_no, group_id, product_code)
		     				  VALUES(:tdBaseFav.sMsisdn,:tdBaseFav.sRegionCode,:tdBaseFav.sFavBrand,
		     				  		 :tdBaseFav.sFavType,:tdBaseFav.sFlagCode,:tdBaseFav.sFavOrder,
		     				  		 :tdBaseFav.sFavDay,to_date(:tdBaseFav.sStartTime,'yyyymmdd hh24:mi:ss'),
		     				  		 to_date(:tdBaseFav.sEndTime,'yyyymmdd hh24:mi:ss'),
		     				  		 :tdBaseFav.sServiceId,nvl(:tdBaseFav.sFavPeriod,'0'),nvl(to_number(:tdBaseFav.sFreeValue),0),
		     				  		 nvl(to_number(:tdBaseFav.sIdNo),0),nvl(:tdBaseFav.sGroupId,'0'),nvl(:tdBaseFav.sProductCode,'0')
		     	    				 );
	if (SQLCODE != SQLOK)
	{
		printf("++++++++++++++sqlcode=%d\n",SQLCODE);
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DBASEFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdBaseFav.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_brand",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavBrand);
	OrderSetDataItem(&vMsgBodyType, "fav_type",	    ORDERDATAFORMAT_STRING, tdBaseFav.sFavType);
	OrderSetDataItem(&vMsgBodyType, "flag_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sFlagCode);
	OrderSetDataItem(&vMsgBodyType, "fav_order",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavOrder);
	OrderSetDataItem(&vMsgBodyType, "fav_day",	    ORDERDATAFORMAT_STRING, tdBaseFav.sFavDay);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdBaseFav.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",	    ORDERDATAFORMAT_DATE,   tdBaseFav.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "service_id",	ORDERDATAFORMAT_STRING, tdBaseFav.sServiceId);
	OrderSetDataItem(&vMsgBodyType, "fav_period",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavPeriod);
	OrderSetDataItem(&vMsgBodyType, "free_value",	ORDERDATAFORMAT_NUMBER, tdBaseFav.sFreeValue);
	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdBaseFav.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "group_id",	    ORDERDATAFORMAT_STRING, tdBaseFav.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "product_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sProductCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderUpdateBaseFav(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseFavIndex oldIndex;
TdBaseFavIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdBaseFav	tdBaseFav;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dBaseFav SET %s WHERE msisdn=rpad(:NG_Param1,15,' ') \
	and fav_type=rpad(:NG_Param2,4,' ') and flag_code=rpad(:NG_Param3,10,' ') and start_time=to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') \
	%s ", i_update_sql, i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		printf("v_ret=%d,[%s]\n", v_ret,SQLERRMSG);
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT msisdn, region_code, fav_brand, fav_type, flag_code, fav_order, fav_day,
	                to_char(start_time,'yyyymmdd hh24:mi:ss'), to_char(end_time,'yyyymmdd hh24:mi:ss'), nvl(service_id,chr(0)),
	                nvl(fav_period,chr(0)), nvl(to_char(free_value),chr(0)), nvl(to_char(id_no),chr(0)),
	                nvl(group_id,chr(0)), nvl(product_code,chr(0))
			   INTO :tdBaseFav.sMsisdn, :tdBaseFav.sRegionCode, :tdBaseFav.sFavBrand,
			   	    :tdBaseFav.sFavType, :tdBaseFav.sFlagCode, :tdBaseFav.sFavOrder, :tdBaseFav.sFavDay,
			   	    :tdBaseFav.sStartTime, :tdBaseFav.sEndTime, :tdBaseFav.sServiceId,
			   	    :tdBaseFav.sFavPeriod, :tdBaseFav.sFreeValue, :tdBaseFav.sIdNo,
			   	    :tdBaseFav.sGroupId, :tdBaseFav.sProductCode
			   FROM dBaseFav
			  WHERE msisdn=:newIndex.sMsisdn and fav_type=:newIndex.sFavType and flag_code=:newIndex.sFlagCode
			  	and start_time=to_date(:newIndex.sStartTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdBaseFav.sMsisdn);
	Coltrim(tdBaseFav.sRegionCode);
	Coltrim(tdBaseFav.sFavBrand);
	Coltrim(tdBaseFav.sFavType);
	Coltrim(tdBaseFav.sFlagCode);
	Coltrim(tdBaseFav.sFavOrder);
	Coltrim(tdBaseFav.sFavDay);
	Coltrim(tdBaseFav.sStartTime);
	Coltrim(tdBaseFav.sEndTime);
	Coltrim(tdBaseFav.sServiceId);
	Coltrim(tdBaseFav.sFavPeriod);
	Coltrim(tdBaseFav.sFreeValue);
	Coltrim(tdBaseFav.sIdNo);
	Coltrim(tdBaseFav.sGroupId);
	Coltrim(tdBaseFav.sProductCode);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",    ORDERDATAFORMAT_STRING, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "flag_code",	 ORDERDATAFORMAT_STRING, oldIndex.sFlagCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdBaseFav.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_brand",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavBrand);
	OrderSetDataItem(&vMsgBodyType, "fav_type",	    ORDERDATAFORMAT_STRING, tdBaseFav.sFavType);
	OrderSetDataItem(&vMsgBodyType, "flag_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sFlagCode);
	OrderSetDataItem(&vMsgBodyType, "fav_order",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavOrder);
	OrderSetDataItem(&vMsgBodyType, "fav_day",	    ORDERDATAFORMAT_STRING, tdBaseFav.sFavDay);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdBaseFav.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",	    ORDERDATAFORMAT_DATE,   tdBaseFav.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "service_id",	ORDERDATAFORMAT_STRING, tdBaseFav.sServiceId);
	OrderSetDataItem(&vMsgBodyType, "fav_period",	ORDERDATAFORMAT_STRING, tdBaseFav.sFavPeriod);
	OrderSetDataItem(&vMsgBodyType, "free_value",	ORDERDATAFORMAT_NUMBER, tdBaseFav.sFreeValue);
	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdBaseFav.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "group_id",	    ORDERDATAFORMAT_STRING, tdBaseFav.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "product_code",	ORDERDATAFORMAT_STRING, tdBaseFav.sProductCode);
	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderDeleteBaseFav(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseFavIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dBaseFav a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,4,' ') and a.flag_code=rpad(:NG_Param2,10,' ') and a.start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",    ORDERDATAFORMAT_STRING, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "flag_code",	 ORDERDATAFORMAT_STRING, oldIndex.sFlagCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}

/* 为删除dbasefav而不记小表的情况特殊使用 */
int OrderDeleteOtherBaseFav(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseFavIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dBaseFav a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,4,' ') and a.flag_code=rpad(:NG_Param2,10,' ') and a.start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",    ORDERDATAFORMAT_STRING, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "flag_code",	 ORDERDATAFORMAT_STRING, oldIndex.sFlagCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_OTHER);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderInsertBaseVpmn(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdBaseVpmn
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseVpmn tdBaseVpmn;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/
	Coltrim(i_sendid_no);

	Coltrim(tdBaseVpmn.sMsisdn);
	Coltrim(tdBaseVpmn.sGroupId);
	Coltrim(tdBaseVpmn.sValid);
	Coltrim(tdBaseVpmn.sInvalid);
	Coltrim(tdBaseVpmn.sMocrate);
	Coltrim(tdBaseVpmn.sMtcrate);

	EXEC SQL INSERT INTO dBaseVpmn  (msisdn, groupid, valid, invalid, mocrate, mtcrate)
		     				  VALUES(:tdBaseVpmn.sMsisdn, :tdBaseVpmn.sGroupId,
		     				  	     to_date(:tdBaseVpmn.sValid,'yyyymmdd hh24:mi:ss'),
		     				  	     to_date(:tdBaseVpmn.sInvalid,'yyyymmdd hh24:mi:ss'),
		     				  	     to_number(:tdBaseVpmn.sMocrate), to_number(:tdBaseVpmn.sMtcrate)
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DBASEVPMN");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "msisdn",	ORDERDATAFORMAT_STRING, tdBaseVpmn.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "groupid",	ORDERDATAFORMAT_STRING, tdBaseVpmn.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "valid",	ORDERDATAFORMAT_DATE,   tdBaseVpmn.sValid);
	OrderSetDataItem(&vMsgBodyType, "invalid",	ORDERDATAFORMAT_DATE,   tdBaseVpmn.sInvalid);
	OrderSetDataItem(&vMsgBodyType, "mocrate",	ORDERDATAFORMAT_NUMBER, tdBaseVpmn.sMocrate);
	OrderSetDataItem(&vMsgBodyType, "mtcrate",	ORDERDATAFORMAT_NUMBER, tdBaseVpmn.sMtcrate);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteBaseVpmn(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseVpmnIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dBaseVpmn a WHERE a.msisdn=rpad(:NG_Param0,11,' ') \
	and a.groupid=:NG_Param1 and a.valid=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEVPMN");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "groupid",	    ORDERDATAFORMAT_STRING, oldIndex.sGroupId);
	OrderSetPrimaryKey(&vMsgBodyType, "valid",		    ORDERDATAFORMAT_DATE,   oldIndex.sValid);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateBaseVpmn(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseVpmnIndex oldIndex;
TdBaseVpmnIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdBaseVpmn	tdBaseVpmn;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dBaseVpmn a SET %s where a.msisdn=rpad(:NG_Param0,11,' ') \
	and a.groupid=:NG_Param1 and a.valid=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	printf("SQLCODE=%d\n", SQLCODE);	/*MFY*/
	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT msisdn,groupid,to_char(valid,'yyyymmdd hh24:mi:ss'),
	                to_char(invalid,'yyyymmdd hh24:mi:ss'), nvl(to_char(mocrate),chr(0)), nvl(to_char(mtcrate),chr(0))
			   INTO :tdBaseVpmn.sMsisdn, :tdBaseVpmn.sGroupId, :tdBaseVpmn.sValid,
			   	    :tdBaseVpmn.sInvalid, :tdBaseVpmn.sMocrate, :tdBaseVpmn.sMtcrate
			   FROM dBaseVpmn
			  WHERE msisdn=:newIndex.sMsisdn and groupid=:newIndex.sGroupId
			  	and valid=to_date(:newIndex.sValid,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdBaseVpmn.sMsisdn);
	Coltrim(tdBaseVpmn.sGroupId);
	Coltrim(tdBaseVpmn.sValid);
	Coltrim(tdBaseVpmn.sInvalid);
	Coltrim(tdBaseVpmn.sMocrate);
	Coltrim(tdBaseVpmn.sMtcrate);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEVPMN");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",	ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "groupid",ORDERDATAFORMAT_STRING, oldIndex.sGroupId);
	OrderSetPrimaryKey(&vMsgBodyType, "valid",	ORDERDATAFORMAT_DATE,   oldIndex.sValid);

	OrderSetDataItem(&vMsgBodyType, "msisdn",	ORDERDATAFORMAT_STRING, tdBaseVpmn.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "groupid",	ORDERDATAFORMAT_STRING, tdBaseVpmn.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "valid",	ORDERDATAFORMAT_DATE,   tdBaseVpmn.sValid);
	OrderSetDataItem(&vMsgBodyType, "invalid",	ORDERDATAFORMAT_DATE,   tdBaseVpmn.sInvalid);
	OrderSetDataItem(&vMsgBodyType, "mocrate",	ORDERDATAFORMAT_NUMBER, tdBaseVpmn.sMocrate);
	OrderSetDataItem(&vMsgBodyType, "mtcrate",	ORDERDATAFORMAT_NUMBER, tdBaseVpmn.sMtcrate);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderDeleteOtherBaseVpmn(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBaseVpmnIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dBaseVpmn a WHERE a.msisdn=rpad(:NG_Param0,11,' ') \
	and a.groupid=:NG_Param1 and a.valid=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DBASEVPMN");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "groupid",	    ORDERDATAFORMAT_STRING, oldIndex.sGroupId);
	OrderSetPrimaryKey(&vMsgBodyType, "valid",		    ORDERDATAFORMAT_DATE,   oldIndex.sValid);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_OTHER);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}

int OrderInsertRelationFav(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdRelationFav
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdRelationFav tdRelationFav;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdRelationFav.sMsisdn);
	Coltrim(tdRelationFav.sRegionCode);
	Coltrim(tdRelationFav.sFavType);
	Coltrim(tdRelationFav.sOtherCode);
	Coltrim(tdRelationFav.sStartTime);
	Coltrim(tdRelationFav.sEndTime);
	Coltrim(tdRelationFav.sIdNo);

	EXEC SQL INSERT INTO dRelationFav(msisdn, region_code, fav_type, other_code, start_time, end_time, id_no)
		     				  VALUES(:tdRelationFav.sMsisdn, :tdRelationFav.sRegionCode,
		     				  	     :tdRelationFav.sFavType, :tdRelationFav.sOtherCode,
		     				  	     to_date(:tdRelationFav.sStartTime,'yyyymmdd hh24:mi:ss'),
		     				  	     to_date(:tdRelationFav.sEndTime,'yyyymmdd hh24:mi:ss'),
		     				  	     nvl(to_number(:tdRelationFav.sIdNo),0)
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DRELATIONFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "msisdn",	    ORDERDATAFORMAT_STRING, tdRelationFav.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdRelationFav.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_type",		ORDERDATAFORMAT_STRING, tdRelationFav.sFavType);
	OrderSetDataItem(&vMsgBodyType, "other_code",	ORDERDATAFORMAT_STRING, tdRelationFav.sOtherCode);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdRelationFav.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdRelationFav.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdRelationFav.sIdNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteRelationFav(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdRelationFavIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dRelationFav a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,5,' ') and trim(a.other_code)=:NG_Param2 and start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DRELATIONFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",	    ORDERDATAFORMAT_STRING, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "other_code",		ORDERDATAFORMAT_STRING, oldIndex.sOtherCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",		ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateRelationFav(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdRelationFavIndex oldIndex;
TdRelationFavIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdRelationFav	tdRelationFav;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dRelationFav a SET %s where a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,5,' ') and trim(a.other_code)=:NG_Param2 and start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT msisdn,region_code,fav_type,other_code,to_char(start_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'), nvl(to_char(id_no),chr(0))
			   INTO :tdRelationFav.sMsisdn, :tdRelationFav.sRegionCode, :tdRelationFav.sFavType,
			   	    :tdRelationFav.sOtherCode, :tdRelationFav.sStartTime, :tdRelationFav.sEndTime, :tdRelationFav.sIdNo
			   FROM dRelationFav
			  WHERE msisdn=:newIndex.sMsisdn and fav_type=:newIndex.sFavType and trim(other_code)=:newIndex.sOtherCode
			  	and start_time =to_date(:newIndex.sStartTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdRelationFav.sMsisdn);
	Coltrim(tdRelationFav.sRegionCode);
	Coltrim(tdRelationFav.sFavType);
	Coltrim(tdRelationFav.sOtherCode);
	Coltrim(tdRelationFav.sStartTime);
	Coltrim(tdRelationFav.sEndTime);
	Coltrim(tdRelationFav.sIdNo);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DRELATIONFAV");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",    ORDERDATAFORMAT_STRING, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "other_code",	 ORDERDATAFORMAT_STRING, oldIndex.sOtherCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	OrderSetDataItem(&vMsgBodyType, "msisdn",	    ORDERDATAFORMAT_STRING, tdRelationFav.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdRelationFav.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_type",		ORDERDATAFORMAT_STRING, tdRelationFav.sFavType);
	OrderSetDataItem(&vMsgBodyType, "other_code",	ORDERDATAFORMAT_STRING, tdRelationFav.sOtherCode);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdRelationFav.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdRelationFav.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdRelationFav.sIdNo);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertIngwUser(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdIngwUser
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdIngwUser tdIngwUser;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdIngwUser.sIdNo);
	Coltrim(tdIngwUser.sMsisdn);
	Coltrim(tdIngwUser.sRegionCode);
	Coltrim(tdIngwUser.sBeginDate);
	Coltrim(tdIngwUser.sEndDate);
	Coltrim(tdIngwUser.sPrepayFee);
	Coltrim(tdIngwUser.sOptList);

	EXEC SQL INSERT INTO dIngwUser(id_no, msisdn, region_code, begin_date,
	                               end_date, prepay_fee, opt_list)
		     				  VALUES(to_number(:tdIngwUser.sIdNo), :tdIngwUser.sMsisdn, :tdIngwUser.sRegionCode,
		     				  	     to_date(:tdIngwUser.sBeginDate,'yyyymmdd hh24:mi:ss'),
		     				  	     to_date(:tdIngwUser.sEndDate,'yyyymmdd hh24:mi:ss'),
		     				  	     nvl(to_number(:tdIngwUser.sPrepayFee),0),:tdIngwUser.sOptList
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DINGWUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdIngwUser.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdIngwUser.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdIngwUser.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "begin_date",	ORDERDATAFORMAT_DATE,   tdIngwUser.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",		ORDERDATAFORMAT_DATE,   tdIngwUser.sEndDate);
	OrderSetDataItem(&vMsgBodyType, "prepay_fee",	ORDERDATAFORMAT_NUMBER, tdIngwUser.sPrepayFee);
	OrderSetDataItem(&vMsgBodyType, "opt_list",		ORDERDATAFORMAT_STRING, tdIngwUser.sOptList);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteIngwUser(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdIngwUserIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dIngwUser a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.begin_date=to_date(:NG_Param1,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DINGWUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",		ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateIngwUser(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdIngwUserIndex oldIndex;
TdIngwUserIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdIngwUser	tdIngwUser;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dIngwUser a SET %s where a.msisdn =rpad(:NG_Param0,15,' ') \
	and a.begin_date=to_date(:NG_Param1,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)), msisdn, nvl(region_code,chr(0)), to_char(begin_date,'yyyymmdd hh24:mi:ss'),
	                to_char(end_date,'yyyymmdd hh24:mi:ss'), nvl(to_char(prepay_fee),chr(0)), nvl(opt_list,chr(0))
			   INTO :tdIngwUser.sIdNo, :tdIngwUser.sMsisdn, :tdIngwUser.sRegionCode, :tdIngwUser.sBeginDate,
			   	    :tdIngwUser.sEndDate, :tdIngwUser.sPrepayFee, :tdIngwUser.sOptList
			   FROM dIngwUser
			  WHERE msisdn=:newIndex.sMsisdn and begin_date =to_date(:newIndex.sBeginDate,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdIngwUser.sIdNo);
	Coltrim(tdIngwUser.sMsisdn);
	Coltrim(tdIngwUser.sRegionCode);
	Coltrim(tdIngwUser.sBeginDate);
	Coltrim(tdIngwUser.sEndDate);
	Coltrim(tdIngwUser.sPrepayFee);
	Coltrim(tdIngwUser.sOptList);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DINGWUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",	 ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdIngwUser.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdIngwUser.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdIngwUser.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "begin_date",	ORDERDATAFORMAT_DATE,   tdIngwUser.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",		ORDERDATAFORMAT_DATE,   tdIngwUser.sEndDate);
	OrderSetDataItem(&vMsgBodyType, "prepay_fee",	ORDERDATAFORMAT_NUMBER, tdIngwUser.sPrepayFee);
	OrderSetDataItem(&vMsgBodyType, "opt_list",		ORDERDATAFORMAT_STRING, tdIngwUser.sOptList);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertVpmnMember(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdVpmnMember
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnMember tdVpmnMember;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdVpmnMember.sGroupNo);
	Coltrim(tdVpmnMember.sPhoneNumber);
	Coltrim(tdVpmnMember.sPhoneType);
	Coltrim(tdVpmnMember.sRights);
	Coltrim(tdVpmnMember.sClosedNum1);
	Coltrim(tdVpmnMember.sClosedNum2);
	Coltrim(tdVpmnMember.sClosedNum3);
	Coltrim(tdVpmnMember.sClosedNum4);
	Coltrim(tdVpmnMember.sClosedNum5);
	Coltrim(tdVpmnMember.sBeginDate);
	Coltrim(tdVpmnMember.sEndDate);
	Coltrim(tdVpmnMember.sNumberFavType);
	Coltrim(tdVpmnMember.sNumberOutFavType);

	EXEC SQL INSERT INTO dVpmnMember(group_no, phone_number, phone_type, rights, closed_num1,
	                                 closed_num2, closed_num3, closed_num4, closed_num5,
	                                 begin_date, end_date, number_fav_type, number_out_fav_type)
		     				  VALUES(:tdVpmnMember.sGroupNo,:tdVpmnMember.sPhoneNumber,:tdVpmnMember.sPhoneType,
		     				         :tdVpmnMember.sRights,:tdVpmnMember.sClosedNum1,:tdVpmnMember.sClosedNum2,
		     				         :tdVpmnMember.sClosedNum3,:tdVpmnMember.sClosedNum4,:tdVpmnMember.sClosedNum5,
		     				  	     to_date(:tdVpmnMember.sBeginDate,'yyyymmdd hh24:mi:ss'),
		     				  	     to_date(:tdVpmnMember.sEndDate,'yyyymmdd hh24:mi:ss'),
		     				  	     :tdVpmnMember.sNumberFavType,:tdVpmnMember.sNumberOutFavType
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DVPMNMEMBER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "group_no",	          ORDERDATAFORMAT_STRING, tdVpmnMember.sGroupNo);
	OrderSetDataItem(&vMsgBodyType, "phone_number",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sPhoneNumber);
	OrderSetDataItem(&vMsgBodyType, "phone_type",	      ORDERDATAFORMAT_STRING, tdVpmnMember.sPhoneType);
	OrderSetDataItem(&vMsgBodyType, "rights",	          ORDERDATAFORMAT_STRING, tdVpmnMember.sRights);
	OrderSetDataItem(&vMsgBodyType, "closed_num1",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum1);
	OrderSetDataItem(&vMsgBodyType, "closed_num2",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum2);
	OrderSetDataItem(&vMsgBodyType, "closed_num3",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum3);
	OrderSetDataItem(&vMsgBodyType, "closed_num4",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum4);
	OrderSetDataItem(&vMsgBodyType, "closed_num5",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum5);
	OrderSetDataItem(&vMsgBodyType, "begin_date",		  ORDERDATAFORMAT_DATE,   tdVpmnMember.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",			  ORDERDATAFORMAT_DATE,   tdVpmnMember.sEndDate);
	OrderSetDataItem(&vMsgBodyType, "number_fav_type",	  ORDERDATAFORMAT_STRING, tdVpmnMember.sNumberFavType);
	OrderSetDataItem(&vMsgBodyType, "number_out_fav_type",ORDERDATAFORMAT_STRING, tdVpmnMember.sNumberOutFavType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteVpmnMember(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnMemberIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dVpmnMember a WHERE a.group_no=rpad(:NG_Param0,10,' ') \
	and a.phone_number=rpad(:NG_Param1,24,' ') and a.begin_date=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DVPMNMEMBER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "group_no",		ORDERDATAFORMAT_STRING, oldIndex.sGroupNo);
	OrderSetPrimaryKey(&vMsgBodyType, "phone_number",	ORDERDATAFORMAT_STRING, oldIndex.sPhoneNumber);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",		ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateVpmnMember(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnMemberIndex oldIndex;
TdVpmnMemberIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdVpmnMember	tdVpmnMember;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dVpmnMember a SET %s where a.group_no=rpad(:group_no,10,' ') \
	and a.phone_number=rpad(:phone_number,24,' ') and a.begin_date=to_date(:begin_date,'yyyymmdd hh24:mi:ss') and end_date>begin_date %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT group_no,phone_number,phone_type,rights,nvl(closed_num1,chr(0)),nvl(closed_num2,chr(0)),nvl(closed_num3,chr(0)),
	                nvl(closed_num4,chr(0)),nvl(closed_num5,chr(0)),to_char(begin_date,'yyyymmdd hh24:mi:ss'), to_char(end_date,'yyyymmdd hh24:mi:ss'),
	                nvl(number_fav_type,chr(0)),nvl(number_out_fav_type,chr(0))
			   INTO :tdVpmnMember.sGroupNo, :tdVpmnMember.sPhoneNumber, :tdVpmnMember.sPhoneType,
			   	    :tdVpmnMember.sRights, :tdVpmnMember.sClosedNum1,
			   	    :tdVpmnMember.sClosedNum2, :tdVpmnMember.sClosedNum3, :tdVpmnMember.sClosedNum4,
			   	    :tdVpmnMember.sClosedNum5, :tdVpmnMember.sBeginDate, :tdVpmnMember.sEndDate,
			   	    :tdVpmnMember.sNumberFavType, :tdVpmnMember.sNumberOutFavType
			   FROM dVpmnMember
			  WHERE group_no=:newIndex.sGroupNo and phone_number=:newIndex.sPhoneNumber
			  	and begin_date =to_date(:newIndex.sBeginDate,'yyyymmdd hh24:mi:ss')
				and end_date =to_date(:i_parameter_array[0],'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdVpmnMember.sGroupNo);
	Coltrim(tdVpmnMember.sPhoneNumber);
	Coltrim(tdVpmnMember.sPhoneType);
	Coltrim(tdVpmnMember.sRights);
	Coltrim(tdVpmnMember.sClosedNum1);
	Coltrim(tdVpmnMember.sClosedNum2);
	Coltrim(tdVpmnMember.sClosedNum3);
	Coltrim(tdVpmnMember.sClosedNum4);
	Coltrim(tdVpmnMember.sClosedNum5);
	Coltrim(tdVpmnMember.sBeginDate);
	Coltrim(tdVpmnMember.sEndDate);
	Coltrim(tdVpmnMember.sNumberFavType);
	Coltrim(tdVpmnMember.sNumberOutFavType);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DVPMNMEMBER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "group_no",		 ORDERDATAFORMAT_STRING, oldIndex.sGroupNo);
	OrderSetPrimaryKey(&vMsgBodyType, "phone_number",	 ORDERDATAFORMAT_STRING, oldIndex.sPhoneNumber);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",	     ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	OrderSetDataItem(&vMsgBodyType, "group_no",	          ORDERDATAFORMAT_STRING, tdVpmnMember.sGroupNo);
	OrderSetDataItem(&vMsgBodyType, "phone_number",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sPhoneNumber);
	OrderSetDataItem(&vMsgBodyType, "phone_type",	      ORDERDATAFORMAT_STRING, tdVpmnMember.sPhoneType);
	OrderSetDataItem(&vMsgBodyType, "rights",	          ORDERDATAFORMAT_STRING, tdVpmnMember.sRights);
	OrderSetDataItem(&vMsgBodyType, "closed_num1",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum1);
	OrderSetDataItem(&vMsgBodyType, "closed_num2",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum2);
	OrderSetDataItem(&vMsgBodyType, "closed_num3",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum3);
	OrderSetDataItem(&vMsgBodyType, "closed_num4",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum4);
	OrderSetDataItem(&vMsgBodyType, "closed_num5",		  ORDERDATAFORMAT_STRING, tdVpmnMember.sClosedNum5);
	OrderSetDataItem(&vMsgBodyType, "begin_date",		  ORDERDATAFORMAT_DATE,   tdVpmnMember.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",			  ORDERDATAFORMAT_DATE,   tdVpmnMember.sEndDate);
	OrderSetDataItem(&vMsgBodyType, "number_fav_type",	  ORDERDATAFORMAT_STRING, tdVpmnMember.sNumberFavType);
	OrderSetDataItem(&vMsgBodyType, "number_out_fav_type",ORDERDATAFORMAT_STRING, tdVpmnMember.sNumberOutFavType);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertVpmnInfo(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdVpmnInfo
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnInfo tdVpmnInfo;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdVpmnInfo.sGroupNo);
	Coltrim(tdVpmnInfo.sClosedNo);
	Coltrim(tdVpmnInfo.sRights);
	Coltrim(tdVpmnInfo.sClosedGroupType);
	Coltrim(tdVpmnInfo.sGroupFavType);
	Coltrim(tdVpmnInfo.sGroupOutFavType);
	Coltrim(tdVpmnInfo.sTelephonistType);
	Coltrim(tdVpmnInfo.sBeginDate);
	Coltrim(tdVpmnInfo.sEndDate);

	EXEC SQL INSERT INTO dVpmnInfo(group_no, closed_no, rights, closed_group_type,
	                               group_fav_type, group_out_fav_type, telephonist_type,
	                               begin_date, end_date)
		     				  VALUES(:tdVpmnInfo.sGroupNo,:tdVpmnInfo.sClosedNo,:tdVpmnInfo.sRights,
		     				         :tdVpmnInfo.sClosedGroupType,:tdVpmnInfo.sGroupFavType,:tdVpmnInfo.sGroupOutFavType,
		     				         :tdVpmnInfo.sTelephonistType,
		     				  	     to_date(:tdVpmnInfo.sBeginDate,'yyyymmdd hh24:mi:ss'),
		     				  	     to_date(:tdVpmnInfo.sEndDate,'yyyymmdd hh24:mi:ss')
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DVPMNINFO");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "group_no",	        ORDERDATAFORMAT_STRING, tdVpmnInfo.sGroupNo);
	OrderSetDataItem(&vMsgBodyType, "closed_no",		ORDERDATAFORMAT_STRING, tdVpmnInfo.sClosedNo);
	OrderSetDataItem(&vMsgBodyType, "rights",	    	ORDERDATAFORMAT_STRING, tdVpmnInfo.sRights);
	OrderSetDataItem(&vMsgBodyType, "closed_group_type",ORDERDATAFORMAT_STRING, tdVpmnInfo.sClosedGroupType);
	OrderSetDataItem(&vMsgBodyType, "group_fav_type",	ORDERDATAFORMAT_STRING, tdVpmnInfo.sGroupFavType);
	OrderSetDataItem(&vMsgBodyType, "group_out_fav_type",ORDERDATAFORMAT_STRING, tdVpmnInfo.sGroupOutFavType);
	OrderSetDataItem(&vMsgBodyType, "telephonist_type", ORDERDATAFORMAT_STRING, tdVpmnInfo.sTelephonistType);
	OrderSetDataItem(&vMsgBodyType, "begin_date",		ORDERDATAFORMAT_DATE,   tdVpmnInfo.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",			ORDERDATAFORMAT_DATE,   tdVpmnInfo.sEndDate);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteVpmnInfo(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnInfoIndex oldIndex;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dVpmnInfo a WHERE a.group_no=rpad(:NG_Param0,10,' ') \
	and a.closed_no=rpad(:NG_Param1,10,' ') and a.begin_date=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DVPMNINFO");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "group_no",		ORDERDATAFORMAT_STRING, oldIndex.sGroupNo);
	OrderSetPrimaryKey(&vMsgBodyType, "closed_no",		ORDERDATAFORMAT_STRING, oldIndex.sClosedNo);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",		ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateVpmnInfo(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdVpmnInfoIndex oldIndex;
TdVpmnInfoIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdVpmnInfo	tdVpmnInfo;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dVpmnInfo a SET %s where a.group_no=rpad(:NG_Param0,10,' ') \
	and a.closed_no=rpad(:NG_Param1,10,' ') and a.begin_date=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT rights,closed_group_type,group_fav_type,group_out_fav_type,
	                telephonist_type,to_char(end_date,'yyyymmdd hh24:mi:ss')
			   INTO :tdVpmnInfo.sRights, :tdVpmnInfo.sClosedGroupType, :tdVpmnInfo.sGroupFavType,
			   	    :tdVpmnInfo.sGroupOutFavType, :tdVpmnInfo.sTelephonistType , :tdVpmnInfo.sEndDate
			   FROM dVpmnInfo
			  WHERE closed_no=:newIndex.sClosedNo and group_no =:newIndex.sGroupNo
			  	and begin_date =to_date(:newIndex.sBeginDate,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdVpmnInfo.sRights);
	Coltrim(tdVpmnInfo.sClosedGroupType);
	Coltrim(tdVpmnInfo.sGroupFavType);
	Coltrim(tdVpmnInfo.sGroupOutFavType);
	Coltrim(tdVpmnInfo.sTelephonistType);
	Coltrim(tdVpmnInfo.sEndDate);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DVPMNINFO");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "group_no",	 	 ORDERDATAFORMAT_STRING, oldIndex.sGroupNo);
	OrderSetPrimaryKey(&vMsgBodyType, "closed_no",		 ORDERDATAFORMAT_STRING, oldIndex.sClosedNo);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_date",	     ORDERDATAFORMAT_DATE,   oldIndex.sBeginDate);

	OrderSetDataItem(&vMsgBodyType, "group_no",	        ORDERDATAFORMAT_STRING, newIndex.sGroupNo);
	OrderSetDataItem(&vMsgBodyType, "closed_no",		ORDERDATAFORMAT_STRING, newIndex.sClosedNo);
	OrderSetDataItem(&vMsgBodyType, "rights",	    	ORDERDATAFORMAT_STRING, tdVpmnInfo.sRights);
	OrderSetDataItem(&vMsgBodyType, "closed_group_type",ORDERDATAFORMAT_STRING, tdVpmnInfo.sClosedGroupType);
	OrderSetDataItem(&vMsgBodyType, "group_fav_type",	ORDERDATAFORMAT_STRING, tdVpmnInfo.sGroupFavType);
	OrderSetDataItem(&vMsgBodyType, "group_out_fav_type",ORDERDATAFORMAT_STRING, tdVpmnInfo.sGroupOutFavType);
	OrderSetDataItem(&vMsgBodyType, "telephonist_type", ORDERDATAFORMAT_STRING, tdVpmnInfo.sTelephonistType);
	OrderSetDataItem(&vMsgBodyType, "begin_date",		ORDERDATAFORMAT_DATE,   newIndex.sBeginDate);
	OrderSetDataItem(&vMsgBodyType, "end_date",			ORDERDATAFORMAT_DATE,   tdVpmnInfo.sEndDate);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertAllUser(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdAllUser
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdAllUser tdAllUser;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdAllUser.sMsisdn);
	Coltrim(tdAllUser.sRegionCode);
	Coltrim(tdAllUser.sFavBrand);
	Coltrim(tdAllUser.sFavType);
	Coltrim(tdAllUser.sFlagCode);
	Coltrim(tdAllUser.sFavOrder);
	Coltrim(tdAllUser.sFavDay);
	Coltrim(tdAllUser.sStartTime);
	Coltrim(tdAllUser.sEndTime);
	Coltrim(tdAllUser.sServiceId);
	Coltrim(tdAllUser.sFavPeriod);
	Coltrim(tdAllUser.sFreeValue);
	Coltrim(tdAllUser.sIdNo);
	Coltrim(tdAllUser.sGroupId);
	Coltrim(tdAllUser.sProductCode);

	EXEC SQL INSERT INTO dAllUser(MSISDN,REGION_CODE,FAV_BRAND,FAV_TYPE,FLAG_CODE,FAV_ORDER,FAV_DAY,
	                              START_TIME,END_TIME,SERVICE_ID,FAV_PERIOD,FREE_VALUE,ID_NO,
	                              GROUP_ID,PRODUCT_CODE)
		     				  VALUES(:tdAllUser.sMsisdn ,:tdAllUser.sRegionCode ,:tdAllUser.sFavBrand ,
		     				         :tdAllUser.sFavType ,:tdAllUser.sFlagCode,:tdAllUser.sFavOrder ,
		     				         :tdAllUser.sFavDay  ,to_date(:tdAllUser.sStartTime,'yyyymmdd hh24:mi:ss') ,
		     				         to_date(:tdAllUser.sEndTime,'yyyymmdd hh24:mi:ss'),:tdAllUser.sServiceId ,
		     				         nvl(:tdAllUser.sFavPeriod,'0')  ,nvl(to_number(:tdAllUser.sFreeValue),0)  ,
		     				         nvl(to_number(:tdAllUser.sIdNo),0) ,nvl(:tdAllUser.sGroupId,'0')  ,nvl(:tdAllUser.sProductCode,'0')
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DALLUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdAllUser.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdAllUser.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_brand",	ORDERDATAFORMAT_STRING, tdAllUser.sFavBrand);
	OrderSetDataItem(&vMsgBodyType, "fav_type",	    ORDERDATAFORMAT_STRING, tdAllUser.sFavType);
	OrderSetDataItem(&vMsgBodyType, "flag_code",	ORDERDATAFORMAT_STRING, tdAllUser.sFlagCode);
	OrderSetDataItem(&vMsgBodyType, "fav_order",	ORDERDATAFORMAT_STRING, tdAllUser.sFavOrder);
	OrderSetDataItem(&vMsgBodyType, "fav_day",		ORDERDATAFORMAT_STRING, tdAllUser.sFavDay);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdAllUser.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdAllUser.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "service_id",	ORDERDATAFORMAT_STRING, tdAllUser.sServiceId);
	OrderSetDataItem(&vMsgBodyType, "fav_period",	ORDERDATAFORMAT_STRING, tdAllUser.sFavPeriod);
	OrderSetDataItem(&vMsgBodyType, "free_value",	ORDERDATAFORMAT_NUMBER, tdAllUser.sFreeValue);
	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdAllUser.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "group_id",	    ORDERDATAFORMAT_STRING, tdAllUser.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "product_code",	ORDERDATAFORMAT_STRING, tdAllUser.sProductCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteAllUser(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdAllUserIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dAllUser a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,4,' ') and a.flag_code=rpad(:NG_Param2,10,' ') and a.start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DALLUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_NUMBER, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",		ORDERDATAFORMAT_NUMBER, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "flag_code",		ORDERDATAFORMAT_NUMBER, oldIndex.sFlagCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",		ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateAllUser(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdAllUserIndex oldIndex;
TdAllUserIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdAllUser	tdAllUser;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dalluser a SET %s WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.fav_type=rpad(:NG_Param1,4,' ') and a.flag_code=rpad(:NG_Param2,10,' ') and a.start_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT msisdn,region_code,fav_brand,fav_type,flag_code,
	                fav_order,fav_day,to_char(start_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'),nvl(service_id,chr(0)),
	                nvl(fav_period,chr(0)),nvl(to_char(free_value),chr(0)),
	                nvl(to_char(id_no),chr(0)), nvl(group_id,chr(0)),nvl(product_code,chr(0))
	           INTO :tdAllUser.sMsisdn,:tdAllUser.sRegionCode,:tdAllUser.sFavBrand,
	           	    :tdAllUser.sFavType,:tdAllUser.sFlagCode,:tdAllUser.sFavOrder,
	           	    :tdAllUser.sFavDay,:tdAllUser.sStartTime,:tdAllUser.sEndTime,
	           	    :tdAllUser.sServiceId,:tdAllUser.sFavPeriod,:tdAllUser.sFreeValue,
	           	    :tdAllUser.sIdNo,:tdAllUser.sGroupId,:tdAllUser.sProductCode
			   FROM dAllUser
			  WHERE msisdn=:newIndex.sMsisdn and fav_type=:newIndex.sFavType and flag_code=:newIndex.sFlagCode
			  	and start_time=to_date(:newIndex.sStartTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdAllUser.sMsisdn);
	Coltrim(tdAllUser.sRegionCode);
	Coltrim(tdAllUser.sFavBrand);
	Coltrim(tdAllUser.sFavType);
	Coltrim(tdAllUser.sFlagCode);
	Coltrim(tdAllUser.sFavOrder);
	Coltrim(tdAllUser.sFavDay);
	Coltrim(tdAllUser.sStartTime);
	Coltrim(tdAllUser.sEndTime);
	Coltrim(tdAllUser.sServiceId);
	Coltrim(tdAllUser.sFavPeriod);
	Coltrim(tdAllUser.sFreeValue);
	Coltrim(tdAllUser.sIdNo);
	Coltrim(tdAllUser.sGroupId);
	Coltrim(tdAllUser.sProductCode);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DALLUSER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",			ORDERDATAFORMAT_NUMBER, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "fav_type",		ORDERDATAFORMAT_NUMBER, oldIndex.sFavType);
	OrderSetPrimaryKey(&vMsgBodyType, "flag_code",		ORDERDATAFORMAT_NUMBER, oldIndex.sFlagCode);
	OrderSetPrimaryKey(&vMsgBodyType, "start_time",		ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	OrderSetDataItem(&vMsgBodyType, "msisdn",		ORDERDATAFORMAT_STRING, tdAllUser.sMsisdn);
	OrderSetDataItem(&vMsgBodyType, "region_code",	ORDERDATAFORMAT_STRING, tdAllUser.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "fav_brand",	ORDERDATAFORMAT_STRING, tdAllUser.sFavBrand);
	OrderSetDataItem(&vMsgBodyType, "fav_type",	    ORDERDATAFORMAT_STRING, tdAllUser.sFavType);
	OrderSetDataItem(&vMsgBodyType, "flag_code",	ORDERDATAFORMAT_STRING, tdAllUser.sFlagCode);
	OrderSetDataItem(&vMsgBodyType, "fav_order",	ORDERDATAFORMAT_STRING, tdAllUser.sFavOrder);
	OrderSetDataItem(&vMsgBodyType, "fav_day",		ORDERDATAFORMAT_STRING, tdAllUser.sFavDay);
	OrderSetDataItem(&vMsgBodyType, "start_time",	ORDERDATAFORMAT_DATE,   tdAllUser.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdAllUser.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "service_id",	ORDERDATAFORMAT_STRING, tdAllUser.sServiceId);
	OrderSetDataItem(&vMsgBodyType, "fav_period",	ORDERDATAFORMAT_STRING, tdAllUser.sFavPeriod);
	OrderSetDataItem(&vMsgBodyType, "free_value",	ORDERDATAFORMAT_NUMBER, tdAllUser.sFreeValue);
	OrderSetDataItem(&vMsgBodyType, "id_no",	    ORDERDATAFORMAT_NUMBER, tdAllUser.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "group_id",	    ORDERDATAFORMAT_STRING, tdAllUser.sGroupId);
	OrderSetDataItem(&vMsgBodyType, "product_code",	ORDERDATAFORMAT_STRING, tdAllUser.sProductCode);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertCustInnet(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustInnet
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustInnet	sTdCustInnet;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustInnet.sIdNo);
	Coltrim(sTdCustInnet.sCustId);
	Coltrim(sTdCustInnet.sBuyName);
	Coltrim(sTdCustInnet.sBelongCode);
	Coltrim(sTdCustInnet.sTownCode);
	Coltrim(sTdCustInnet.sInnetType);
	Coltrim(sTdCustInnet.sOpenTime);
	Coltrim(sTdCustInnet.sLoginAccept);
	Coltrim(sTdCustInnet.sLoginNo);
	Coltrim(sTdCustInnet.sMachineCode);
	Coltrim(sTdCustInnet.sCashPay);
	Coltrim(sTdCustInnet.sCheckPay);
	Coltrim(sTdCustInnet.sSimFee);
	Coltrim(sTdCustInnet.sMachineFee);
	Coltrim(sTdCustInnet.sInnetFee);
	Coltrim(sTdCustInnet.sChoiceFee);
	Coltrim(sTdCustInnet.sOtherFee);
	Coltrim(sTdCustInnet.sHandFee);
	Coltrim(sTdCustInnet.sDeposit);
	Coltrim(sTdCustInnet.sBackFlag);
	Coltrim(sTdCustInnet.sEncryptFee);
	Coltrim(sTdCustInnet.sSystemNote);
	Coltrim(sTdCustInnet.sOpNote);
	Coltrim(sTdCustInnet.sAssureNo);
	Coltrim(sTdCustInnet.sGroupId);

	EXEC SQL INSERT INTO dCustInnet(ID_NO, CUST_ID, BUY_NAME, BELONG_CODE, TOWN_CODE,
	                                INNET_TYPE, OPEN_TIME, LOGIN_ACCEPT, LOGIN_NO,
	                                MACHINE_CODE, CASH_PAY, CHECK_PAY, SIM_FEE, MACHINE_FEE,
	                                INNET_FEE, CHOICE_FEE, OTHER_FEE, HAND_FEE, DEPOSIT,
	                                BACK_FLAG, ENCRYPT_FEE, SYSTEM_NOTE, OP_NOTE, ASSURE_NO, GROUP_ID)

		VALUES(to_number(:sTdCustInnet.sIdNo), to_number(:sTdCustInnet.sCustId), :sTdCustInnet.sBuyName,
			   :sTdCustInnet.sBelongCode, :sTdCustInnet.sTownCode, :sTdCustInnet.sInnetType,
			   to_date(:sTdCustInnet.sOpenTime,'yyyymmdd hh24:mi:ss'), to_number(:sTdCustInnet.sLoginAccept),
			   :sTdCustInnet.sLoginNo, :sTdCustInnet.sMachineCode, to_number(:sTdCustInnet.sCashPay),
			   to_number(:sTdCustInnet.sCheckPay), to_number(:sTdCustInnet.sSimFee),
			   to_number(:sTdCustInnet.sMachineFee ), to_number(:sTdCustInnet.sInnetFee),
			   to_number(:sTdCustInnet.sChoiceFee), to_number(:sTdCustInnet.sOtherFee),
			   to_number(:sTdCustInnet.sHandFee), to_number(:sTdCustInnet.sDeposit), :sTdCustInnet.sBackFlag,
			   :sTdCustInnet.sEncryptFee, :sTdCustInnet.sSystemNote, :sTdCustInnet.sOpNote,
			   to_number(:sTdCustInnet.sAssureNo), :sTdCustInnet.sGroupId);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTINNET");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "cust_id",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCustId     );
	OrderSetDataItem(&vMsgBodyType, "buy_name",		ORDERDATAFORMAT_STRING, sTdCustInnet.sBuyName    );
	OrderSetDataItem(&vMsgBodyType, "belong_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sBelongCode );
	OrderSetDataItem(&vMsgBodyType, "town_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sTownCode   );
	OrderSetDataItem(&vMsgBodyType, "innet_type",	ORDERDATAFORMAT_STRING, sTdCustInnet.sInnetType  );
	OrderSetDataItem(&vMsgBodyType, "open_time",	ORDERDATAFORMAT_DATE,   sTdCustInnet.sOpenTime   );
	OrderSetDataItem(&vMsgBodyType, "login_accept",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "login_no",		ORDERDATAFORMAT_STRING, sTdCustInnet.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "machine_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sMachineCode);
	OrderSetDataItem(&vMsgBodyType, "cash_pay",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCashPay    );
	OrderSetDataItem(&vMsgBodyType, "check_pay",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCheckPay   );
	OrderSetDataItem(&vMsgBodyType, "sim_fee",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sSimFee     );
	OrderSetDataItem(&vMsgBodyType, "machine_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sMachineFee );
	OrderSetDataItem(&vMsgBodyType, "innet_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sInnetFee   );
	OrderSetDataItem(&vMsgBodyType, "choice_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sChoiceFee  );
	OrderSetDataItem(&vMsgBodyType, "other_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sOtherFee   );
	OrderSetDataItem(&vMsgBodyType, "hand_fee",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sHandFee    );
	OrderSetDataItem(&vMsgBodyType, "deposit",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sDeposit    );
	OrderSetDataItem(&vMsgBodyType, "back_flag",	ORDERDATAFORMAT_STRING, sTdCustInnet.sBackFlag   );
	OrderSetDataItem(&vMsgBodyType, "encrypt_fee",	ORDERDATAFORMAT_STRING, sTdCustInnet.sEncryptFee );
	OrderSetDataItem(&vMsgBodyType, "system_note",	ORDERDATAFORMAT_STRING, sTdCustInnet.sSystemNote );
	OrderSetDataItem(&vMsgBodyType, "op_note",		ORDERDATAFORMAT_STRING, sTdCustInnet.sOpNote     );
	OrderSetDataItem(&vMsgBodyType, "assure_no",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sAssureNo   );
	OrderSetDataItem(&vMsgBodyType, "group_id",		ORDERDATAFORMAT_STRING, sTdCustInnet.sGroupId    );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}



int OrderDeleteCustInnet(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"DELETE dCustInnet a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTINNET");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustInnet(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustInnet	sTdCustInnet;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"UPDATE dCustInnet a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),to_char(cust_id),nvl(buy_name,chr(0)),belong_code,
	                town_code,innet_type,to_char(open_time,'yyyymmdd hh24:mi:ss'),
	                to_char(login_accept),login_no,nvl(machine_code,chr(0)),to_char(cash_pay),
	                to_char(check_pay),to_char(sim_fee),to_char(machine_fee),
	                to_char(innet_fee),to_char(choice_fee),to_char(other_fee),
	                to_char(hand_fee),to_char(deposit),back_flag,encrypt_fee,
	                system_note,nvl(op_note,chr(0)),to_char(assure_no),nvl(group_id,chr(0))
			INTO :sTdCustInnet.sIdNo,:sTdCustInnet.sCustId,:sTdCustInnet.sBuyName,
				 :sTdCustInnet.sBelongCode,:sTdCustInnet.sTownCode,:sTdCustInnet.sInnetType,
				 :sTdCustInnet.sOpenTime,:sTdCustInnet.sLoginAccept,:sTdCustInnet.sLoginNo,
				 :sTdCustInnet.sMachineCode,:sTdCustInnet.sCashPay,:sTdCustInnet.sCheckPay,
				 :sTdCustInnet.sSimFee,:sTdCustInnet.sMachineFee,:sTdCustInnet.sInnetFee,
				 :sTdCustInnet.sChoiceFee,:sTdCustInnet.sOtherFee,:sTdCustInnet.sHandFee,
				 :sTdCustInnet.sDeposit,:sTdCustInnet.sBackFlag,:sTdCustInnet.sEncryptFee,
				 :sTdCustInnet.sSystemNote,:sTdCustInnet.sOpNote,
				 :sTdCustInnet.sAssureNo,:sTdCustInnet.sGroupId
			FROM dCustInnet
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustInnet.sIdNo);
	Coltrim(sTdCustInnet.sCustId);
	Coltrim(sTdCustInnet.sBuyName);
	Coltrim(sTdCustInnet.sBelongCode);
	Coltrim(sTdCustInnet.sTownCode);
	Coltrim(sTdCustInnet.sInnetType);
	Coltrim(sTdCustInnet.sOpenTime);
	Coltrim(sTdCustInnet.sLoginAccept);
	Coltrim(sTdCustInnet.sLoginNo);
	Coltrim(sTdCustInnet.sMachineCode);
	Coltrim(sTdCustInnet.sCashPay);
	Coltrim(sTdCustInnet.sCheckPay);
	Coltrim(sTdCustInnet.sSimFee);
	Coltrim(sTdCustInnet.sMachineFee);
	Coltrim(sTdCustInnet.sInnetFee);
	Coltrim(sTdCustInnet.sChoiceFee);
	Coltrim(sTdCustInnet.sOtherFee);
	Coltrim(sTdCustInnet.sHandFee);
	Coltrim(sTdCustInnet.sDeposit);
	Coltrim(sTdCustInnet.sBackFlag);
	Coltrim(sTdCustInnet.sEncryptFee);
	Coltrim(sTdCustInnet.sSystemNote);
	Coltrim(sTdCustInnet.sOpNote);
	Coltrim(sTdCustInnet.sAssureNo);
	Coltrim(sTdCustInnet.sGroupId);

	strcpy(v_table_name,"DCUSTINNET");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "cust_id",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCustId     );
	OrderSetDataItem(&vMsgBodyType, "buy_name",		ORDERDATAFORMAT_STRING, sTdCustInnet.sBuyName    );
	OrderSetDataItem(&vMsgBodyType, "belong_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sBelongCode );
	OrderSetDataItem(&vMsgBodyType, "town_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sTownCode   );
	OrderSetDataItem(&vMsgBodyType, "innet_type",	ORDERDATAFORMAT_STRING, sTdCustInnet.sInnetType  );
	OrderSetDataItem(&vMsgBodyType, "open_time",	ORDERDATAFORMAT_DATE,   sTdCustInnet.sOpenTime   );
	OrderSetDataItem(&vMsgBodyType, "login_accept",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "login_no",		ORDERDATAFORMAT_STRING, sTdCustInnet.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "machine_code",	ORDERDATAFORMAT_STRING, sTdCustInnet.sMachineCode);
	OrderSetDataItem(&vMsgBodyType, "cash_pay",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCashPay    );
	OrderSetDataItem(&vMsgBodyType, "check_pay",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sCheckPay   );
	OrderSetDataItem(&vMsgBodyType, "sim_fee",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sSimFee     );
	OrderSetDataItem(&vMsgBodyType, "machine_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sMachineFee );
	OrderSetDataItem(&vMsgBodyType, "innet_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sInnetFee   );
	OrderSetDataItem(&vMsgBodyType, "choice_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sChoiceFee  );
	OrderSetDataItem(&vMsgBodyType, "other_fee",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sOtherFee   );
	OrderSetDataItem(&vMsgBodyType, "hand_fee",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sHandFee    );
	OrderSetDataItem(&vMsgBodyType, "deposit",		ORDERDATAFORMAT_NUMBER, sTdCustInnet.sDeposit    );
	OrderSetDataItem(&vMsgBodyType, "back_flag",	ORDERDATAFORMAT_STRING, sTdCustInnet.sBackFlag   );
	OrderSetDataItem(&vMsgBodyType, "encrypt_fee",	ORDERDATAFORMAT_STRING, sTdCustInnet.sEncryptFee );
	OrderSetDataItem(&vMsgBodyType, "system_note",	ORDERDATAFORMAT_STRING, sTdCustInnet.sSystemNote );
	OrderSetDataItem(&vMsgBodyType, "op_note",		ORDERDATAFORMAT_STRING, sTdCustInnet.sOpNote     );
	OrderSetDataItem(&vMsgBodyType, "assure_no",	ORDERDATAFORMAT_NUMBER, sTdCustInnet.sAssureNo   );
	OrderSetDataItem(&vMsgBodyType, "group_id",		ORDERDATAFORMAT_STRING, sTdCustInnet.sGroupId    );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertCustFunc(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustFunc
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFunc	sTdCustFunc;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustFunc.sIdNo);
	Coltrim(sTdCustFunc.sFunctionType);
	Coltrim(sTdCustFunc.sFunctionCode);
	Coltrim(sTdCustFunc.sOpTime);

	EXEC SQL INSERT INTO dCustFunc(ID_NO, FUNCTION_TYPE, FUNCTION_CODE, OP_TIME)
		     VALUES(to_number(:sTdCustFunc.sIdNo),:sTdCustFunc.sFunctionType,:sTdCustFunc.sFunctionCode,
		     	    to_date(:sTdCustFunc.sOpTime,'yyyymmdd hh24:mi:ss'));

	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE != -1))
		return -500030;


	strcpy(v_table_name,"DCUSTFUNC");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustFunc.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFunc.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFunc.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"op_time",      ORDERDATAFORMAT_DATE,  sTdCustFunc.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustFunc(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"DELETE dCustFunc a WHERE a.id_no=to_number(:NG_Param0) and a.function_type=:NG_Param1 and a.function_code=:NG_Param2 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTFUNC");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustFunc(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncIndex oldIndex;
TdCustFuncIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustFunc	sTdCustFunc;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"UPDATE dCustFunc a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.function_type=:NG_Param1 and a.function_code =:NG_Param2 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),function_type,function_code,to_char(op_time,'yyyymmdd hh24:mi:ss')
			   INTO :sTdCustFunc.sIdNo,:sTdCustFunc.sFunctionType,:sTdCustFunc.sFunctionCode,:sTdCustFunc.sOpTime
			   FROM dCustFunc
			  WHERE id_no = :newIndex.sIdNo and function_type = :newIndex.sFunctionType and function_code = :newIndex.sFunctionCode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustFunc.sIdNo);
	Coltrim(sTdCustFunc.sFunctionType);
	Coltrim(sTdCustFunc.sFunctionCode);
	Coltrim(sTdCustFunc.sOpTime);


	strcpy(v_table_name,"DCUSTFUNC");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustFunc.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFunc.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFunc.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"op_time",      ORDERDATAFORMAT_DATE,  sTdCustFunc.sOpTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustFuncHis(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustFuncHis
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncHis	sTdCustFuncHis;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustFuncHis.sIdNo);
	Coltrim(sTdCustFuncHis.sFunctionType);
	Coltrim(sTdCustFuncHis.sFunctionCode);
	Coltrim(sTdCustFuncHis.sOpTime);
	Coltrim(sTdCustFuncHis.sUpdateLogin);
	Coltrim(sTdCustFuncHis.sUpdateAccept);
	Coltrim(sTdCustFuncHis.sUpdateDate);
	Coltrim(sTdCustFuncHis.sUpdateTime);
	Coltrim(sTdCustFuncHis.sUpdateCode);
	Coltrim(sTdCustFuncHis.sUpdateType);

	EXEC SQL INSERT INTO dCustFuncHis(ID_NO, FUNCTION_TYPE, FUNCTION_CODE, OP_TIME,
	                                  UPDATE_LOGIN, UPDATE_ACCEPT, UPDATE_DATE, UPDATE_TIME, UPDATE_CODE, UPDATE_TYPE)
		     VALUES(to_number(:sTdCustFuncHis.sIdNo),:sTdCustFuncHis.sFunctionType,:sTdCustFuncHis.sFunctionCode,
		     	    to_date(:sTdCustFuncHis.sOpTime,'yyyymmdd hh24:mi:ss'),
		     	    :sTdCustFuncHis.sUpdateLogin,to_number(:sTdCustFuncHis.sUpdateAccept),to_number(:sTdCustFuncHis.sUpdateDate),
		     	    to_date(:sTdCustFuncHis.sUpdateTime,'yyyymmdd hh24:mi:ss'),
		     	    :sTdCustFuncHis.sUpdateCode,:sTdCustFuncHis.sUpdateType);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTFUNCHIS");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustFuncHis.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFuncHis.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFuncHis.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"op_time",      ORDERDATAFORMAT_DATE,  sTdCustFuncHis.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"update_login", ORDERDATAFORMAT_STRING,sTdCustFuncHis.sUpdateLogin);
	OrderSetDataItem(&vMsgBodyType,"update_accept",ORDERDATAFORMAT_NUMBER,sTdCustFuncHis.sUpdateAccept);
	OrderSetDataItem(&vMsgBodyType,"update_date",  ORDERDATAFORMAT_NUMBER,sTdCustFuncHis.sUpdateDate);
	OrderSetDataItem(&vMsgBodyType,"update_time",  ORDERDATAFORMAT_DATE,  sTdCustFuncHis.sUpdateTime);
	OrderSetDataItem(&vMsgBodyType,"update_code",  ORDERDATAFORMAT_STRING,sTdCustFuncHis.sUpdateCode);
	OrderSetDataItem(&vMsgBodyType,"update_type",  ORDERDATAFORMAT_STRING,sTdCustFuncHis.sUpdateType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteCustFuncHis(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncHisIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustFuncHis a WHERE a.id_no=to_number(:NG_Param0) and a.function_type=:NG_Param1 and a.function_code=:NG_Param2 \
	        and a.update_accept=to_number(:NG_Param3) and a.update_date=to_number(:NG_Param4) and a.update_type=:NG_Param5 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTFUNCHIS");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);
	OrderSetPrimaryKey(&vMsgBodyType,"update_accept",ORDERDATAFORMAT_NUMBER,oldIndex.sUpdateAccept);
	OrderSetPrimaryKey(&vMsgBodyType,"update_date",  ORDERDATAFORMAT_NUMBER,oldIndex.sUpdateDate);
	OrderSetPrimaryKey(&vMsgBodyType,"update_type",  ORDERDATAFORMAT_STRING,oldIndex.sUpdateType);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

int OrderInsertCustMsgAdd(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustMsgAdd
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustMsgAdd	sTdCustMsgAdd;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustMsgAdd.sIdNo);
	Coltrim(sTdCustMsgAdd.sBusiType);
	Coltrim(sTdCustMsgAdd.sUserType);
	Coltrim(sTdCustMsgAdd.sFieldCode);
	Coltrim(sTdCustMsgAdd.sFieldOrder);
	Coltrim(sTdCustMsgAdd.sFieldValue);
	Coltrim(sTdCustMsgAdd.sOtherValue);

	EXEC SQL INSERT INTO dCustMsgAdd(id_no, busi_type, user_type, field_code,
	                                 field_order, field_value, other_value)
		     VALUES(to_number(:sTdCustMsgAdd.sIdNo),:sTdCustMsgAdd.sBusiType,:sTdCustMsgAdd.sUserType,:sTdCustMsgAdd.sFieldCode,
		     	    to_number(:sTdCustMsgAdd.sFieldOrder),:sTdCustMsgAdd.sFieldValue,:sTdCustMsgAdd.sOtherValue);
	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTMSGADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustMsgAdd.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"busi_type",	   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sBusiType);
	OrderSetDataItem(&vMsgBodyType,"user_type",	   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sUserType);
	OrderSetDataItem(&vMsgBodyType,"field_code",   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sFieldCode);
	OrderSetDataItem(&vMsgBodyType,"field_order",  ORDERDATAFORMAT_NUMBER,sTdCustMsgAdd.sFieldOrder);
	OrderSetDataItem(&vMsgBodyType,"field_value",  ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sFieldValue);
	OrderSetDataItem(&vMsgBodyType,"other_value",  ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sOtherValue);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustMsgAdd(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustMsgAddIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustMsgAdd a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.busi_type=rpad(:NG_Param1,4,' ') and a.user_type=rpad(:NG_Param2,4,' ') and a.field_code=rpad(:NG_Param3,5,' ') and a.field_order=to_number(:NG_Param4) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTMSGADD");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",      ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"busi_type",  ORDERDATAFORMAT_STRING,oldIndex.sBusiType);
	OrderSetPrimaryKey(&vMsgBodyType,"user_type",  ORDERDATAFORMAT_STRING,oldIndex.sUserType);
	OrderSetPrimaryKey(&vMsgBodyType,"field_code", ORDERDATAFORMAT_STRING,oldIndex.sFieldCode);
	OrderSetPrimaryKey(&vMsgBodyType,"field_order",ORDERDATAFORMAT_NUMBER,oldIndex.sFieldOrder);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustMsgAdd(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustMsgAddIndex oldIndex;
TdCustMsgAddIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustMsgAdd	sTdCustMsgAdd;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustMsgAdd a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.busi_type=rpad(:NG_Param1,4,' ') \
	        and a.user_type=rpad(:NG_Param2,4,' ') and a.field_code=rpad(:NG_Param3,5,' ') and a.field_order=to_number(:NG_Param4) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),busi_type,user_type,field_code,to_char(field_order),field_value,nvl(other_value,chr(0))
			   INTO :sTdCustMsgAdd.sIdNo, :sTdCustMsgAdd.sBusiType, :sTdCustMsgAdd.sUserType,
			   	    :sTdCustMsgAdd.sFieldCode, :sTdCustMsgAdd.sFieldOrder, :sTdCustMsgAdd.sFieldValue, :sTdCustMsgAdd.sOtherValue
			   FROM dCustMsgAdd
			  WHERE id_no = to_number(:newIndex.sIdNo) and busi_type=:newIndex.sBusiType and user_type=:newIndex.sUserType
			  	and field_code=:newIndex.sFieldCode and field_order=to_number(:newIndex.sFieldOrder);

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustMsgAdd.sIdNo);
	Coltrim(sTdCustMsgAdd.sBusiType);
	Coltrim(sTdCustMsgAdd.sUserType);
	Coltrim(sTdCustMsgAdd.sFieldCode);
	Coltrim(sTdCustMsgAdd.sFieldOrder);
	Coltrim(sTdCustMsgAdd.sFieldValue);
	Coltrim(sTdCustMsgAdd.sOtherValue);


	strcpy(v_table_name,"DCUSTMSGADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",      ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"busi_type",  ORDERDATAFORMAT_STRING,oldIndex.sBusiType);
	OrderSetPrimaryKey(&vMsgBodyType,"user_type",  ORDERDATAFORMAT_STRING,oldIndex.sUserType);
	OrderSetPrimaryKey(&vMsgBodyType,"field_code", ORDERDATAFORMAT_STRING,oldIndex.sFieldCode);
	OrderSetPrimaryKey(&vMsgBodyType,"field_order",ORDERDATAFORMAT_NUMBER,oldIndex.sFieldOrder);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustMsgAdd.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"busi_type",	   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sBusiType);
	OrderSetDataItem(&vMsgBodyType,"user_type",	   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sUserType);
	OrderSetDataItem(&vMsgBodyType,"field_code",   ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sFieldCode);
	OrderSetDataItem(&vMsgBodyType,"field_order",  ORDERDATAFORMAT_NUMBER,sTdCustMsgAdd.sFieldOrder);
	OrderSetDataItem(&vMsgBodyType,"field_value",  ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sFieldValue);
	OrderSetDataItem(&vMsgBodyType,"other_value",  ORDERDATAFORMAT_STRING,sTdCustMsgAdd.sOtherValue);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustMsgDead(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_tdCustMsgDead)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustMsgDead i_tdCustMsgDead;
{
	int v_ret;/*返回代码*/
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(i_tdCustMsgDead.sIdNo);
	Coltrim(i_tdCustMsgDead.sCustId);
	Coltrim(i_tdCustMsgDead.sContractNo);
	Coltrim(i_tdCustMsgDead.sIds);
	Coltrim(i_tdCustMsgDead.sPhoneNo);
	Coltrim(i_tdCustMsgDead.sSmCode);
	Coltrim(i_tdCustMsgDead.sServiceType);
	Coltrim(i_tdCustMsgDead.sAttrCode);
	Coltrim(i_tdCustMsgDead.sUserPasswd);
	Coltrim(i_tdCustMsgDead.sOpenTime);
	Coltrim(i_tdCustMsgDead.sBelongCode);
	Coltrim(i_tdCustMsgDead.sLimitOwe);
	Coltrim(i_tdCustMsgDead.sCreditCode);
	Coltrim(i_tdCustMsgDead.sCreditValue);
	Coltrim(i_tdCustMsgDead.sRunCode);
	Coltrim(i_tdCustMsgDead.sRunTime);
	Coltrim(i_tdCustMsgDead.sBillDate);
	Coltrim(i_tdCustMsgDead.sBillType);
	Coltrim(i_tdCustMsgDead.sEncryptPrepay);
	Coltrim(i_tdCustMsgDead.sCmdRight);
	Coltrim(i_tdCustMsgDead.sLastBillType);
	Coltrim(i_tdCustMsgDead.sBakField);
	Coltrim(i_tdCustMsgDead.sGroupId);
	Coltrim(i_tdCustMsgDead.sGroupNo);

	EXEC SQL INSERT INTO dCustMsgDead(id_no,cust_id,contract_no,ids,
								  phone_no,sm_code,service_type,attr_code,
								  user_passwd,open_time,belong_code,limit_owe,
								  credit_code,credit_value,run_code,run_time,
								  bill_date,bill_type,encrypt_prepay,cmd_right,
								  last_bill_type,bak_field,group_id,group_no)
		VALUES(to_number(:i_tdCustMsgDead.sIdNo),to_number(:i_tdCustMsgDead.sCustId),to_number(:i_tdCustMsgDead.sContractNo),to_number(:i_tdCustMsgDead.sIds),
			:i_tdCustMsgDead.sPhoneNo,:i_tdCustMsgDead.sSmCode,:i_tdCustMsgDead.sServiceType,:i_tdCustMsgDead.sAttrCode,
			:i_tdCustMsgDead.sUserPasswd,to_date(:i_tdCustMsgDead.sOpenTime,'yyyymmdd HH24:mi:ss'),	:i_tdCustMsgDead.sBelongCode,to_number(:i_tdCustMsgDead.sLimitOwe),
			:i_tdCustMsgDead.sCreditCode,to_number(:i_tdCustMsgDead.sCreditValue),:i_tdCustMsgDead.sRunCode,to_date(:i_tdCustMsgDead.sRunTime,'yyyymmdd HH24:mi:ss'),
			to_date(:i_tdCustMsgDead.sBillDate,'yyyymmdd HH24:mi:ss'),to_number(:i_tdCustMsgDead.sBillType),:i_tdCustMsgDead.sEncryptPrepay,to_number(:i_tdCustMsgDead.sCmdRight),
			:i_tdCustMsgDead.sLastBillType,:i_tdCustMsgDead.sBakField,:i_tdCustMsgDead.sGroupId,:i_tdCustMsgDead.sGroupNo);

	if(SQLCODE!=SQLOK)
		return -500010;

	strcpy(v_table_name,"DCUSTMSGDEAD");
    /*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"cust_id",        ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"ids",            ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sIds);
	OrderSetDataItem(&vMsgBodyType,"phone_no",       ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"sm_code",        ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sSmCode);
	OrderSetDataItem(&vMsgBodyType,"service_type",   ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sServiceType);
	OrderSetDataItem(&vMsgBodyType,"attr_code",      ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sAttrCode);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",    ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sUserPasswd);
	OrderSetDataItem(&vMsgBodyType,"open_time",      ORDERDATAFORMAT_DATE,  i_tdCustMsgDead.sOpenTime);
	OrderSetDataItem(&vMsgBodyType,"belong_code",    ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",      ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sLimitOwe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",    ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sCreditCode);
	OrderSetDataItem(&vMsgBodyType,"credit_value",   ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sCreditValue);
	OrderSetDataItem(&vMsgBodyType,"run_code",       ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",       ORDERDATAFORMAT_DATE,  i_tdCustMsgDead.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"bill_date",      ORDERDATAFORMAT_DATE,  i_tdCustMsgDead.sBillDate);
	OrderSetDataItem(&vMsgBodyType,"bill_type",      ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sBillType);
	OrderSetDataItem(&vMsgBodyType,"encrypt_prepay", ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sEncryptPrepay);
	OrderSetDataItem(&vMsgBodyType,"cmd_right",      ORDERDATAFORMAT_NUMBER,i_tdCustMsgDead.sCmdRight);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type", ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sLastBillType);
	OrderSetDataItem(&vMsgBodyType,"bak_field",      ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sBakField);
	OrderSetDataItem(&vMsgBodyType,"group_id",       ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"group_no",       ORDERDATAFORMAT_STRING,i_tdCustMsgDead.sGroupNo);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if(v_ret<0)
		return -500011;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if(v_ret!=0)
	{
		return -500012;
	}

	return 0;
}

int OrderUpdateCustMsgDead(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_id_no,
	i_update_sql,i_where_sql,i_parameter_array
	)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustMsgDead	sTdCustMsgDead;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustMsgDead a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);

	if(v_ret<0)
		return -500016;

	/*没有更新到数据，可以不做后续处理*/
	if(v_ret>0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(id_no), to_char(cust_id), to_char(contract_no), to_char(ids), phone_no,
	                sm_code, service_type, attr_code, user_passwd,
	                to_char(open_time,'yyyymmdd hh24:mi:ss'), belong_code, to_char(limit_owe),
	                credit_code, to_char(credit_value), run_code, to_char(run_time ,'yyyymmdd hh24:mi:ss'),
	                to_char(bill_date,'yyyymmdd hh24:mi:ss'), to_char(bill_type), encrypt_prepay,
	                to_char(cmd_right), last_bill_type, bak_field, nvl(group_id,chr(0)), nvl(group_no,chr(0))
		INTO :sTdCustMsgDead.sIdNo         ,
             :sTdCustMsgDead.sCustId       ,
             :sTdCustMsgDead.sContractNo   ,
             :sTdCustMsgDead.sIds          ,
             :sTdCustMsgDead.sPhoneNo      ,
             :sTdCustMsgDead.sSmCode       ,
             :sTdCustMsgDead.sServiceType  ,
             :sTdCustMsgDead.sAttrCode     ,
             :sTdCustMsgDead.sUserPasswd   ,
             :sTdCustMsgDead.sOpenTime     ,
             :sTdCustMsgDead.sBelongCode   ,
             :sTdCustMsgDead.sLimitOwe     ,
             :sTdCustMsgDead.sCreditCode   ,
             :sTdCustMsgDead.sCreditValue  ,
             :sTdCustMsgDead.sRunCode      ,
             :sTdCustMsgDead.sRunTime      ,
             :sTdCustMsgDead.sBillDate     ,
             :sTdCustMsgDead.sBillType     ,
             :sTdCustMsgDead.sEncryptPrepay,
             :sTdCustMsgDead.sCmdRight     ,
             :sTdCustMsgDead.sLastBillType ,
             :sTdCustMsgDead.sBakField     ,
             :sTdCustMsgDead.sGroupId      ,
             :sTdCustMsgDead.sGroupNo
		FROM dCustMsgDead
		WHERE id_no=:i_id_no;
	if(SQLCODE!=SQLOK)
		return -500017;

	Coltrim(sTdCustMsgDead.sIdNo         );
	Coltrim(sTdCustMsgDead.sCustId       );
	Coltrim(sTdCustMsgDead.sContractNo   );
	Coltrim(sTdCustMsgDead.sIds          );
	Coltrim(sTdCustMsgDead.sPhoneNo      );
	Coltrim(sTdCustMsgDead.sSmCode       );
	Coltrim(sTdCustMsgDead.sServiceType  );
	Coltrim(sTdCustMsgDead.sAttrCode     );
	Coltrim(sTdCustMsgDead.sUserPasswd   );
	Coltrim(sTdCustMsgDead.sOpenTime     );
	Coltrim(sTdCustMsgDead.sBelongCode   );
	Coltrim(sTdCustMsgDead.sLimitOwe     );
	Coltrim(sTdCustMsgDead.sCreditCode   );
	Coltrim(sTdCustMsgDead.sCreditValue  );
	Coltrim(sTdCustMsgDead.sRunCode      );
	Coltrim(sTdCustMsgDead.sRunTime      );
	Coltrim(sTdCustMsgDead.sBillDate     );
	Coltrim(sTdCustMsgDead.sBillType     );
	Coltrim(sTdCustMsgDead.sEncryptPrepay);
	Coltrim(sTdCustMsgDead.sCmdRight     );
	Coltrim(sTdCustMsgDead.sLastBillType );
	Coltrim(sTdCustMsgDead.sBakField     );
	Coltrim(sTdCustMsgDead.sGroupId      );
	Coltrim(sTdCustMsgDead.sGroupNo      );


	strcpy(v_table_name,"DCUSTMSGDEAD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"cust_id",        ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"ids",            ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sIds);
	OrderSetDataItem(&vMsgBodyType,"phone_no",       ORDERDATAFORMAT_STRING,sTdCustMsgDead.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"sm_code",        ORDERDATAFORMAT_STRING,sTdCustMsgDead.sSmCode);
	OrderSetDataItem(&vMsgBodyType,"service_type",   ORDERDATAFORMAT_STRING,sTdCustMsgDead.sServiceType);
	OrderSetDataItem(&vMsgBodyType,"attr_code",      ORDERDATAFORMAT_STRING,sTdCustMsgDead.sAttrCode);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",    ORDERDATAFORMAT_STRING,sTdCustMsgDead.sUserPasswd);
	OrderSetDataItem(&vMsgBodyType,"open_time",      ORDERDATAFORMAT_DATE,  sTdCustMsgDead.sOpenTime);
	OrderSetDataItem(&vMsgBodyType,"belong_code",    ORDERDATAFORMAT_STRING,sTdCustMsgDead.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",      ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sLimitOwe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",    ORDERDATAFORMAT_STRING,sTdCustMsgDead.sCreditCode);
	OrderSetDataItem(&vMsgBodyType,"credit_value",   ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sCreditValue);
	OrderSetDataItem(&vMsgBodyType,"run_code",       ORDERDATAFORMAT_STRING,sTdCustMsgDead.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",       ORDERDATAFORMAT_DATE,  sTdCustMsgDead.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"bill_date",      ORDERDATAFORMAT_DATE,  sTdCustMsgDead.sBillDate);
	OrderSetDataItem(&vMsgBodyType,"bill_type",      ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sBillType);
	OrderSetDataItem(&vMsgBodyType,"encrypt_prepay", ORDERDATAFORMAT_STRING,sTdCustMsgDead.sEncryptPrepay);
	OrderSetDataItem(&vMsgBodyType,"cmd_right",      ORDERDATAFORMAT_NUMBER,sTdCustMsgDead.sCmdRight);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type", ORDERDATAFORMAT_STRING,sTdCustMsgDead.sLastBillType);
	OrderSetDataItem(&vMsgBodyType,"bak_field",      ORDERDATAFORMAT_STRING,sTdCustMsgDead.sBakField);
	OrderSetDataItem(&vMsgBodyType,"group_id",       ORDERDATAFORMAT_STRING,sTdCustMsgDead.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"group_no",       ORDERDATAFORMAT_STRING,sTdCustMsgDead.sGroupNo);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if(v_ret<0)
		return -500018;

	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);

	if(v_ret!=0)
		return -500019;
	return 0;
}

int OrderInsertCustConMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustConMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustConMsg	sTdCustConMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustConMsg.sCustId);
	Coltrim(sTdCustConMsg.sContractNo);
	Coltrim(sTdCustConMsg.sBeginTime);
	Coltrim(sTdCustConMsg.sEndTime);

	EXEC SQL INSERT INTO dCustConMsg(cust_id, contract_no, begin_time, end_time)
		VALUES(to_number(:sTdCustConMsg.sCustId),to_number(:sTdCustConMsg.sContractNo),
			   to_date(:sTdCustConMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),to_date(:sTdCustConMsg.sEndTime,'yyyymmdd hh24:mi:ss'));

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTCONMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"cust_id",    ORDERDATAFORMAT_NUMBER,sTdCustConMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,sTdCustConMsg.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"begin_time", ORDERDATAFORMAT_DATE,  sTdCustConMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",   ORDERDATAFORMAT_DATE,  sTdCustConMsg.sEndTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustConMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustConMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustConMsg a WHERE a.cust_id=to_number(:NG_Param0) \
	        and a.contract_no=to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTCONMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",      ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",  ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustConMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustConMsgIndex oldIndex;
TdCustConMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustConMsg	sTdCustConMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustConMsg a SET %s WHERE a.cust_id=to_number(:NG_Param0) and a.contract_no=to_number(:NG_Param1) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(cust_id),to_char(contract_no),to_char(begin_time,'yyyymmdd hh24:mi:ss'),to_char(end_time,'yyyymmdd hh24:mi:ss')
			   INTO :sTdCustConMsg.sCustId,:sTdCustConMsg.sContractNo,:sTdCustConMsg.sBeginTime,:sTdCustConMsg.sEndTime
			   FROM dCustConMsg
			  WHERE cust_id = to_number(:newIndex.sCustId) and contract_no=to_number(:newIndex.sContractNo);

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustConMsg.sCustId);
	Coltrim(sTdCustConMsg.sContractNo);
	Coltrim(sTdCustConMsg.sBeginTime);
	Coltrim(sTdCustConMsg.sEndTime);


	strcpy(v_table_name,"DCUSTCONMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",      ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",  ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo);

	OrderSetDataItem(&vMsgBodyType,"cust_id",    ORDERDATAFORMAT_NUMBER,sTdCustConMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,sTdCustConMsg.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"begin_time", ORDERDATAFORMAT_DATE,  sTdCustConMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",   ORDERDATAFORMAT_DATE,  sTdCustConMsg.sEndTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGrpUserMsg(	i_sendid_type,i_sendid_no,i_order_right,
							i_op_code,i_op_accept,i_op_login,i_op_note,
							sTdGrpUserMsg
					   	)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpUserMsg	sTdGrpUserMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpUserMsg.sCustId);
	Coltrim(sTdGrpUserMsg.sIdNo);
	Coltrim(sTdGrpUserMsg.sAccountId);
	Coltrim(sTdGrpUserMsg.sUserNo);
	Coltrim(sTdGrpUserMsg.sIds);
	Coltrim(sTdGrpUserMsg.sUserName);
	Coltrim(sTdGrpUserMsg.sProductType);
	Coltrim(sTdGrpUserMsg.sProductCode);
	Coltrim(sTdGrpUserMsg.sUserPasswd);
	Coltrim(sTdGrpUserMsg.sLoginName);
	Coltrim(sTdGrpUserMsg.sLoginPasswd);
	Coltrim(sTdGrpUserMsg.sProvCode);
	Coltrim(sTdGrpUserMsg.sRegionCode);
	Coltrim(sTdGrpUserMsg.sDistrictCode);
	Coltrim(sTdGrpUserMsg.sTownCode);
	Coltrim(sTdGrpUserMsg.sTerritoryCode);
	Coltrim(sTdGrpUserMsg.sLimitOwe);
	Coltrim(sTdGrpUserMsg.sCreditCode);
	Coltrim(sTdGrpUserMsg.sCreditValue);
	Coltrim(sTdGrpUserMsg.sRunCode);
	Coltrim(sTdGrpUserMsg.sOldRun);
	Coltrim(sTdGrpUserMsg.sRunTime);
	Coltrim(sTdGrpUserMsg.sBillDate);
	Coltrim(sTdGrpUserMsg.sBillType);
	Coltrim(sTdGrpUserMsg.sLastBillType);
	Coltrim(sTdGrpUserMsg.sOpTime);
	Coltrim(sTdGrpUserMsg.sBakField);
	Coltrim(sTdGrpUserMsg.sSmCode);
	Coltrim(sTdGrpUserMsg.sGroupId);

	EXEC SQL INSERT INTO dGrpUserMsg(cust_id, id_no, account_id, user_no, ids, user_name,
                                         product_type, product_code, user_passwd, login_name,
                                         login_passwd, prov_code, region_code, district_code,
                                         town_code, territory_code, limit_owe, credit_code,
                                         credit_value, run_code, old_run, run_time, bill_date,
                                         bill_type, last_bill_type, op_time, bak_field, sm_code, group_id)

		VALUES(to_number(:sTdGrpUserMsg.sCustId), to_number(:sTdGrpUserMsg.sIdNo), to_number(:sTdGrpUserMsg.sAccountId),
              :sTdGrpUserMsg.sUserNo, to_number(:sTdGrpUserMsg.sIds), :sTdGrpUserMsg.sUserName,
              :sTdGrpUserMsg.sProductType, :sTdGrpUserMsg.sProductCode, :sTdGrpUserMsg.sUserPasswd,
              :sTdGrpUserMsg.sLoginName, :sTdGrpUserMsg.sLoginPasswd, :sTdGrpUserMsg.sProvCode,
              :sTdGrpUserMsg.sRegionCode, :sTdGrpUserMsg.sDistrictCode, :sTdGrpUserMsg.sTownCode,
              :sTdGrpUserMsg.sTerritoryCode, to_number(:sTdGrpUserMsg.sLimitOwe), :sTdGrpUserMsg.sCreditCode,
              to_number(:sTdGrpUserMsg.sCreditValue), :sTdGrpUserMsg.sRunCode, :sTdGrpUserMsg.sOldRun,
              to_date(:sTdGrpUserMsg.sRunTime,'yyyymmdd hh24:mi:ss'), to_date(:sTdGrpUserMsg.sBillDate,'yyyymmdd hh24:mi:ss'),
              to_number(:sTdGrpUserMsg.sBillType), :sTdGrpUserMsg.sLastBillType, :sTdGrpUserMsg.sOpTime,
              :sTdGrpUserMsg.sBakField, :sTdGrpUserMsg.sSmCode, :sTdGrpUserMsg.sGroupId);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGRPUSERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"cust_id",         ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"id_no",           ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"account_id",      ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sAccountId);
	OrderSetDataItem(&vMsgBodyType,"user_no",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserNo);
	OrderSetDataItem(&vMsgBodyType,"ids",             ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sIds);
	OrderSetDataItem(&vMsgBodyType,"user_name",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserName);
	OrderSetDataItem(&vMsgBodyType,"product_type",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProductType);
	OrderSetDataItem(&vMsgBodyType,"product_code",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserPasswd);
	OrderSetDataItem(&vMsgBodyType,"login_name",      ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLoginName);
	OrderSetDataItem(&vMsgBodyType,"login_passwd",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLoginPasswd);
	OrderSetDataItem(&vMsgBodyType,"prov_code",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProvCode);
	OrderSetDataItem(&vMsgBodyType,"region_code",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sRegionCode);
	OrderSetDataItem(&vMsgBodyType,"district_code",   ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sDistrictCode);
	OrderSetDataItem(&vMsgBodyType,"town_code",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sTownCode);
	OrderSetDataItem(&vMsgBodyType,"territory_code",  ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sTerritoryCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",       ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sLimitOwe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sCreditCode);
	OrderSetDataItem(&vMsgBodyType,"credit_value",    ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sCreditValue);
	OrderSetDataItem(&vMsgBodyType,"run_code",        ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"old_run",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sOldRun);
	OrderSetDataItem(&vMsgBodyType,"run_time",        ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"bill_date",       ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sBillDate);
	OrderSetDataItem(&vMsgBodyType,"bill_type",       ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sBillType);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type",  ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLastBillType);
	OrderSetDataItem(&vMsgBodyType,"op_time",         ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"bak_field",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sBakField);
	OrderSetDataItem(&vMsgBodyType,"sm_code",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sSmCode);
	OrderSetDataItem(&vMsgBodyType,"group_id",        ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sGroupId);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGrpUserMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGrpUserMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGRPUSERMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGrpUserMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpUserMsg	sTdGrpUserMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGrpUserMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(cust_id), to_char(id_no), to_char(account_id), user_no,
                    to_char(ids), user_name, product_type, product_code, user_passwd,
                    nvl(login_name,chr(0)), nvl(login_passwd,chr(0)), prov_code, region_code,
                    district_code, town_code, nvl(territory_code,chr(0)), to_char(limit_owe),
                    credit_code, to_char(credit_value), run_code, old_run,
                    to_char(run_time,'yyyymmdd hh24:mi:ss'), to_char(bill_date,'yyyymmdd hh24:mi:ss'),
                    to_char(bill_type), last_bill_type, to_char(op_time,'yyyymmdd hh24:mi:ss'),
                    bak_field, nvl(sm_code,chr(0)), nvl(group_id,chr(0)),
                    nvl(product_person,chr(0)),nvl(product_contact_phone,chr(0)),nvl(product_person_id,0),
                    nvl(account_person,chr(0)),nvl(account_contact_phone,chr(0))
			INTO :sTdGrpUserMsg.sCustId, :sTdGrpUserMsg.sIdNo, :sTdGrpUserMsg.sAccountId,
				 :sTdGrpUserMsg.sUserNo, :sTdGrpUserMsg.sIds, :sTdGrpUserMsg.sUserName,
				 :sTdGrpUserMsg.sProductType, :sTdGrpUserMsg.sProductCode, :sTdGrpUserMsg.sUserPasswd,
				 :sTdGrpUserMsg.sLoginName, :sTdGrpUserMsg.sLoginPasswd, :sTdGrpUserMsg.sProvCode,
				 :sTdGrpUserMsg.sRegionCode, :sTdGrpUserMsg.sDistrictCode, :sTdGrpUserMsg.sTownCode,
				 :sTdGrpUserMsg.sTerritoryCode, :sTdGrpUserMsg.sLimitOwe, :sTdGrpUserMsg.sCreditCode,
				 :sTdGrpUserMsg.sCreditValue, :sTdGrpUserMsg.sRunCode, :sTdGrpUserMsg.sOldRun,
				 :sTdGrpUserMsg.sRunTime, :sTdGrpUserMsg.sBillDate, :sTdGrpUserMsg.sBillType,
				 :sTdGrpUserMsg.sLastBillType, :sTdGrpUserMsg.sOpTime, :sTdGrpUserMsg.sBakField,
				 :sTdGrpUserMsg.sSmCode, :sTdGrpUserMsg.sGroupId,
				 :sTdGrpUserMsg.sProductPerson,:sTdGrpUserMsg.sProConPhone,:sTdGrpUserMsg.sProPersonId,
				 :sTdGrpUserMsg.sAccountPerson,:sTdGrpUserMsg.sAccountPhone
			FROM dGrpUserMsg
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
	{
		printf("\n%d\n",SQLCODE);
		return -500037;

	}
	Coltrim(sTdGrpUserMsg.sCustId);
	Coltrim(sTdGrpUserMsg.sIdNo);
	Coltrim(sTdGrpUserMsg.sAccountId);
	Coltrim(sTdGrpUserMsg.sUserNo);
	Coltrim(sTdGrpUserMsg.sIds);
	Coltrim(sTdGrpUserMsg.sUserName);
	Coltrim(sTdGrpUserMsg.sProductType);
	Coltrim(sTdGrpUserMsg.sProductCode);
	Coltrim(sTdGrpUserMsg.sUserPasswd);
	Coltrim(sTdGrpUserMsg.sLoginName);
	Coltrim(sTdGrpUserMsg.sLoginPasswd);
	Coltrim(sTdGrpUserMsg.sProvCode);
	Coltrim(sTdGrpUserMsg.sRegionCode);
	Coltrim(sTdGrpUserMsg.sDistrictCode);
	Coltrim(sTdGrpUserMsg.sTownCode);
	Coltrim(sTdGrpUserMsg.sTerritoryCode);
	Coltrim(sTdGrpUserMsg.sLimitOwe);
	Coltrim(sTdGrpUserMsg.sCreditCode);
	Coltrim(sTdGrpUserMsg.sCreditValue);
	Coltrim(sTdGrpUserMsg.sRunCode);
	Coltrim(sTdGrpUserMsg.sOldRun);
	Coltrim(sTdGrpUserMsg.sRunTime);
	Coltrim(sTdGrpUserMsg.sBillDate);
	Coltrim(sTdGrpUserMsg.sBillType);
	Coltrim(sTdGrpUserMsg.sLastBillType);
	Coltrim(sTdGrpUserMsg.sOpTime);
	Coltrim(sTdGrpUserMsg.sBakField);
	Coltrim(sTdGrpUserMsg.sSmCode);
	Coltrim(sTdGrpUserMsg.sGroupId);
	Coltrim(sTdGrpUserMsg.sProductPerson);
	Coltrim(sTdGrpUserMsg.sProConPhone);
	Coltrim(sTdGrpUserMsg.sProPersonId);
	Coltrim(sTdGrpUserMsg.sAccountPerson);
	Coltrim(sTdGrpUserMsg.sAccountPhone);

	strcpy(v_table_name,"DGRPUSERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"cust_id",         ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"id_no",           ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"account_id",      ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sAccountId);
	OrderSetDataItem(&vMsgBodyType,"user_no",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserNo);
	OrderSetDataItem(&vMsgBodyType,"ids",             ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sIds);
	OrderSetDataItem(&vMsgBodyType,"user_name",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserName);
	OrderSetDataItem(&vMsgBodyType,"product_type",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProductType);
	OrderSetDataItem(&vMsgBodyType,"product_code",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"user_passwd",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sUserPasswd);
	OrderSetDataItem(&vMsgBodyType,"login_name",      ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLoginName);
	OrderSetDataItem(&vMsgBodyType,"login_passwd",    ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLoginPasswd);
	OrderSetDataItem(&vMsgBodyType,"prov_code",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProvCode);
	OrderSetDataItem(&vMsgBodyType,"region_code",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sRegionCode);
	OrderSetDataItem(&vMsgBodyType,"district_code",   ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sDistrictCode);
	OrderSetDataItem(&vMsgBodyType,"town_code",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sTownCode);
	OrderSetDataItem(&vMsgBodyType,"territory_code",  ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sTerritoryCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe",       ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sLimitOwe);
	OrderSetDataItem(&vMsgBodyType,"credit_code",     ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sCreditCode);
	OrderSetDataItem(&vMsgBodyType,"credit_value",    ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sCreditValue);
	OrderSetDataItem(&vMsgBodyType,"run_code",        ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"old_run",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sOldRun);
	OrderSetDataItem(&vMsgBodyType,"run_time",        ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"bill_date",       ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sBillDate);
	OrderSetDataItem(&vMsgBodyType,"bill_type",       ORDERDATAFORMAT_NUMBER, sTdGrpUserMsg.sBillType);
	OrderSetDataItem(&vMsgBodyType,"last_bill_type",  ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sLastBillType);
	OrderSetDataItem(&vMsgBodyType,"op_time",         ORDERDATAFORMAT_DATE  , sTdGrpUserMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"bak_field",       ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sBakField);
	OrderSetDataItem(&vMsgBodyType,"sm_code",         ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sSmCode);
	OrderSetDataItem(&vMsgBodyType,"group_id",        ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sGroupId);
	OrderSetDataItem(&vMsgBodyType,"product_person",  ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProductPerson);
	OrderSetDataItem(&vMsgBodyType,"product_contact_phone",ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProConPhone);
	OrderSetDataItem(&vMsgBodyType,"product_person_id",ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sProPersonId);
	OrderSetDataItem(&vMsgBodyType,"account_person",ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sAccountPerson);
	OrderSetDataItem(&vMsgBodyType,"account_contact_phone",ORDERDATAFORMAT_STRING, sTdGrpUserMsg.sAccountPhone);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGrpUserMebMsg(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdGrpUserMebMsg
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpUserMebMsg tdGrpUserMebMsg;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdGrpUserMebMsg.sIdNo);
	Coltrim(tdGrpUserMebMsg.sMemberId);
	Coltrim(tdGrpUserMebMsg.sMemberNo);
	Coltrim(tdGrpUserMebMsg.sBeginTime);
	Coltrim(tdGrpUserMebMsg.sEndTime);
	Coltrim(tdGrpUserMebMsg.sBakField);

	EXEC SQL INSERT INTO dGrpUserMebMsg(id_no, member_id, member_no, begin_time, end_time, bak_field)
		     				  VALUES(to_number(:tdGrpUserMebMsg.sIdNo),
                                     to_number(:tdGrpUserMebMsg.sMemberId),
                                     :tdGrpUserMebMsg.sMemberNo,
                                     to_date(:tdGrpUserMebMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),
                                     to_date(:tdGrpUserMebMsg.sEndTime,'yyyymmdd hh24:mi:ss'),
                                     :tdGrpUserMebMsg.sBakField
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DGRPUSERMEBMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdGrpUserMebMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "member_id",	ORDERDATAFORMAT_NUMBER, tdGrpUserMebMsg.sMemberId);
	OrderSetDataItem(&vMsgBodyType, "member_no",	ORDERDATAFORMAT_STRING, tdGrpUserMebMsg.sMemberNo);
	OrderSetDataItem(&vMsgBodyType, "begin_time",	ORDERDATAFORMAT_DATE,   tdGrpUserMebMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdGrpUserMebMsg.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "bak_field",	ORDERDATAFORMAT_STRING, tdGrpUserMebMsg.sBakField);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteGrpUserMebMsg(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpUserMebMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dGrpUserMebMsg a WHERE a.id_no=to_number(:NG_Param0) \
						and a.member_id=to_number(:NG_Param1) and a.begin_time=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
						and a.end_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DGRPUSERMEBMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",			ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "member_id",		ORDERDATAFORMAT_NUMBER, oldIndex.sMemberId);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time",		ORDERDATAFORMAT_DATE,   oldIndex.sBeginTime);
	OrderSetPrimaryKey(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   oldIndex.sEndTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateGrpUserMebMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpUserMebMsgIndex oldIndex;
TdGrpUserMebMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpUserMebMsg	tdGrpUserMebMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dGrpUserMebMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) \
						and a.member_id=to_number(:NG_Param1) and a.begin_time=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
						and a.end_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(id_no), to_char(member_id), member_no,
	                to_char(begin_time,'yyyymmdd hh24:mi:ss'), to_char(end_time,'yyyymmdd hh24:mi:ss'), bak_field
			   INTO :tdGrpUserMebMsg.sIdNo,
					:tdGrpUserMebMsg.sMemberId,
					:tdGrpUserMebMsg.sMemberNo,
					:tdGrpUserMebMsg.sBeginTime,
					:tdGrpUserMebMsg.sEndTime,
					:tdGrpUserMebMsg.sBakField
			   FROM dGrpUserMebMsg
			  WHERE id_no=to_number(:newIndex.sIdNo) and member_id=to_number(:newIndex.sMemberId)
			    and begin_time=to_date(:newIndex.sBeginTime,'yyyymmdd hh24:mi:ss')
			    and end_time=to_date(:newIndex.sEndTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdGrpUserMebMsg.sIdNo);
	Coltrim(tdGrpUserMebMsg.sMemberId);
	Coltrim(tdGrpUserMebMsg.sMemberNo);
	Coltrim(tdGrpUserMebMsg.sBeginTime);
	Coltrim(tdGrpUserMebMsg.sEndTime);
	Coltrim(tdGrpUserMebMsg.sBakField);


	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DGRPUSERMEBMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "member_id",	ORDERDATAFORMAT_NUMBER, oldIndex.sMemberId);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time",	ORDERDATAFORMAT_DATE,   oldIndex.sBeginTime);
	OrderSetPrimaryKey(&vMsgBodyType, "end_time",	ORDERDATAFORMAT_DATE,   oldIndex.sEndTime);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdGrpUserMebMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "member_id",	ORDERDATAFORMAT_NUMBER, tdGrpUserMebMsg.sMemberId);
	OrderSetDataItem(&vMsgBodyType, "member_no",	ORDERDATAFORMAT_STRING, tdGrpUserMebMsg.sMemberNo);
	OrderSetDataItem(&vMsgBodyType, "begin_time",	ORDERDATAFORMAT_DATE,   tdGrpUserMebMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		ORDERDATAFORMAT_DATE,   tdGrpUserMebMsg.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "bak_field",	ORDERDATAFORMAT_STRING, tdGrpUserMebMsg.sBakField);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderInsertCustSim(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustSim
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustSim	sTdCustSim;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustSim.sIdNo);
	Coltrim(sTdCustSim.sSwitchNo);
	Coltrim(sTdCustSim.sSimNo);

	EXEC SQL INSERT INTO dCustSim(id_no,switch_no,sim_no)
		VALUES(to_number(:sTdCustSim.sIdNo),:sTdCustSim.sSwitchNo,:sTdCustSim.sSimNo);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTSIM");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER, sTdCustSim.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"switch_no",	ORDERDATAFORMAT_STRING, sTdCustSim.sSwitchNo);
	OrderSetDataItem(&vMsgBodyType,"sim_no",	ORDERDATAFORMAT_STRING, sTdCustSim.sSimNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustSim(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustSim a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTSIM");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustSim(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustSim	sTdCustSim;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustSim a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),switch_no,sim_no
			INTO :sTdCustSim.sIdNo,:sTdCustSim.sSwitchNo,:sTdCustSim.sSimNo
			FROM dCustSim
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustSim.sIdNo);
	Coltrim(sTdCustSim.sSwitchNo);
	Coltrim(sTdCustSim.sSimNo);

	strcpy(v_table_name,"DCUSTSIM");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER, sTdCustSim.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"switch_no",	ORDERDATAFORMAT_STRING, sTdCustSim.sSwitchNo);
	OrderSetDataItem(&vMsgBodyType,"sim_no",	ORDERDATAFORMAT_STRING, sTdCustSim.sSimNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustExpire(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustExpire
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustExpire	sTdCustExpire;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustExpire.sIdNo);
	Coltrim(sTdCustExpire.sOpenTime);
	Coltrim(sTdCustExpire.sBeginFlag);
	Coltrim(sTdCustExpire.sBeginTime);
	Coltrim(sTdCustExpire.sOldExpire);
	Coltrim(sTdCustExpire.sExpireTime);
	Coltrim(sTdCustExpire.sBakField);

	EXEC SQL INSERT INTO dCustExpire(id_no, open_time, begin_flag, begin_time,
	                                 old_expire, expire_time, bak_field)
		     VALUES(to_number(:sTdCustExpire.sIdNo),to_date(:sTdCustExpire.sOpenTime,'yyyymmdd hh24:mi:ss'),
		     	    :sTdCustExpire.sBeginFlag,to_date(:sTdCustExpire.sBeginTime,'yyyymmdd hh24:mi:ss'),
		     	    to_date(:sTdCustExpire.sOldExpire,'yyyymmdd hh24:mi:ss'),
		     	    to_date(:sTdCustExpire.sExpireTime,'yyyymmdd hh24:mi:ss'),:sTdCustExpire.sBakField
		     	    );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTEXPIRE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",		  ORDERDATAFORMAT_NUMBER, sTdCustExpire.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"open_time",	  ORDERDATAFORMAT_DATE,   sTdCustExpire.sOpenTime);
	OrderSetDataItem(&vMsgBodyType,"begin_flag",  ORDERDATAFORMAT_STRING, sTdCustExpire.sBeginFlag);
	OrderSetDataItem(&vMsgBodyType,"begin_time",  ORDERDATAFORMAT_DATE,   sTdCustExpire.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"old_expire",  ORDERDATAFORMAT_DATE,   sTdCustExpire.sOldExpire);
	OrderSetDataItem(&vMsgBodyType,"expire_time", ORDERDATAFORMAT_DATE,   sTdCustExpire.sExpireTime);
	OrderSetDataItem(&vMsgBodyType,"bak_field",	  ORDERDATAFORMAT_STRING, sTdCustExpire.sBakField);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustExpire(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustExpire a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTEXPIRE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustExpire(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustExpire	sTdCustExpire;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustExpire a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT id_no, to_char(open_time,'yyyymmdd hh24:mi:ss'), begin_flag,
	                to_char(begin_time,'yyyymmdd hh24:mi:ss'), to_char(old_expire,'yyyymmdd hh24:mi:ss'),
	                to_char(expire_time,'yyyymmdd hh24:mi:ss'), nvl(bak_field,chr(0)),nvl(cannel_flag,'N'),nvl(to_char(updateflag_time,'yyyymmdd hh24:mi:ss'),to_char(sysdate,'yyyymmdd hh24:mi:ss'))
			INTO :sTdCustExpire.sIdNo,:sTdCustExpire.sOpenTime,:sTdCustExpire.sBeginFlag,
				 :sTdCustExpire.sBeginTime,:sTdCustExpire.sOldExpire,:sTdCustExpire.sExpireTime,:sTdCustExpire.sBakField,:sTdCustExpire.sCannelFlag,:sTdCustExpire.sUpdateFlagTime
			FROM dCustExpire
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustExpire.sIdNo);
	Coltrim(sTdCustExpire.sOpenTime);
	Coltrim(sTdCustExpire.sBeginFlag);
	Coltrim(sTdCustExpire.sBeginTime);
	Coltrim(sTdCustExpire.sOldExpire);
	Coltrim(sTdCustExpire.sExpireTime);
	Coltrim(sTdCustExpire.sBakField);
	Coltrim(sTdCustExpire.sCannelFlag);
	Coltrim(sTdCustExpire.sUpdateFlagTime);

	strcpy(v_table_name,"DCUSTEXPIRE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",		  ORDERDATAFORMAT_NUMBER, sTdCustExpire.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"open_time",	  ORDERDATAFORMAT_DATE,   sTdCustExpire.sOpenTime);
	OrderSetDataItem(&vMsgBodyType,"begin_flag",  ORDERDATAFORMAT_STRING, sTdCustExpire.sBeginFlag);
	OrderSetDataItem(&vMsgBodyType,"begin_time",  ORDERDATAFORMAT_DATE,   sTdCustExpire.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"old_expire",  ORDERDATAFORMAT_DATE,   sTdCustExpire.sOldExpire);
	OrderSetDataItem(&vMsgBodyType,"expire_time", ORDERDATAFORMAT_DATE,   sTdCustExpire.sExpireTime);
	OrderSetDataItem(&vMsgBodyType,"bak_field",	  ORDERDATAFORMAT_STRING, sTdCustExpire.sBakField);
	OrderSetDataItem(&vMsgBodyType,"cannel_flag", ORDERDATAFORMAT_STRING,   sTdCustExpire.sCannelFlag);
	OrderSetDataItem(&vMsgBodyType,"updateflag_time",	  ORDERDATAFORMAT_DATE, sTdCustExpire.sUpdateFlagTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertCustTransMsg(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdCustTransMsg
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustTransMsg	sTdCustTransMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustTransMsg.sIdNo);
	Coltrim(sTdCustTransMsg.sPhoneNo);
	Coltrim(sTdCustTransMsg.sAgentCode);
	Coltrim(sTdCustTransMsg.sBeginTime);
	Coltrim(sTdCustTransMsg.sEndTime);
	Coltrim(sTdCustTransMsg.sOpTime);
	Coltrim(sTdCustTransMsg.sLoginNo);
	Coltrim(sTdCustTransMsg.sTotalDate);

	EXEC SQL INSERT INTO dCustTransMsg(id_no, phone_no, agent_code, begin_time,
	                                   end_time, op_time, login_no, total_date)
		     VALUES(to_number(:sTdCustTransMsg.sIdNo),:sTdCustTransMsg.sPhoneNo,:sTdCustTransMsg.sAgentCode,
		     	    to_date(:sTdCustTransMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),to_date(:sTdCustTransMsg.sEndTime,'yyyymmdd hh24:mi:ss'),
		     	    to_date(:sTdCustTransMsg.sOpTime,'yyyymmdd hh24:mi:ss'),:sTdCustTransMsg.sLoginNo,:sTdCustTransMsg.sTotalDate
		     	    );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTTRANSMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",		  ORDERDATAFORMAT_NUMBER, sTdCustTransMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"phone_no",	  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"agent_code",  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sAgentCode);
	OrderSetDataItem(&vMsgBodyType,"begin_time",  ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",    ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sEndTime);
	OrderSetDataItem(&vMsgBodyType,"op_time",     ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"login_no",	  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"total_date",  ORDERDATAFORMAT_NUMBER, sTdCustTransMsg.sTotalDate);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustTransMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustTransMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTTRANSMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustTransMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustTransMsg	sTdCustTransMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustTransMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no), phone_no, agent_code, to_char(begin_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'), to_char(op_time,'yyyymmdd hh24:mi:ss'),
	                login_no, to_char(total_date)
			INTO :sTdCustTransMsg.sIdNo,
				 :sTdCustTransMsg.sPhoneNo,
				 :sTdCustTransMsg.sAgentCode,
				 :sTdCustTransMsg.sBeginTime,
				 :sTdCustTransMsg.sEndTime,
				 :sTdCustTransMsg.sOpTime,
				 :sTdCustTransMsg.sLoginNo,
				 :sTdCustTransMsg.sTotalDate
			FROM dCustTransMsg
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustTransMsg.sIdNo);
	Coltrim(sTdCustTransMsg.sPhoneNo);
	Coltrim(sTdCustTransMsg.sAgentCode);
	Coltrim(sTdCustTransMsg.sBeginTime);
	Coltrim(sTdCustTransMsg.sEndTime);
	Coltrim(sTdCustTransMsg.sOpTime);
	Coltrim(sTdCustTransMsg.sLoginNo);
	Coltrim(sTdCustTransMsg.sTotalDate);

	strcpy(v_table_name,"DCUSTTRANSMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",		  ORDERDATAFORMAT_NUMBER, sTdCustTransMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"phone_no",	  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"agent_code",  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sAgentCode);
	OrderSetDataItem(&vMsgBodyType,"begin_time",  ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",    ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sEndTime);
	OrderSetDataItem(&vMsgBodyType,"op_time",     ORDERDATAFORMAT_DATE,   sTdCustTransMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"login_no",	  ORDERDATAFORMAT_STRING, sTdCustTransMsg.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"total_date",  ORDERDATAFORMAT_NUMBER, sTdCustTransMsg.sTotalDate);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertConMark(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdConMark
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConMark	sTdConMark;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdConMark.sContractNo);
	Coltrim(sTdConMark.sInitPoint);
	Coltrim(sTdConMark.sCurrentPoint);
	Coltrim(sTdConMark.sCurrentTime);
	Coltrim(sTdConMark.sMonthPoint);
	Coltrim(sTdConMark.sYearPoint);
	Coltrim(sTdConMark.sLastyearPoint);
	Coltrim(sTdConMark.sAddPoint);
	Coltrim(sTdConMark.sOwePoint);
	Coltrim(sTdConMark.sLastPoint);
	Coltrim(sTdConMark.sMonthUsed);
	Coltrim(sTdConMark.sYearUsed);
	Coltrim(sTdConMark.sTotalUsed);
	Coltrim(sTdConMark.sMinYm);
	Coltrim(sTdConMark.sContractStatus);
	Coltrim(sTdConMark.sOweLimit);
	Coltrim(sTdConMark.sStatusTime);
	Coltrim(sTdConMark.sChgFlag);

	EXEC SQL INSERT INTO dConMark(
	                              contract_no,
                                  init_point,
                                  current_point,
                                  current_time,
                                  month_point,
                                  year_point,
                                  lastyear_point,
                                  add_point,
                                  owe_point,
                                  last_point,
                                  month_used,
                                  year_used,
                                  total_used,
                                  min_ym,
                                  contract_status,
                                  owe_limit,
                                  status_time,
                                  chg_flag)
		     VALUES(
		            to_number(:sTdConMark.sContractNo),
                    to_number(:sTdConMark.sInitPoint),
                    to_number(:sTdConMark.sCurrentPoint),
                    to_date(:sTdConMark.sCurrentTime,'yyyymmdd hh24:mi:ss'),
                    to_number(:sTdConMark.sMonthPoint),
                    to_number(:sTdConMark.sYearPoint),
                    to_number(:sTdConMark.sLastyearPoint),
                    to_number(:sTdConMark.sAddPoint),
                    to_number(:sTdConMark.sOwePoint),
                    to_number(:sTdConMark.sLastPoint),
                    to_number(:sTdConMark.sMonthUsed),
                    to_number(:sTdConMark.sYearUsed),
                    to_number(:sTdConMark.sTotalUsed),
                    to_number(:sTdConMark.sMinYm),
                    to_number(:sTdConMark.sContractStatus),
                    to_number(:sTdConMark.sOweLimit),
                    to_date(:sTdConMark.sStatusTime,'yyyymmdd hh24:mi:ss'),
                    :sTdConMark.sChgFlag
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCONMARK");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"contract_no",       ORDERDATAFORMAT_NUMBER , sTdConMark.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"init_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sInitPoint);
	OrderSetDataItem(&vMsgBodyType,"current_point",     ORDERDATAFORMAT_NUMBER , sTdConMark.sCurrentPoint);
	OrderSetDataItem(&vMsgBodyType,"current_time",      ORDERDATAFORMAT_DATE   , sTdConMark.sCurrentTime);
	OrderSetDataItem(&vMsgBodyType,"month_point",       ORDERDATAFORMAT_NUMBER , sTdConMark.sMonthPoint);
	OrderSetDataItem(&vMsgBodyType,"year_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sYearPoint);
	OrderSetDataItem(&vMsgBodyType,"lastyear_point",    ORDERDATAFORMAT_NUMBER , sTdConMark.sLastyearPoint);
	OrderSetDataItem(&vMsgBodyType,"add_point",         ORDERDATAFORMAT_NUMBER , sTdConMark.sAddPoint);
	OrderSetDataItem(&vMsgBodyType,"owe_point",         ORDERDATAFORMAT_NUMBER , sTdConMark.sOwePoint);
	OrderSetDataItem(&vMsgBodyType,"last_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sLastPoint);
	OrderSetDataItem(&vMsgBodyType,"month_used",        ORDERDATAFORMAT_NUMBER , sTdConMark.sMonthUsed);
	OrderSetDataItem(&vMsgBodyType,"year_used",         ORDERDATAFORMAT_NUMBER , sTdConMark.sYearUsed);
	OrderSetDataItem(&vMsgBodyType,"total_used",        ORDERDATAFORMAT_NUMBER , sTdConMark.sTotalUsed);
	OrderSetDataItem(&vMsgBodyType,"min_ym",            ORDERDATAFORMAT_NUMBER , sTdConMark.sMinYm);
	OrderSetDataItem(&vMsgBodyType,"contract_status",   ORDERDATAFORMAT_NUMBER , sTdConMark.sContractStatus);
	OrderSetDataItem(&vMsgBodyType,"owe_limit",         ORDERDATAFORMAT_NUMBER , sTdConMark.sOweLimit);
	OrderSetDataItem(&vMsgBodyType,"status_time",       ORDERDATAFORMAT_DATE   , sTdConMark.sStatusTime);
	OrderSetDataItem(&vMsgBodyType,"chg_flag",          ORDERDATAFORMAT_STRING , sTdConMark.sChgFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteConMark(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_contract_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dConMark a WHERE a.contract_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCONMARK");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,i_contract_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateConMark(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_contract_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdConMark	sTdConMark;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);
	Coltrim(i_contract_no);

	init(v_sql_buff);
	memset(&sTdConMark,0,sizeof(sTdConMark));

	sprintf(v_sql_buff,"UPDATE dConMark a SET %s WHERE a.contract_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		printf("+++++++++++OrderMultiParaDML,v_ret=%d\n",v_ret);
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(contract_no),
					to_char(init_point),
					to_char(current_point),
					nvl(to_char(current_time,'yyyymmdd hh24:mi:ss'),chr(0)),
					to_char(month_point),
					to_char(year_point),
					to_char(lastyear_point),
					to_char(add_point),
					to_char(owe_point),
					to_char(last_point),
					to_char(month_used),
					to_char(year_used),
					to_char(total_used),
					to_char(min_ym),
					to_char(contract_status),
					to_char(owe_limit),
					to_char(status_time,'yyyymmdd hh24:mi:ss'),
					nvl(chg_flag,chr(0))
			INTO :sTdConMark.sContractNo,
				 :sTdConMark.sInitPoint,
				 :sTdConMark.sCurrentPoint,
				 :sTdConMark.sCurrentTime,
				 :sTdConMark.sMonthPoint,
				 :sTdConMark.sYearPoint,
				 :sTdConMark.sLastyearPoint,
				 :sTdConMark.sAddPoint,
				 :sTdConMark.sOwePoint,
				 :sTdConMark.sLastPoint,
				 :sTdConMark.sMonthUsed,
				 :sTdConMark.sYearUsed,
				 :sTdConMark.sTotalUsed,
				 :sTdConMark.sMinYm,
				 :sTdConMark.sContractStatus,
				 :sTdConMark.sOweLimit,
				 :sTdConMark.sStatusTime,
				 :sTdConMark.sChgFlag
			FROM dConMark
			WHERE contract_no = to_number(:i_contract_no);

	if (SQLCODE!=SQLOK)
	{
		printf("++++++++++OrderUpdateConMark,SQLCODE=%d\n",SQLCODE);
		return -500037;
	}

    	Coltrim(sTdConMark.sContractNo);
	Coltrim(sTdConMark.sInitPoint);
	Coltrim(sTdConMark.sCurrentPoint);
	Coltrim(sTdConMark.sCurrentTime);
	Coltrim(sTdConMark.sMonthPoint);
	Coltrim(sTdConMark.sYearPoint);
	Coltrim(sTdConMark.sLastyearPoint);
	Coltrim(sTdConMark.sAddPoint);
	Coltrim(sTdConMark.sOwePoint);
	Coltrim(sTdConMark.sLastPoint);
	Coltrim(sTdConMark.sMonthUsed);
	Coltrim(sTdConMark.sYearUsed);
	Coltrim(sTdConMark.sTotalUsed);
	Coltrim(sTdConMark.sMinYm);
	Coltrim(sTdConMark.sContractStatus);
	Coltrim(sTdConMark.sOweLimit);
	Coltrim(sTdConMark.sStatusTime);
	Coltrim(sTdConMark.sChgFlag);

	strcpy(v_table_name,"DCONMARK");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",     ORDERDATAFORMAT_NUMBER,i_contract_no);

	OrderSetDataItem(&vMsgBodyType,"contract_no",       ORDERDATAFORMAT_NUMBER , sTdConMark.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"init_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sInitPoint);
	OrderSetDataItem(&vMsgBodyType,"current_point",     ORDERDATAFORMAT_NUMBER , sTdConMark.sCurrentPoint);
	OrderSetDataItem(&vMsgBodyType,"current_time",      ORDERDATAFORMAT_DATE   , sTdConMark.sCurrentTime);
	OrderSetDataItem(&vMsgBodyType,"month_point",       ORDERDATAFORMAT_NUMBER , sTdConMark.sMonthPoint);
	OrderSetDataItem(&vMsgBodyType,"year_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sYearPoint);
	OrderSetDataItem(&vMsgBodyType,"lastyear_point",    ORDERDATAFORMAT_NUMBER , sTdConMark.sLastyearPoint);
	OrderSetDataItem(&vMsgBodyType,"add_point",         ORDERDATAFORMAT_NUMBER , sTdConMark.sAddPoint);
	OrderSetDataItem(&vMsgBodyType,"owe_point",         ORDERDATAFORMAT_NUMBER , sTdConMark.sOwePoint);
	OrderSetDataItem(&vMsgBodyType,"last_point",        ORDERDATAFORMAT_NUMBER , sTdConMark.sLastPoint);
	OrderSetDataItem(&vMsgBodyType,"month_used",        ORDERDATAFORMAT_NUMBER , sTdConMark.sMonthUsed);
	OrderSetDataItem(&vMsgBodyType,"year_used",         ORDERDATAFORMAT_NUMBER , sTdConMark.sYearUsed);
	OrderSetDataItem(&vMsgBodyType,"total_used",        ORDERDATAFORMAT_NUMBER , sTdConMark.sTotalUsed);
	OrderSetDataItem(&vMsgBodyType,"min_ym",            ORDERDATAFORMAT_NUMBER , sTdConMark.sMinYm);
	OrderSetDataItem(&vMsgBodyType,"contract_status",   ORDERDATAFORMAT_NUMBER , sTdConMark.sContractStatus);
	OrderSetDataItem(&vMsgBodyType,"owe_limit",         ORDERDATAFORMAT_NUMBER , sTdConMark.sOweLimit);
	OrderSetDataItem(&vMsgBodyType,"status_time",       ORDERDATAFORMAT_DATE   , sTdConMark.sStatusTime);
	OrderSetDataItem(&vMsgBodyType,"chg_flag",          ORDERDATAFORMAT_STRING , sTdConMark.sChgFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++++++++++++OrderInserSendCrm,v_ret=%d\n",v_ret);
		return -500039;
	}

	return 0;

}


int OrderInsertUserPost(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdUserPost
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdUserPost	sTdUserPost;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdUserPost.sIdNo);
	Coltrim(sTdUserPost.sPostFlag);
	Coltrim(sTdUserPost.sPostType);
	Coltrim(sTdUserPost.sPostAddress);
	Coltrim(sTdUserPost.sPostZip);
	Coltrim(sTdUserPost.sFaxNo);
	Coltrim(sTdUserPost.sMailAddress);
	Coltrim(sTdUserPost.sContractNo);
	Coltrim(sTdUserPost.sPostName);
	Coltrim(sTdUserPost.sPostnoFlag);
	Coltrim(sTdUserPost.sEmailFlag);
	Coltrim(sTdUserPost.sEmailType);
	Coltrim(sTdUserPost.sSmsgFlag);
	Coltrim(sTdUserPost.sClomsgFlag);
	Coltrim(sTdUserPost.sOrderTime);
	Coltrim(sTdUserPost.sSendflag);

	EXEC SQL INSERT INTO dUserPost(
	                              id_no        ,
								  post_flag    ,
								  post_type    ,
								  post_address ,
								  post_zip     ,
								  fax_no       ,
								  mail_address ,
								  contract_no  ,
								  post_name    ,
								  postno_flag  ,
								  email_flag   ,
								  email_type   ,
								  smsg_flag    ,
								  clomsg_flag  ,
								  order_time   ,
								  sendflag
                                  )
		     VALUES(
		            to_number(:sTdUserPost.sIdNo),
					:sTdUserPost.sPostFlag,
					:sTdUserPost.sPostType,
					:sTdUserPost.sPostAddress,
					:sTdUserPost.sPostZip,
					:sTdUserPost.sFaxNo,
					:sTdUserPost.sMailAddress,
					to_number(:sTdUserPost.sContractNo),
					:sTdUserPost.sPostName,
					to_number(:sTdUserPost.sPostnoFlag),
					:sTdUserPost.sEmailFlag,
					:sTdUserPost.sEmailType,
					:sTdUserPost.sSmsgFlag,
					:sTdUserPost.sClomsgFlag,
					:sTdUserPost.sOrderTime,
					:sTdUserPost.sSendflag
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DUSERPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER, sTdUserPost.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"post_flag",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostFlag);
	OrderSetDataItem(&vMsgBodyType,"post_type",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostType);
	OrderSetDataItem(&vMsgBodyType,"post_address",   ORDERDATAFORMAT_STRING, sTdUserPost.sPostAddress);
	OrderSetDataItem(&vMsgBodyType,"post_zip",       ORDERDATAFORMAT_STRING, sTdUserPost.sPostZip);
	OrderSetDataItem(&vMsgBodyType,"fax_no",         ORDERDATAFORMAT_STRING, sTdUserPost.sFaxNo);
	OrderSetDataItem(&vMsgBodyType,"mail_address",   ORDERDATAFORMAT_STRING, sTdUserPost.sMailAddress);
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER, sTdUserPost.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"post_name",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostName);
	OrderSetDataItem(&vMsgBodyType,"postno_flag",    ORDERDATAFORMAT_NUMBER, sTdUserPost.sPostnoFlag);
	OrderSetDataItem(&vMsgBodyType,"email_flag",     ORDERDATAFORMAT_STRING, sTdUserPost.sEmailFlag);
	OrderSetDataItem(&vMsgBodyType,"email_type",     ORDERDATAFORMAT_STRING, sTdUserPost.sEmailType);
	OrderSetDataItem(&vMsgBodyType,"smsg_flag",      ORDERDATAFORMAT_STRING, sTdUserPost.sSmsgFlag);
	OrderSetDataItem(&vMsgBodyType,"clomsg_flag",    ORDERDATAFORMAT_STRING, sTdUserPost.sClomsgFlag);
	OrderSetDataItem(&vMsgBodyType,"order_time",     ORDERDATAFORMAT_STRING, sTdUserPost.sOrderTime);
	OrderSetDataItem(&vMsgBodyType,"sendflag",       ORDERDATAFORMAT_STRING, sTdUserPost.sSendflag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteUserPost(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dUserPost a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DUSERPOST");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateUserPost(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdUserPost	sTdUserPost;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dUserPost a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),
                    post_flag,
                    post_type,
                    post_address,
                    post_zip,
                    nvl(fax_no,chr(0)),
                    nvl(mail_address,chr(0)),
                    contract_no,
                    post_name,
                    to_char(postno_flag),
                    nvl(email_flag,chr(0)),
                    nvl(email_type,chr(0)),
                    nvl(smsg_flag,chr(0)),
                    nvl(clomsg_flag,chr(0)),
                    nvl(order_time,chr(0)),
                    nvl(sendflag,chr(0))
			INTO :sTdUserPost.sIdNo,
				 :sTdUserPost.sPostFlag,
				 :sTdUserPost.sPostType,
				 :sTdUserPost.sPostAddress,
				 :sTdUserPost.sPostZip,
				 :sTdUserPost.sFaxNo,
				 :sTdUserPost.sMailAddress,
				 :sTdUserPost.sContractNo,
				 :sTdUserPost.sPostName,
				 :sTdUserPost.sPostnoFlag,
				 :sTdUserPost.sEmailFlag,
				 :sTdUserPost.sEmailType,
				 :sTdUserPost.sSmsgFlag,
				 :sTdUserPost.sClomsgFlag,
				 :sTdUserPost.sOrderTime,
				 :sTdUserPost.sSendflag
			FROM dUserPost
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdUserPost.sIdNo);
	Coltrim(sTdUserPost.sPostFlag);
	Coltrim(sTdUserPost.sPostType);
	Coltrim(sTdUserPost.sPostAddress);
	Coltrim(sTdUserPost.sPostZip);
	Coltrim(sTdUserPost.sFaxNo);
	Coltrim(sTdUserPost.sMailAddress);
	Coltrim(sTdUserPost.sContractNo);
	Coltrim(sTdUserPost.sPostName);
	Coltrim(sTdUserPost.sPostnoFlag);
	Coltrim(sTdUserPost.sEmailFlag);
	Coltrim(sTdUserPost.sEmailType);
	Coltrim(sTdUserPost.sSmsgFlag);
	Coltrim(sTdUserPost.sClomsgFlag);
	Coltrim(sTdUserPost.sOrderTime);
	Coltrim(sTdUserPost.sSendflag);

	strcpy(v_table_name,"DUSERPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER, sTdUserPost.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"post_flag",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostFlag);
	OrderSetDataItem(&vMsgBodyType,"post_type",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostType);
	OrderSetDataItem(&vMsgBodyType,"post_address",   ORDERDATAFORMAT_STRING, sTdUserPost.sPostAddress);
	OrderSetDataItem(&vMsgBodyType,"post_zip",       ORDERDATAFORMAT_STRING, sTdUserPost.sPostZip);
	OrderSetDataItem(&vMsgBodyType,"fax_no",         ORDERDATAFORMAT_STRING, sTdUserPost.sFaxNo);
	OrderSetDataItem(&vMsgBodyType,"mail_address",   ORDERDATAFORMAT_STRING, sTdUserPost.sMailAddress);
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER, sTdUserPost.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"post_name",      ORDERDATAFORMAT_STRING, sTdUserPost.sPostName);
	OrderSetDataItem(&vMsgBodyType,"postno_flag",    ORDERDATAFORMAT_NUMBER, sTdUserPost.sPostnoFlag);
	OrderSetDataItem(&vMsgBodyType,"email_flag",     ORDERDATAFORMAT_STRING, sTdUserPost.sEmailFlag);
	OrderSetDataItem(&vMsgBodyType,"email_type",     ORDERDATAFORMAT_STRING, sTdUserPost.sEmailType);
	OrderSetDataItem(&vMsgBodyType,"smsg_flag",      ORDERDATAFORMAT_STRING, sTdUserPost.sSmsgFlag);
	OrderSetDataItem(&vMsgBodyType,"clomsg_flag",    ORDERDATAFORMAT_STRING, sTdUserPost.sClomsgFlag);
	OrderSetDataItem(&vMsgBodyType,"order_time",     ORDERDATAFORMAT_STRING, sTdUserPost.sOrderTime);
	OrderSetDataItem(&vMsgBodyType,"sendflag",       ORDERDATAFORMAT_STRING, sTdUserPost.sSendflag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustPost(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdCustPost
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustPost	sTdCustPost;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustPost.sContractNo);
	Coltrim(sTdCustPost.sPostFlag);
	Coltrim(sTdCustPost.sPostType);
	Coltrim(sTdCustPost.sPostAddress);
	Coltrim(sTdCustPost.sPostZip);
	Coltrim(sTdCustPost.sFaxNo);
	Coltrim(sTdCustPost.sMailAddress);
	Coltrim(sTdCustPost.sPostContCode);
	Coltrim(sTdCustPost.sOpTime);

	EXEC SQL INSERT INTO dCustPost
	                    (
                         contract_no   ,
                         post_flag     ,
                         post_type     ,
                         post_address  ,
                         post_zip      ,
                         fax_no        ,
                         mail_address  ,
                         post_cont_code,
                         op_time
                        )
		     VALUES(
		            to_number(:sTdCustPost.sContractNo)  ,
                    :sTdCustPost.sPostFlag    ,
                    :sTdCustPost.sPostType    ,
                    :sTdCustPost.sPostAddress ,
                    :sTdCustPost.sPostZip     ,
                    :sTdCustPost.sFaxNo       ,
                    :sTdCustPost.sMailAddress ,
                    :sTdCustPost.sPostContCode,
                    to_date(:sTdCustPost.sOpTime,'yyyymmdd hh24:mi:ss')
		     );

	if (SQLCODE != SQLOK){
		printf("sqlcode=%d,sqlerrmsg=%s\n",SQLCODE,SQLERRMSG);
		return -500030;
	}
	strcpy(v_table_name,"DCUSTPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"contract_no"   ,ORDERDATAFORMAT_NUMBER, sTdCustPost.sContractNo  );
	OrderSetDataItem(&vMsgBodyType,"post_flag"     ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostFlag    );
	OrderSetDataItem(&vMsgBodyType,"post_type"     ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostType    );
	OrderSetDataItem(&vMsgBodyType,"post_address"  ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostAddress );
	OrderSetDataItem(&vMsgBodyType,"post_zip"      ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostZip     );
	OrderSetDataItem(&vMsgBodyType,"fax_no"        ,ORDERDATAFORMAT_STRING, sTdCustPost.sFaxNo       );
	OrderSetDataItem(&vMsgBodyType,"mail_address"  ,ORDERDATAFORMAT_STRING, sTdCustPost.sMailAddress );
	OrderSetDataItem(&vMsgBodyType,"post_cont_code",ORDERDATAFORMAT_STRING, sTdCustPost.sPostContCode);
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE,	sTdCustPost.sOpTime      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustPost(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_contract_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustPost a WHERE a.contract_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTPOST");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,i_contract_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustPost(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_contract_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustPost	sTdCustPost;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustPost a SET %s WHERE a.contract_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(contract_no),
                    post_flag,
                    post_type,
                    post_address,
                    post_zip,
                    fax_no,
                    mail_address,
                    nvl(post_cont_code,chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0))
			INTO :sTdCustPost.sContractNo  ,
                 :sTdCustPost.sPostFlag    ,
                 :sTdCustPost.sPostType    ,
                 :sTdCustPost.sPostAddress ,
                 :sTdCustPost.sPostZip     ,
                 :sTdCustPost.sFaxNo       ,
                 :sTdCustPost.sMailAddress ,
                 :sTdCustPost.sPostContCode,
                 :sTdCustPost.sOpTime
			FROM dCustPost
			WHERE contract_no = :i_contract_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustPost.sContractNo  );
	Coltrim(sTdCustPost.sPostFlag    );
	Coltrim(sTdCustPost.sPostType    );
	Coltrim(sTdCustPost.sPostAddress );
	Coltrim(sTdCustPost.sPostZip     );
	Coltrim(sTdCustPost.sFaxNo       );
	Coltrim(sTdCustPost.sMailAddress );
	Coltrim(sTdCustPost.sPostContCode);
	Coltrim(sTdCustPost.sOpTime      );

	strcpy(v_table_name,"DCUSTPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",     ORDERDATAFORMAT_NUMBER,i_contract_no);

	OrderSetDataItem(&vMsgBodyType,"contract_no"   ,ORDERDATAFORMAT_NUMBER, sTdCustPost.sContractNo  );
	OrderSetDataItem(&vMsgBodyType,"post_flag"     ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostFlag    );
	OrderSetDataItem(&vMsgBodyType,"post_type"     ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostType    );
	OrderSetDataItem(&vMsgBodyType,"post_address"  ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostAddress );
	OrderSetDataItem(&vMsgBodyType,"post_zip"      ,ORDERDATAFORMAT_STRING, sTdCustPost.sPostZip     );
	OrderSetDataItem(&vMsgBodyType,"fax_no"        ,ORDERDATAFORMAT_STRING, sTdCustPost.sFaxNo       );
	OrderSetDataItem(&vMsgBodyType,"mail_address"  ,ORDERDATAFORMAT_STRING, sTdCustPost.sMailAddress );
	OrderSetDataItem(&vMsgBodyType,"post_cont_code",ORDERDATAFORMAT_STRING, sTdCustPost.sPostContCode);
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE,	sTdCustPost.sOpTime      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertAssuMsg(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdAssuMsg
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdAssuMsg	sTdAssuMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdAssuMsg.sAssureNo);
	Coltrim(sTdAssuMsg.sAssureName);
	Coltrim(sTdAssuMsg.sIdType);
	Coltrim(sTdAssuMsg.sAssureId);
	Coltrim(sTdAssuMsg.sAssurePhone);
	Coltrim(sTdAssuMsg.sAssureZip);
	Coltrim(sTdAssuMsg.sAssureAddress);
	Coltrim(sTdAssuMsg.sAssureNum);

	EXEC SQL INSERT INTO dAssuMsg(
                    assure_no     ,
                    assure_name   ,
                    id_type       ,
                    assure_id     ,
                    assure_phone  ,
                    assure_zip    ,
                    assure_address,
                    assure_num)
		     VALUES(
		            to_number(:sTdAssuMsg.sAssureNo),
                    :sTdAssuMsg.sAssureName   ,
                    :sTdAssuMsg.sIdType       ,
                    :sTdAssuMsg.sAssureId     ,
                    :sTdAssuMsg.sAssurePhone  ,
                    :sTdAssuMsg.sAssureZip    ,
                    :sTdAssuMsg.sAssureAddress,
                    to_number(:sTdAssuMsg.sAssureNum)
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DASSUMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "assure_no"     , ORDERDATAFORMAT_NUMBER, sTdAssuMsg.sAssureNo);
	OrderSetDataItem(&vMsgBodyType, "assure_name"   , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureName);
	OrderSetDataItem(&vMsgBodyType, "id_type"       , ORDERDATAFORMAT_STRING, sTdAssuMsg.sIdType);
	OrderSetDataItem(&vMsgBodyType, "assure_id"     , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureId);
	OrderSetDataItem(&vMsgBodyType, "assure_phone"  , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssurePhone);
	OrderSetDataItem(&vMsgBodyType, "assure_zip"    , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureZip);
	OrderSetDataItem(&vMsgBodyType, "assure_address", ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureAddress);
	OrderSetDataItem(&vMsgBodyType, "assure_num"    , ORDERDATAFORMAT_NUMBER, sTdAssuMsg.sAssureNum);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteAssuMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_assure_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_assure_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dAssuMsg a WHERE a.assure_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DASSUMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"assure_no",ORDERDATAFORMAT_NUMBER,i_assure_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateAssuMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_assure_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_assure_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdAssuMsg	sTdAssuMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dAssuMsg a SET %s WHERE a.assure_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(assure_no)     ,
                    assure_name   ,
                    id_type       ,
                    assure_id     ,
                    nvl(assure_phone,chr(0))  ,
                    nvl(assure_zip,chr(0))    ,
                    nvl(assure_address,chr(0)),
                    to_char(assure_num)
			INTO :sTdAssuMsg.sAssureNo     ,
                 :sTdAssuMsg.sAssureName   ,
                 :sTdAssuMsg.sIdType       ,
                 :sTdAssuMsg.sAssureId     ,
                 :sTdAssuMsg.sAssurePhone  ,
                 :sTdAssuMsg.sAssureZip    ,
                 :sTdAssuMsg.sAssureAddress,
                 :sTdAssuMsg.sAssureNum
			FROM dAssuMsg
			WHERE assure_no = :i_assure_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdAssuMsg.sAssureNo     );
	Coltrim(sTdAssuMsg.sAssureName   );
	Coltrim(sTdAssuMsg.sIdType       );
	Coltrim(sTdAssuMsg.sAssureId     );
	Coltrim(sTdAssuMsg.sAssurePhone  );
	Coltrim(sTdAssuMsg.sAssureZip    );
	Coltrim(sTdAssuMsg.sAssureAddress);
	Coltrim(sTdAssuMsg.sAssureNum    );

	strcpy(v_table_name,"DASSUMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"assure_no",     ORDERDATAFORMAT_NUMBER,i_assure_no);

	OrderSetDataItem(&vMsgBodyType, "assure_no"     , ORDERDATAFORMAT_NUMBER, sTdAssuMsg.sAssureNo);
	OrderSetDataItem(&vMsgBodyType, "assure_name"   , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureName);
	OrderSetDataItem(&vMsgBodyType, "id_type"       , ORDERDATAFORMAT_STRING, sTdAssuMsg.sIdType);
	OrderSetDataItem(&vMsgBodyType, "assure_id"     , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureId);
	OrderSetDataItem(&vMsgBodyType, "assure_phone"  , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssurePhone);
	OrderSetDataItem(&vMsgBodyType, "assure_zip"    , ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureZip);
	OrderSetDataItem(&vMsgBodyType, "assure_address", ORDERDATAFORMAT_STRING, sTdAssuMsg.sAssureAddress);
	OrderSetDataItem(&vMsgBodyType, "assure_num"    , ORDERDATAFORMAT_NUMBER, sTdAssuMsg.sAssureNum);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertConUserMsgDead(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdConUserMsgDead
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConUserMsgDead tdConUserMsgDead;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdConUserMsgDead.sIdNo);
	Coltrim(tdConUserMsgDead.sContractNo);
	Coltrim(tdConUserMsgDead.sBillOrder);
	Coltrim(tdConUserMsgDead.sSerialNo);
	Coltrim(tdConUserMsgDead.sPayOrder);
	Coltrim(tdConUserMsgDead.sBeginYmd);
	Coltrim(tdConUserMsgDead.sBeginTm);
	Coltrim(tdConUserMsgDead.sEndYmd);
	Coltrim(tdConUserMsgDead.sEndTm);
	Coltrim(tdConUserMsgDead.sLimitPay);
	Coltrim(tdConUserMsgDead.sRateFlag);
	Coltrim(tdConUserMsgDead.sStopFlag);

	EXEC SQL INSERT INTO dConUserMsgDead(id_no, contract_no, bill_order, serial_no,
	                                 pay_order, begin_ymd, begin_tm, end_ymd,
	                                 end_tm, limit_pay, rate_flag, stop_flag)
		     				  VALUES(to_number(:tdConUserMsgDead.sIdNo),
		     				  		 to_number(:tdConUserMsgDead.sContractNo),
		     	                     to_number(:tdConUserMsgDead.sBillOrder),
		     	                     to_number(:tdConUserMsgDead.sSerialNo),
		     	    				 to_number(:tdConUserMsgDead.sPayOrder),
		     	    				 :tdConUserMsgDead.sBeginYmd, :tdConUserMsgDead.sBeginTm,
		     	    				 :tdConUserMsgDead.sEndYmd, :tdConUserMsgDead.sEndTm,
		     	    				 to_number(:tdConUserMsgDead.sLimitPay),
		     	    				 :tdConUserMsgDead.sRateFlag, :tdConUserMsgDead.sStopFlag
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DCONUSERMSGDEAD");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no",	ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "bill_order",	ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sBillOrder);
	OrderSetDataItem(&vMsgBodyType, "serial_no",	ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sSerialNo);
	OrderSetDataItem(&vMsgBodyType, "pay_order",	ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sPayOrder);
	OrderSetDataItem(&vMsgBodyType, "begin_ymd",	ORDERDATAFORMAT_STRING, tdConUserMsgDead.sBeginYmd);
	OrderSetDataItem(&vMsgBodyType, "begin_tm",		ORDERDATAFORMAT_STRING, tdConUserMsgDead.sBeginTm);
	OrderSetDataItem(&vMsgBodyType, "end_ymd",		ORDERDATAFORMAT_STRING, tdConUserMsgDead.sEndYmd);
	OrderSetDataItem(&vMsgBodyType, "end_tm",		ORDERDATAFORMAT_STRING, tdConUserMsgDead.sEndTm);
	OrderSetDataItem(&vMsgBodyType, "limit_pay",	ORDERDATAFORMAT_NUMBER, tdConUserMsgDead.sLimitPay);
	OrderSetDataItem(&vMsgBodyType, "rate_flag",	ORDERDATAFORMAT_STRING, tdConUserMsgDead.sRateFlag);
	OrderSetDataItem(&vMsgBodyType, "stop_flag",	ORDERDATAFORMAT_STRING, tdConUserMsgDead.sStopFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}


int OrderInsertCustPresent(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustPresent
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustPresent	sTdCustPresent;
{
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustPresent.sIdNo);
	Coltrim(sTdCustPresent.sPhoneNo);
	Coltrim(sTdCustPresent.sBelongCode);
	Coltrim(sTdCustPresent.sFavCode);
	Coltrim(sTdCustPresent.sBunchNo);
	Coltrim(sTdCustPresent.sPrepayFee);
	Coltrim(sTdCustPresent.sFavMoney);
	Coltrim(sTdCustPresent.sMonthFav);
	Coltrim(sTdCustPresent.sMonthNum);
	Coltrim(sTdCustPresent.sBeginTime);
	Coltrim(sTdCustPresent.sEndTime);
	Coltrim(sTdCustPresent.sFavFee);
	Coltrim(sTdCustPresent.sLoginAccept);
	Coltrim(sTdCustPresent.sLoginNo);
	Coltrim(sTdCustPresent.sOpenTime);
	Coltrim(sTdCustPresent.sTotalDate);
	Coltrim(sTdCustPresent.sOpTime);
	Coltrim(sTdCustPresent.sOpCode);
	Coltrim(sTdCustPresent.sContractNo);
	Coltrim(sTdCustPresent.sChannel);
	Coltrim(sTdCustPresent.sPresTotalDate);
	Coltrim(sTdCustPresent.sSellCode);
	Coltrim(sTdCustPresent.sImeibindMonths);
	Coltrim(sTdCustPresent.sOtherphoneNo);
	Coltrim(sTdCustPresent.sOtheridNo);
	Coltrim(sTdCustPresent.sGroupId);
	Coltrim(sTdCustPresent.sFavType);
	Coltrim(sTdCustPresent.sActId);
	Coltrim(sTdCustPresent.sPackageId);

	EXEC SQL INSERT INTO dCustPresent(ID_NO, PHONE_NO, BELONG_CODE, FAV_CODE, BUNCH_NO,
	                                  PREPAY_FEE, FAV_MONEY, MONTH_FAV, MONTH_NUM, BEGIN_TIME,
	                                  END_TIME, FAV_FEE, LOGIN_ACCEPT, LOGIN_NO, OPEN_TIME,
	                                  TOTAL_DATE, OP_TIME, OP_CODE, CONTRACT_NO, CHANNEL,
	                                  PRES_TOTAL_DATE, SELL_CODE, IMEIBIND_MONTHS, OTHERPHONE_NO, OTHERID_NO,
	                                  GROUP_ID,fav_type,ACT_ID,PACKAGE_ID)
		VALUES(
		       to_number(:sTdCustPresent.sIdNo)                         ,
               :sTdCustPresent.sPhoneNo                                 ,
               :sTdCustPresent.sBelongCode                              ,
               :sTdCustPresent.sFavCode                                 ,
               :sTdCustPresent.sBunchNo                                 ,
               to_number(:sTdCustPresent.sPrepayFee)                    ,
               to_number(:sTdCustPresent.sFavMoney)                     ,
               to_number(:sTdCustPresent.sMonthFav)                     ,
               to_number(:sTdCustPresent.sMonthNum)                     ,
               to_date(:sTdCustPresent.sBeginTime,'yyyymmdd hh24:mi:ss'),
               to_date(:sTdCustPresent.sEndTime,'yyyymmdd hh24:mi:ss')  ,
               to_number(:sTdCustPresent.sFavFee)                       ,
               to_number(:sTdCustPresent.sLoginAccept)                  ,
               :sTdCustPresent.sLoginNo                                 ,
               to_date(:sTdCustPresent.sOpenTime,'yyyymmdd hh24:mi:ss') ,
               to_number(:sTdCustPresent.sTotalDate)                    ,
               to_date(:sTdCustPresent.sOpTime,'yyyymmdd hh24:mi:ss')   ,
               :sTdCustPresent.sOpCode                                  ,
               to_number(:sTdCustPresent.sContractNo)                   ,
               nvl(:sTdCustPresent.sChannel,'None')                     ,
               to_number(:sTdCustPresent.sPresTotalDate)                ,
               :sTdCustPresent.sSellCode                                ,
               to_number(:sTdCustPresent.sImeibindMonths)               ,
               :sTdCustPresent.sOtherphoneNo                            ,
               to_number(:sTdCustPresent.sOtheridNo)                    ,
               :sTdCustPresent.sGroupId									,
               to_number(:sTdCustPresent.sFavType)						,
               :sTdCustPresent.sActId									,
               :sTdCustPresent.sPackageId
               	);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTPRESENT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sIdNo          );
	OrderSetDataItem(&vMsgBodyType,"phone_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType,"belong_code",    ORDERDATAFORMAT_STRING,  sTdCustPresent.sBelongCode    );
	OrderSetDataItem(&vMsgBodyType,"fav_code",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sFavCode       );
	OrderSetDataItem(&vMsgBodyType,"bunch_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sBunchNo       );
	OrderSetDataItem(&vMsgBodyType,"prepay_fee",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sPrepayFee     );
	OrderSetDataItem(&vMsgBodyType,"fav_money",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sFavMoney      );
	OrderSetDataItem(&vMsgBodyType,"month_fav",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sMonthFav      );
	OrderSetDataItem(&vMsgBodyType,"month_num",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sMonthNum      );
	OrderSetDataItem(&vMsgBodyType,"begin_time",     ORDERDATAFORMAT_DATE,    sTdCustPresent.sBeginTime     );
	OrderSetDataItem(&vMsgBodyType,"end_time",       ORDERDATAFORMAT_DATE,    sTdCustPresent.sEndTime       );
	OrderSetDataItem(&vMsgBodyType,"fav_fee",        ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sFavFee        );
	OrderSetDataItem(&vMsgBodyType,"login_accept",   ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sLoginAccept   );
	OrderSetDataItem(&vMsgBodyType,"login_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType,"open_time",      ORDERDATAFORMAT_DATE,    sTdCustPresent.sOpenTime      );
	OrderSetDataItem(&vMsgBodyType,"total_date",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sTotalDate     );
	OrderSetDataItem(&vMsgBodyType,"op_time",        ORDERDATAFORMAT_DATE,    sTdCustPresent.sOpTime        );
	OrderSetDataItem(&vMsgBodyType,"op_code",        ORDERDATAFORMAT_STRING,  sTdCustPresent.sOpCode        );
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sContractNo    );
	OrderSetDataItem(&vMsgBodyType,"channel",        ORDERDATAFORMAT_STRING,  sTdCustPresent.sChannel       );
	OrderSetDataItem(&vMsgBodyType,"pres_total_date",ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sPresTotalDate );
	OrderSetDataItem(&vMsgBodyType,"sell_code",      ORDERDATAFORMAT_STRING,  sTdCustPresent.sSellCode      );
	OrderSetDataItem(&vMsgBodyType,"imeibind_months",ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sImeibindMonths);
	OrderSetDataItem(&vMsgBodyType,"otherphone_no",  ORDERDATAFORMAT_STRING,  sTdCustPresent.sOtherphoneNo  );
	OrderSetDataItem(&vMsgBodyType,"otherid_no",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sOtheridNo     );
	OrderSetDataItem(&vMsgBodyType,"group_id",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sGroupId       );
	OrderSetDataItem(&vMsgBodyType,"fav_type",  	 ORDERDATAFORMAT_STRING,  sTdCustPresent.sFavType  		);
	OrderSetDataItem(&vMsgBodyType,"ACT_ID",     	 ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sActId     	);
	OrderSetDataItem(&vMsgBodyType,"PACKAGE_ID",     ORDERDATAFORMAT_STRING,  sTdCustPresent.sPackageId		);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustPresent(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_bunch_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_bunch_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustPresent a WHERE a.bunch_no=rpad(:NG_Param0,15,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTPRESENT");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"bunch_no",ORDERDATAFORMAT_NUMBER,i_bunch_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustPresent(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_bunch_no_old,i_bunch_no_new,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_bunch_no_old;
char *i_bunch_no_new;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustPresent	sTdCustPresent;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	Coltrim(i_bunch_no_old);
	Coltrim(i_bunch_no_new);

	sprintf(v_sql_buff,"UPDATE dCustPresent a SET %s WHERE a.bunch_no=rpad(:NG_Param0,15,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(ID_NO), PHONE_NO, BELONG_CODE, FAV_CODE, BUNCH_NO,
	                to_char(PREPAY_FEE), to_char(FAV_MONEY), to_char(MONTH_FAV), to_char(MONTH_NUM),
	                to_char(BEGIN_TIME,'yyyymmdd hh24:mi:ss'), to_char(END_TIME,'yyyymmdd hh24:mi:ss'),
	                to_char(FAV_FEE), to_char(LOGIN_ACCEPT), LOGIN_NO,
	                to_char(OPEN_TIME,'yyyymmdd hh24:mi:ss'), to_char(TOTAL_DATE), to_char(OP_TIME,'yyyymmdd hh24:mi:ss'),
	                OP_CODE, to_char(CONTRACT_NO), CHANNEL, nvl(to_char(PRES_TOTAL_DATE),chr(0)),
	                nvl(SELL_CODE,chr(0)), nvl(to_char(IMEIBIND_MONTHS),chr(0)), nvl(OTHERPHONE_NO,chr(0)),
	                nvl(to_char(OTHERID_NO),chr(0)), nvl(GROUP_ID,chr(0)),to_char(nvl(fav_type,0)),nvl(ACT_ID,chr(0)),nvl(PACKAGE_ID,chr(0))

			INTO    :sTdCustPresent.sIdNo           ,
                    :sTdCustPresent.sPhoneNo        ,
                    :sTdCustPresent.sBelongCode     ,
                    :sTdCustPresent.sFavCode        ,
                    :sTdCustPresent.sBunchNo        ,
                    :sTdCustPresent.sPrepayFee      ,
                    :sTdCustPresent.sFavMoney       ,
                    :sTdCustPresent.sMonthFav       ,
                    :sTdCustPresent.sMonthNum       ,
                    :sTdCustPresent.sBeginTime      ,
                    :sTdCustPresent.sEndTime        ,
                    :sTdCustPresent.sFavFee         ,
                    :sTdCustPresent.sLoginAccept    ,
                    :sTdCustPresent.sLoginNo        ,
                    :sTdCustPresent.sOpenTime       ,
                    :sTdCustPresent.sTotalDate      ,
                    :sTdCustPresent.sOpTime         ,
                    :sTdCustPresent.sOpCode         ,
                    :sTdCustPresent.sContractNo     ,
                    :sTdCustPresent.sChannel        ,
                    :sTdCustPresent.sPresTotalDate  ,
                    :sTdCustPresent.sSellCode       ,
                    :sTdCustPresent.sImeibindMonths ,
                    :sTdCustPresent.sOtherphoneNo   ,
                    :sTdCustPresent.sOtheridNo      ,
                    :sTdCustPresent.sGroupId		,
                    :sTdCustPresent.sFavType		,  	
					:sTdCustPresent.sActId 			,    
					:sTdCustPresent.sPackageId	

			FROM dCustPresent
			WHERE bunch_no = :i_bunch_no_new;

	if (SQLCODE!=SQLOK)
		return -500037;

    Coltrim(sTdCustPresent.sIdNo          );
    Coltrim(sTdCustPresent.sPhoneNo       );
    Coltrim(sTdCustPresent.sBelongCode    );
    Coltrim(sTdCustPresent.sFavCode       );
    Coltrim(sTdCustPresent.sBunchNo       );
    Coltrim(sTdCustPresent.sPrepayFee     );
    Coltrim(sTdCustPresent.sFavMoney      );
    Coltrim(sTdCustPresent.sMonthFav      );
    Coltrim(sTdCustPresent.sMonthNum      );
    Coltrim(sTdCustPresent.sBeginTime     );
    Coltrim(sTdCustPresent.sEndTime       );
    Coltrim(sTdCustPresent.sFavFee        );
    Coltrim(sTdCustPresent.sLoginAccept   );
    Coltrim(sTdCustPresent.sLoginNo       );
    Coltrim(sTdCustPresent.sOpenTime      );
    Coltrim(sTdCustPresent.sTotalDate     );
    Coltrim(sTdCustPresent.sOpTime        );
    Coltrim(sTdCustPresent.sOpCode        );
    Coltrim(sTdCustPresent.sContractNo    );
    Coltrim(sTdCustPresent.sChannel       );
    Coltrim(sTdCustPresent.sPresTotalDate );
    Coltrim(sTdCustPresent.sSellCode      );
    Coltrim(sTdCustPresent.sImeibindMonths);
    Coltrim(sTdCustPresent.sOtherphoneNo  );
    Coltrim(sTdCustPresent.sOtheridNo     );
    Coltrim(sTdCustPresent.sGroupId       );
    Coltrim(sTdCustPresent.sFavType		  );
	Coltrim(sTdCustPresent.sActId		  );
	Coltrim(sTdCustPresent.sPackageId	  );

	strcpy(v_table_name,"DCUSTPRESENT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"bunch_no",ORDERDATAFORMAT_NUMBER,i_bunch_no_old);

	OrderSetDataItem(&vMsgBodyType,"id_no",          ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sIdNo          );
	OrderSetDataItem(&vMsgBodyType,"phone_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType,"belong_code",    ORDERDATAFORMAT_STRING,  sTdCustPresent.sBelongCode    );
	OrderSetDataItem(&vMsgBodyType,"fav_code",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sFavCode       );
	OrderSetDataItem(&vMsgBodyType,"bunch_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sBunchNo       );
	OrderSetDataItem(&vMsgBodyType,"prepay_fee",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sPrepayFee     );
	OrderSetDataItem(&vMsgBodyType,"fav_money",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sFavMoney      );
	OrderSetDataItem(&vMsgBodyType,"month_fav",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sMonthFav      );
	OrderSetDataItem(&vMsgBodyType,"month_num",      ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sMonthNum      );
	OrderSetDataItem(&vMsgBodyType,"begin_time",     ORDERDATAFORMAT_DATE,    sTdCustPresent.sBeginTime     );
	OrderSetDataItem(&vMsgBodyType,"end_time",       ORDERDATAFORMAT_DATE,    sTdCustPresent.sEndTime       );
	OrderSetDataItem(&vMsgBodyType,"fav_fee",        ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sFavFee        );
	OrderSetDataItem(&vMsgBodyType,"login_accept",   ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sLoginAccept   );
	OrderSetDataItem(&vMsgBodyType,"login_no",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType,"open_time",      ORDERDATAFORMAT_DATE,    sTdCustPresent.sOpenTime      );
	OrderSetDataItem(&vMsgBodyType,"total_date",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sTotalDate     );
	OrderSetDataItem(&vMsgBodyType,"op_time",        ORDERDATAFORMAT_DATE,    sTdCustPresent.sOpTime        );
	OrderSetDataItem(&vMsgBodyType,"op_code",        ORDERDATAFORMAT_STRING,  sTdCustPresent.sOpCode        );
	OrderSetDataItem(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sContractNo    );
	OrderSetDataItem(&vMsgBodyType,"channel",        ORDERDATAFORMAT_STRING,  sTdCustPresent.sChannel       );
	OrderSetDataItem(&vMsgBodyType,"pres_total_date",ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sPresTotalDate );
	OrderSetDataItem(&vMsgBodyType,"sell_code",      ORDERDATAFORMAT_STRING,  sTdCustPresent.sSellCode      );
	OrderSetDataItem(&vMsgBodyType,"imeibind_months",ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sImeibindMonths);
	OrderSetDataItem(&vMsgBodyType,"otherphone_no",  ORDERDATAFORMAT_STRING,  sTdCustPresent.sOtherphoneNo  );
	OrderSetDataItem(&vMsgBodyType,"otherid_no",     ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sOtheridNo     );
	OrderSetDataItem(&vMsgBodyType,"group_id",       ORDERDATAFORMAT_STRING,  sTdCustPresent.sGroupId       );
	OrderSetDataItem(&vMsgBodyType,"fav_type",  	 ORDERDATAFORMAT_STRING,  sTdCustPresent.sFavType  		);
	OrderSetDataItem(&vMsgBodyType,"ACT_ID",     	 ORDERDATAFORMAT_NUMBER,  sTdCustPresent.sActId     	);
	OrderSetDataItem(&vMsgBodyType,"PACKAGE_ID",     ORDERDATAFORMAT_STRING,  sTdCustPresent.sPackageId		);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertGCardStore(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGCardStore
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGCardStore	sTdGCardStore;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGCardStore.sPassWord);
	Coltrim(sTdGCardStore.sCardNo);
	Coltrim(sTdGCardStore.sCardFee);
	Coltrim(sTdGCardStore.sStartTime);
	Coltrim(sTdGCardStore.sExpireTime);
	Coltrim(sTdGCardStore.sBelCode);
	Coltrim(sTdGCardStore.sCardStatus);
	Coltrim(sTdGCardStore.sLoginNo);
	Coltrim(sTdGCardStore.sOprCode);
	Coltrim(sTdGCardStore.sPhoneNo);
	Coltrim(sTdGCardStore.sOpTime);
	Coltrim(sTdGCardStore.sUpdateLogin);
	Coltrim(sTdGCardStore.sDgcardstore);

	EXEC SQL INSERT INTO dGCardStore(PASS_WORD, CARD_NO, CARD_FEE, START_TIME, EXPIRE_TIME,
	                                 BEL_CODE, CARD_STATUS, LOGIN_NO, OPR_CODE, PHONE_NO,
	                                 OP_TIME, UPDATE_LOGIN, DGCARDSTORE)
		VALUES(:sTdGCardStore.sPassWord,
               :sTdGCardStore.sCardNo,
               to_number(:sTdGCardStore.sCardFee),
               :sTdGCardStore.sStartTime,
               to_date(:sTdGCardStore.sExpireTime,'yyyymmdd hh24:mi:ss'),
               :sTdGCardStore.sBelCode,
               :sTdGCardStore.sCardStatus,
               :sTdGCardStore.sLoginNo,
               :sTdGCardStore.sOprCode,
               :sTdGCardStore.sPhoneNo,
               to_date(:sTdGCardStore.sOpTime,'yyyymmdd hh24:mi:ss'),
               :sTdGCardStore.sUpdateLogin,
               :sTdGCardStore.sDgcardstore
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGCARDSTORE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"pass_word"   , ORDERDATAFORMAT_STRING , sTdGCardStore.sPassWord   );
	OrderSetDataItem(&vMsgBodyType,"card_no"     , ORDERDATAFORMAT_STRING , sTdGCardStore.sCardNo     );
	OrderSetDataItem(&vMsgBodyType,"card_fee"    , ORDERDATAFORMAT_NUMBER , sTdGCardStore.sCardFee    );
	OrderSetDataItem(&vMsgBodyType,"start_time"  , ORDERDATAFORMAT_STRING , sTdGCardStore.sStartTime  );
	OrderSetDataItem(&vMsgBodyType,"expire_time" , ORDERDATAFORMAT_DATE   , sTdGCardStore.sExpireTime );
	OrderSetDataItem(&vMsgBodyType,"bel_code"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sBelCode    );
	OrderSetDataItem(&vMsgBodyType,"card_status" , ORDERDATAFORMAT_STRING , sTdGCardStore.sCardStatus );
	OrderSetDataItem(&vMsgBodyType,"login_no"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"opr_code"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sOprCode    );
	OrderSetDataItem(&vMsgBodyType,"phone_no"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType,"op_time"     , ORDERDATAFORMAT_DATE   , sTdGCardStore.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"update_login", ORDERDATAFORMAT_STRING , sTdGCardStore.sUpdateLogin);
	OrderSetDataItem(&vMsgBodyType,"dgcardstore" , ORDERDATAFORMAT_STRING , sTdGCardStore.sDgcardstore);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGCardStore(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGCardStoreIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGCardStore a WHERE a.pass_word=rpad(:NG_Param0,38,' ') \
	        and a.card_no=rpad(:NG_Param1,20,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGCARDSTORE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"pass_word",      ORDERDATAFORMAT_STRING,oldIndex.sPassWord);
	OrderSetPrimaryKey(&vMsgBodyType,"card_no",        ORDERDATAFORMAT_STRING,oldIndex.sCardNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGCardStore(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGCardStoreIndex oldIndex;
TdGCardStoreIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGCardStore	sTdGCardStore;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGCardStore a SET %s WHERE a.pass_word=rpad(:NG_Param0,38,' ') and a.card_no=rpad(:NG_Param1,20,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT pass_word, card_no, to_char(card_fee), start_time,
	                to_char(expire_time,'yyyymmdd hh24:mi:ss'), bel_code,
	                card_status, login_no, nvl(opr_code,chr(0)), nvl(phone_no,chr(0)), nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)),
	                nvl(update_login,chr(0)), nvl(dgcardstore,chr(0))
			   INTO :sTdGCardStore.sPassWord,
                    :sTdGCardStore.sCardNo,
                    :sTdGCardStore.sCardFee,
                    :sTdGCardStore.sStartTime,
                    :sTdGCardStore.sExpireTime,
                    :sTdGCardStore.sBelCode,
                    :sTdGCardStore.sCardStatus,
                    :sTdGCardStore.sLoginNo,
                    :sTdGCardStore.sOprCode,
                    :sTdGCardStore.sPhoneNo,
                    :sTdGCardStore.sOpTime,
                    :sTdGCardStore.sUpdateLogin,
                    :sTdGCardStore.sDgcardstore
			   FROM dGCardStore
			  WHERE pass_word = :newIndex.sPassWord and card_no=:newIndex.sCardNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGCardStore.sPassWord   );
	Coltrim(sTdGCardStore.sCardNo     );
	Coltrim(sTdGCardStore.sCardFee    );
	Coltrim(sTdGCardStore.sStartTime  );
	Coltrim(sTdGCardStore.sExpireTime );
	Coltrim(sTdGCardStore.sBelCode    );
	Coltrim(sTdGCardStore.sCardStatus );
	Coltrim(sTdGCardStore.sLoginNo    );
	Coltrim(sTdGCardStore.sOprCode    );
	Coltrim(sTdGCardStore.sPhoneNo    );
	Coltrim(sTdGCardStore.sOpTime     );
	Coltrim(sTdGCardStore.sUpdateLogin);
	Coltrim(sTdGCardStore.sDgcardstore);


	strcpy(v_table_name,"DGCARDSTORE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"pass_word",      ORDERDATAFORMAT_STRING,oldIndex.sPassWord);
	OrderSetPrimaryKey(&vMsgBodyType,"card_no",        ORDERDATAFORMAT_STRING,oldIndex.sCardNo);

	OrderSetDataItem(&vMsgBodyType,"pass_word"   , ORDERDATAFORMAT_STRING , sTdGCardStore.sPassWord   );
	OrderSetDataItem(&vMsgBodyType,"card_no"     , ORDERDATAFORMAT_STRING , sTdGCardStore.sCardNo     );
	OrderSetDataItem(&vMsgBodyType,"card_fee"    , ORDERDATAFORMAT_NUMBER , sTdGCardStore.sCardFee    );
	OrderSetDataItem(&vMsgBodyType,"start_time"  , ORDERDATAFORMAT_STRING , sTdGCardStore.sStartTime  );
	OrderSetDataItem(&vMsgBodyType,"expire_time" , ORDERDATAFORMAT_DATE   , sTdGCardStore.sExpireTime );
	OrderSetDataItem(&vMsgBodyType,"bel_code"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sBelCode    );
	OrderSetDataItem(&vMsgBodyType,"card_status" , ORDERDATAFORMAT_STRING , sTdGCardStore.sCardStatus );
	OrderSetDataItem(&vMsgBodyType,"login_no"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"opr_code"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sOprCode    );
	OrderSetDataItem(&vMsgBodyType,"phone_no"    , ORDERDATAFORMAT_STRING , sTdGCardStore.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType,"op_time"     , ORDERDATAFORMAT_DATE   , sTdGCardStore.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"update_login", ORDERDATAFORMAT_STRING , sTdGCardStore.sUpdateLogin);
	OrderSetDataItem(&vMsgBodyType,"dgcardstore" , ORDERDATAFORMAT_STRING , sTdGCardStore.sDgcardstore);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCCardStore(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCCardStore
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCCardStore	sTdCCardStore;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCCardStore.sPassWord);
	Coltrim(sTdCCardStore.sCardNo);
	Coltrim(sTdCCardStore.sCardFee);
	Coltrim(sTdCCardStore.sStartTime);
	Coltrim(sTdCCardStore.sExpireTime);
	Coltrim(sTdCCardStore.sBelCode);
	Coltrim(sTdCCardStore.sCardStatus);
	Coltrim(sTdCCardStore.sLoginNo);
	Coltrim(sTdCCardStore.sOprCode);
	Coltrim(sTdCCardStore.sPhoneNo);
	Coltrim(sTdCCardStore.sOpTime);
	Coltrim(sTdCCardStore.sUpdateLogin);

	EXEC SQL INSERT INTO dCCardStore(PASS_WORD, CARD_NO, CARD_FEE, START_TIME, EXPIRE_TIME,
	                                 BEL_CODE, CARD_STATUS, LOGIN_NO, OPR_CODE, PHONE_NO, OP_TIME, UPDATE_LOGIN)
		VALUES(:sTdCCardStore.sPassWord,
               :sTdCCardStore.sCardNo,
               to_number(:sTdCCardStore.sCardFee),
               :sTdCCardStore.sStartTime,
               to_date(:sTdCCardStore.sExpireTime,'yyyymmdd hh24:mi:ss'),
               :sTdCCardStore.sBelCode,
               :sTdCCardStore.sCardStatus,
               :sTdCCardStore.sLoginNo,
               :sTdCCardStore.sOprCode,
               :sTdCCardStore.sPhoneNo,
               to_date(:sTdCCardStore.sOpTime,'yyyymmdd hh24:mi:ss'),
               :sTdCCardStore.sUpdateLogin
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCCARDSTORE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "pass_word"   , ORDERDATAFORMAT_STRING , sTdCCardStore.sPassWord   );
	OrderSetDataItem(&vMsgBodyType, "card_no"     , ORDERDATAFORMAT_STRING , sTdCCardStore.sCardNo     );
	OrderSetDataItem(&vMsgBodyType, "card_fee"    , ORDERDATAFORMAT_NUMBER , sTdCCardStore.sCardFee    );
	OrderSetDataItem(&vMsgBodyType, "start_time"  , ORDERDATAFORMAT_STRING , sTdCCardStore.sStartTime  );
	OrderSetDataItem(&vMsgBodyType, "expire_time" , ORDERDATAFORMAT_DATE   , sTdCCardStore.sExpireTime );
	OrderSetDataItem(&vMsgBodyType, "bel_code"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sBelCode    );
	OrderSetDataItem(&vMsgBodyType, "card_status" , ORDERDATAFORMAT_STRING , sTdCCardStore.sCardStatus );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "opr_code"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sOprCode    );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE   , sTdCCardStore.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "update_login", ORDERDATAFORMAT_STRING , sTdCCardStore.sUpdateLogin);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCCardStore(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCCardStoreIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCCardStore a WHERE a.pass_word=rpad(:NG_Param0,38,' ') \
	        and a.card_no=rpad(:NG_Param1,20,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCCARDSTORE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"pass_word",      ORDERDATAFORMAT_STRING,oldIndex.sPassWord);
	OrderSetPrimaryKey(&vMsgBodyType,"card_no",        ORDERDATAFORMAT_STRING,oldIndex.sCardNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCCardStore(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCCardStoreIndex oldIndex;
TdCCardStoreIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCCardStore	sTdCCardStore;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCCardStore a SET %s WHERE a.pass_word=rpad(:NG_Param0,38,' ') and a.card_no=rpad(:NG_Param1,20,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT pass_word,
                    card_no,
                    to_char(card_fee),
                    start_time,
                    to_char(expire_time,'yyyymmdd hh24:mi:ss'),
                    bel_code,
                    card_status,
                    login_no,
                    nvl(opr_code,chr(0)),
                    nvl(phone_no,chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(update_login,chr(0))
			   INTO :sTdCCardStore.sPassWord,
                    :sTdCCardStore.sCardNo,
                    :sTdCCardStore.sCardFee,
                    :sTdCCardStore.sStartTime,
                    :sTdCCardStore.sExpireTime,
                    :sTdCCardStore.sBelCode,
                    :sTdCCardStore.sCardStatus,
                    :sTdCCardStore.sLoginNo,
                    :sTdCCardStore.sOprCode,
                    :sTdCCardStore.sPhoneNo,
                    :sTdCCardStore.sOpTime,
                    :sTdCCardStore.sUpdateLogin
			   FROM dCCardStore
			  WHERE pass_word = :newIndex.sPassWord and card_no=:newIndex.sCardNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCCardStore.sPassWord   );
	Coltrim(sTdCCardStore.sCardNo     );
	Coltrim(sTdCCardStore.sCardFee    );
	Coltrim(sTdCCardStore.sStartTime  );
	Coltrim(sTdCCardStore.sExpireTime );
	Coltrim(sTdCCardStore.sBelCode    );
	Coltrim(sTdCCardStore.sCardStatus );
	Coltrim(sTdCCardStore.sLoginNo    );
	Coltrim(sTdCCardStore.sOprCode    );
	Coltrim(sTdCCardStore.sPhoneNo    );
	Coltrim(sTdCCardStore.sOpTime     );
	Coltrim(sTdCCardStore.sUpdateLogin);


	strcpy(v_table_name,"DCCARDSTORE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"pass_word",      ORDERDATAFORMAT_STRING,oldIndex.sPassWord);
	OrderSetPrimaryKey(&vMsgBodyType,"card_no",        ORDERDATAFORMAT_STRING,oldIndex.sCardNo);

	OrderSetDataItem(&vMsgBodyType, "pass_word"   , ORDERDATAFORMAT_STRING , sTdCCardStore.sPassWord   );
	OrderSetDataItem(&vMsgBodyType, "card_no"     , ORDERDATAFORMAT_STRING , sTdCCardStore.sCardNo     );
	OrderSetDataItem(&vMsgBodyType, "card_fee"    , ORDERDATAFORMAT_NUMBER , sTdCCardStore.sCardFee    );
	OrderSetDataItem(&vMsgBodyType, "start_time"  , ORDERDATAFORMAT_STRING , sTdCCardStore.sStartTime  );
	OrderSetDataItem(&vMsgBodyType, "expire_time" , ORDERDATAFORMAT_DATE   , sTdCCardStore.sExpireTime );
	OrderSetDataItem(&vMsgBodyType, "bel_code"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sBelCode    );
	OrderSetDataItem(&vMsgBodyType, "card_status" , ORDERDATAFORMAT_STRING , sTdCCardStore.sCardStatus );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "opr_code"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sOprCode    );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    , ORDERDATAFORMAT_STRING , sTdCCardStore.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE   , sTdCCardStore.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "update_login", ORDERDATAFORMAT_STRING , sTdCCardStore.sUpdateLogin);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGrpSrvMsgAdd(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGrpSrvMsgAdd
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpSrvMsgAdd	sTdGrpSrvMsgAdd;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpSrvMsgAdd.sIdNo);
	Coltrim(sTdGrpSrvMsgAdd.sProductCode);
	Coltrim(sTdGrpSrvMsgAdd.sAttrCode);
	Coltrim(sTdGrpSrvMsgAdd.sAttrType);
	Coltrim(sTdGrpSrvMsgAdd.sAttrValue);
	Coltrim(sTdGrpSrvMsgAdd.sOpTime);
	Coltrim(sTdGrpSrvMsgAdd.sBeginTime);
	Coltrim(sTdGrpSrvMsgAdd.sEndTime);
	Coltrim(sTdGrpSrvMsgAdd.sOpCode);
	Coltrim(sTdGrpSrvMsgAdd.sLoginNo);
	Coltrim(sTdGrpSrvMsgAdd.sLoginAccept);

	EXEC SQL INSERT INTO dGrpSrvMsgAdd(ID_NO, PRODUCT_CODE, ATTR_CODE, ATTR_TYPE, ATTR_VALUE,
	                                 OP_TIME, BEGIN_TIME, END_TIME, OP_CODE, LOGIN_NO, LOGIN_ACCEPT)
		VALUES(to_number(:sTdGrpSrvMsgAdd.sIdNo),
              :sTdGrpSrvMsgAdd.sProductCode,
              :sTdGrpSrvMsgAdd.sAttrCode,
              :sTdGrpSrvMsgAdd.sAttrType,
              :sTdGrpSrvMsgAdd.sAttrValue,
              to_date(:sTdGrpSrvMsgAdd.sOpTime,'yyyymmdd hh24:mi:ss'),
              to_date(:sTdGrpSrvMsgAdd.sBeginTime,'yyyymmdd hh24:mi:ss'),
              to_date(:sTdGrpSrvMsgAdd.sEndTime,'yyyymmdd hh24:mi:ss'),
              :sTdGrpSrvMsgAdd.sOpCode,
              :sTdGrpSrvMsgAdd.sLoginNo,
              to_number(:sTdGrpSrvMsgAdd.sLoginAccept)
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGRPSRVMSGADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"        , ORDERDATAFORMAT_NUMBER , sTdGrpSrvMsgAdd.sIdNo       );
	OrderSetDataItem(&vMsgBodyType,"product_code" , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"attr_code"    , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrCode   );
	OrderSetDataItem(&vMsgBodyType,"attr_type"    , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrType   );
	OrderSetDataItem(&vMsgBodyType,"attr_value"   , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrValue  );
	OrderSetDataItem(&vMsgBodyType,"op_time"      , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"begin_time"   , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sBeginTime  );
	OrderSetDataItem(&vMsgBodyType,"end_time"     , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sEndTime    );
	OrderSetDataItem(&vMsgBodyType,"op_code"      , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sOpCode     );
	OrderSetDataItem(&vMsgBodyType,"login_no"     , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"login_accept" , ORDERDATAFORMAT_NUMBER , sTdGrpSrvMsgAdd.sLoginAccept);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGrpSrvMsgAdd(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpSrvMsgAddIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGrpSrvMsgAdd a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.product_code=rpad(:NG_Param1,8,' ') and a.attr_code=rpad(:NG_Param2,2,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGRPSRVMSGADD");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",            ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"product_code",     ORDERDATAFORMAT_STRING,oldIndex.sProductCode);
	OrderSetPrimaryKey(&vMsgBodyType,"attr_code",        ORDERDATAFORMAT_STRING,oldIndex.sAttrCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGrpSrvMsgAdd(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpSrvMsgAddIndex oldIndex;
TdGrpSrvMsgAddIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpSrvMsgAdd	sTdGrpSrvMsgAdd;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGrpSrvMsgAdd a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.product_code=rpad(:NG_Param1,8,' ') and a.attr_code=rpad(:NG_Param2,2,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no), product_code, attr_code, attr_type, nvl(attr_value,chr(0)),
	                to_char(op_time,'yyyymmdd hh24:mi:ss'), to_char(begin_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'), op_code, login_no, to_char(login_accept)
			   INTO :sTdGrpSrvMsgAdd.sIdNo       ,
                    :sTdGrpSrvMsgAdd.sProductCode,
                    :sTdGrpSrvMsgAdd.sAttrCode   ,
                    :sTdGrpSrvMsgAdd.sAttrType   ,
                    :sTdGrpSrvMsgAdd.sAttrValue  ,
                    :sTdGrpSrvMsgAdd.sOpTime     ,
                    :sTdGrpSrvMsgAdd.sBeginTime  ,
                    :sTdGrpSrvMsgAdd.sEndTime    ,
                    :sTdGrpSrvMsgAdd.sOpCode     ,
                    :sTdGrpSrvMsgAdd.sLoginNo    ,
                    :sTdGrpSrvMsgAdd.sLoginAccept
			   FROM dGrpSrvMsgAdd
			  WHERE id_no = to_number(:newIndex.sIdNo) and product_code=:newIndex.sProductCode
			  	and attr_code = :newIndex.sAttrCode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGrpSrvMsgAdd.sIdNo       );
	Coltrim(sTdGrpSrvMsgAdd.sProductCode);
	Coltrim(sTdGrpSrvMsgAdd.sAttrCode   );
	Coltrim(sTdGrpSrvMsgAdd.sAttrType   );
	Coltrim(sTdGrpSrvMsgAdd.sAttrValue  );
	Coltrim(sTdGrpSrvMsgAdd.sOpTime     );
	Coltrim(sTdGrpSrvMsgAdd.sBeginTime  );
	Coltrim(sTdGrpSrvMsgAdd.sEndTime    );
	Coltrim(sTdGrpSrvMsgAdd.sOpCode     );
	Coltrim(sTdGrpSrvMsgAdd.sLoginNo    );
	Coltrim(sTdGrpSrvMsgAdd.sLoginAccept);

	strcpy(v_table_name,"DGRPSRVMSGADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",            ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"product_code",     ORDERDATAFORMAT_STRING,oldIndex.sProductCode);
	OrderSetPrimaryKey(&vMsgBodyType,"attr_code",        ORDERDATAFORMAT_STRING,oldIndex.sAttrCode);

	OrderSetDataItem(&vMsgBodyType,"id_no"        , ORDERDATAFORMAT_NUMBER , sTdGrpSrvMsgAdd.sIdNo       );
	OrderSetDataItem(&vMsgBodyType,"product_code" , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"attr_code"    , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrCode   );
	OrderSetDataItem(&vMsgBodyType,"attr_type"    , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrType   );
	OrderSetDataItem(&vMsgBodyType,"attr_value"   , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sAttrValue  );
	OrderSetDataItem(&vMsgBodyType,"op_time"      , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"begin_time"   , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sBeginTime  );
	OrderSetDataItem(&vMsgBodyType,"end_time"     , ORDERDATAFORMAT_DATE   , sTdGrpSrvMsgAdd.sEndTime    );
	OrderSetDataItem(&vMsgBodyType,"op_code"      , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sOpCode     );
	OrderSetDataItem(&vMsgBodyType,"login_no"     , ORDERDATAFORMAT_STRING , sTdGrpSrvMsgAdd.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"login_accept" , ORDERDATAFORMAT_NUMBER , sTdGrpSrvMsgAdd.sLoginAccept);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertMotiveUserMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdMotiveUserMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMotiveUserMsg	sTdMotiveUserMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdMotiveUserMsg.sCustId);
	Coltrim(sTdMotiveUserMsg.sMotiveCode);
	Coltrim(sTdMotiveUserMsg.sMotiveName);
	Coltrim(sTdMotiveUserMsg.sParentId);
	Coltrim(sTdMotiveUserMsg.sParentContract);
	Coltrim(sTdMotiveUserMsg.sIdNo);
	Coltrim(sTdMotiveUserMsg.sContractNo);
	Coltrim(sTdMotiveUserMsg.sProductCode);
	Coltrim(sTdMotiveUserMsg.sProductFlag);
	Coltrim(sTdMotiveUserMsg.sBeginDate);
	Coltrim(sTdMotiveUserMsg.sEndDate);
	Coltrim(sTdMotiveUserMsg.sMotiveStatus);
	Coltrim(sTdMotiveUserMsg.sLoginAccept);
	Coltrim(sTdMotiveUserMsg.sLoginNo);
	Coltrim(sTdMotiveUserMsg.sModeCode);

	EXEC SQL INSERT INTO dMotiveUserMsg(CUST_ID, MOTIVE_CODE, MOTIVE_NAME, PARENT_ID,
	                                    PARENT_CONTRACT, ID_NO, CONTRACT_NO, PRODUCT_CODE,
	                                    PRODUCT_FLAG, BEGIN_DATE, END_DATE, MOTIVE_STATUS,
	                                    LOGIN_ACCEPT, LOGIN_NO, MODE_CODE)
		VALUES(to_number(:sTdMotiveUserMsg.sCustId),
              :sTdMotiveUserMsg.sMotiveCode,
              :sTdMotiveUserMsg.sMotiveName,
              to_number(:sTdMotiveUserMsg.sParentId),
              to_number(:sTdMotiveUserMsg.sParentContract),
              to_number(:sTdMotiveUserMsg.sIdNo),
              to_number(:sTdMotiveUserMsg.sContractNo),
              :sTdMotiveUserMsg.sProductCode,
              :sTdMotiveUserMsg.sProductFlag,
              to_date(:sTdMotiveUserMsg.sBeginDate,'yyyymmdd hh24:mi:ss'),
              to_date(:sTdMotiveUserMsg.sEndDate,'yyyymmdd hh24:mi:ss'),
              :sTdMotiveUserMsg.sMotiveStatus,
              to_number(:sTdMotiveUserMsg.sLoginAccept),
              :sTdMotiveUserMsg.sLoginNo,
              :sTdMotiveUserMsg.sModeCode
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DMOTIVEUSERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "cust_id"        , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sCustId        );
	OrderSetDataItem(&vMsgBodyType, "motive_code"    , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveCode    );
	OrderSetDataItem(&vMsgBodyType, "motive_name"    , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveName    );
	OrderSetDataItem(&vMsgBodyType, "parent_id"      , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sParentId      );
	OrderSetDataItem(&vMsgBodyType, "parent_contract", ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sParentContract);
	OrderSetDataItem(&vMsgBodyType, "id_no"          , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sIdNo          );
	OrderSetDataItem(&vMsgBodyType, "contract_no"    , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sContractNo    );
	OrderSetDataItem(&vMsgBodyType, "product_code"   , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sProductCode   );
	OrderSetDataItem(&vMsgBodyType, "product_flag"   , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sProductFlag   );
	OrderSetDataItem(&vMsgBodyType, "begin_date"     , ORDERDATAFORMAT_DATE   , sTdMotiveUserMsg.sBeginDate     );
	OrderSetDataItem(&vMsgBodyType, "end_date"       , ORDERDATAFORMAT_DATE   , sTdMotiveUserMsg.sEndDate       );
	OrderSetDataItem(&vMsgBodyType, "motive_status"  , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveStatus  );
	OrderSetDataItem(&vMsgBodyType, "login_accept"   , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sLoginAccept   );
	OrderSetDataItem(&vMsgBodyType, "login_no"       , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType, "mode_code"      , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sModeCode      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteMotiveUserMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMotiveUserMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dMotiveUserMsg a WHERE a.cust_id=to_number(:NG_Param0) \
	        and a.motive_code=rpad(:NG_Param1,8,' ') and a.parent_id=to_number(:NG_Param2) \
	        and a.id_no=to_number(:NG_Param3) and a.begin_date=to_date(:NG_Param4,'yyyymmdd hh24:mi:ss')  %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DMOTIVEUSERMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",         ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"motive_code",     ORDERDATAFORMAT_STRING,oldIndex.sMotiveCode);
	OrderSetPrimaryKey(&vMsgBodyType,"parent_id",       ORDERDATAFORMAT_NUMBER,oldIndex.sParentId);
	OrderSetPrimaryKey(&vMsgBodyType,"id_no",           ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"begin_date",      ORDERDATAFORMAT_DATE,  oldIndex.sBeginDate);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateMotiveUserMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMotiveUserMsgIndex oldIndex;
TdMotiveUserMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdMotiveUserMsg	sTdMotiveUserMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dMotiveUserMsg a SET %s WHERE a.cust_id=to_number(:NG_Param0) \
	        and a.motive_code=rpad(:NG_Param1,8,' ') and a.parent_id=to_number(:NG_Param2) \
	        and a.id_no=to_number(:NG_Param3) and a.begin_date=to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(cust_id),
                    motive_code,
                    nvl(motive_name,chr(0)),
                    to_char(parent_id),
                    nvl(to_char(parent_contract),chr(0)),
                    to_char(id_no),
                    nvl(to_char(contract_no),chr(0)),
                    nvl(product_code,chr(0)),
                    nvl(product_flag,chr(0)),
                    to_char(begin_date,'yyyymmdd hh24:mi:ss'),
                    nvl(to_char(end_date,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(motive_status,chr(0)),
                    nvl(to_char(login_accept),chr(0)),
                    nvl(login_no,chr(0)),
                    nvl(mode_code,chr(0))

			   INTO :sTdMotiveUserMsg.sCustId        ,
                    :sTdMotiveUserMsg.sMotiveCode    ,
                    :sTdMotiveUserMsg.sMotiveName    ,
                    :sTdMotiveUserMsg.sParentId      ,
                    :sTdMotiveUserMsg.sParentContract,
                    :sTdMotiveUserMsg.sIdNo          ,
                    :sTdMotiveUserMsg.sContractNo    ,
                    :sTdMotiveUserMsg.sProductCode   ,
                    :sTdMotiveUserMsg.sProductFlag   ,
                    :sTdMotiveUserMsg.sBeginDate     ,
                    :sTdMotiveUserMsg.sEndDate       ,
                    :sTdMotiveUserMsg.sMotiveStatus  ,
                    :sTdMotiveUserMsg.sLoginAccept   ,
                    :sTdMotiveUserMsg.sLoginNo       ,
                    :sTdMotiveUserMsg.sModeCode
			   FROM dMotiveUserMsg
			  WHERE cust_id = to_number(:newIndex.sCustId) and motive_code=:newIndex.sMotiveCode
			  	and parent_id = to_number(:newIndex.sParentId) and id_no=to_number(:newIndex.sIdNo)
			  	and begin_date= to_date(:newIndex.sBeginDate,'yyyymmdd hh24:mi:ss');

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdMotiveUserMsg.sCustId        );
    Coltrim(sTdMotiveUserMsg.sMotiveCode    );
    Coltrim(sTdMotiveUserMsg.sMotiveName    );
    Coltrim(sTdMotiveUserMsg.sParentId      );
    Coltrim(sTdMotiveUserMsg.sParentContract);
    Coltrim(sTdMotiveUserMsg.sIdNo          );
    Coltrim(sTdMotiveUserMsg.sContractNo    );
    Coltrim(sTdMotiveUserMsg.sProductCode   );
    Coltrim(sTdMotiveUserMsg.sProductFlag   );
    Coltrim(sTdMotiveUserMsg.sBeginDate     );
    Coltrim(sTdMotiveUserMsg.sEndDate       );
    Coltrim(sTdMotiveUserMsg.sMotiveStatus  );
    Coltrim(sTdMotiveUserMsg.sLoginAccept   );
    Coltrim(sTdMotiveUserMsg.sLoginNo       );
    Coltrim(sTdMotiveUserMsg.sModeCode      );

	strcpy(v_table_name,"DMOTIVEUSERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",         ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"motive_code",     ORDERDATAFORMAT_STRING,oldIndex.sMotiveCode);
	OrderSetPrimaryKey(&vMsgBodyType,"parent_id",       ORDERDATAFORMAT_NUMBER,oldIndex.sParentId);
	OrderSetPrimaryKey(&vMsgBodyType,"id_no",           ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"begin_date",      ORDERDATAFORMAT_DATE,  oldIndex.sBeginDate);

	OrderSetDataItem(&vMsgBodyType, "cust_id"        , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sCustId        );
	OrderSetDataItem(&vMsgBodyType, "motive_code"    , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveCode    );
	OrderSetDataItem(&vMsgBodyType, "motive_name"    , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveName    );
	OrderSetDataItem(&vMsgBodyType, "parent_id"      , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sParentId      );
	OrderSetDataItem(&vMsgBodyType, "parent_contract", ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sParentContract);
	OrderSetDataItem(&vMsgBodyType, "id_no"          , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sIdNo          );
	OrderSetDataItem(&vMsgBodyType, "contract_no"    , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sContractNo    );
	OrderSetDataItem(&vMsgBodyType, "product_code"   , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sProductCode   );
	OrderSetDataItem(&vMsgBodyType, "product_flag"   , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sProductFlag   );
	OrderSetDataItem(&vMsgBodyType, "begin_date"     , ORDERDATAFORMAT_DATE   , sTdMotiveUserMsg.sBeginDate     );
	OrderSetDataItem(&vMsgBodyType, "end_date"       , ORDERDATAFORMAT_DATE   , sTdMotiveUserMsg.sEndDate       );
	OrderSetDataItem(&vMsgBodyType, "motive_status"  , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sMotiveStatus  );
	OrderSetDataItem(&vMsgBodyType, "login_accept"   , ORDERDATAFORMAT_NUMBER , sTdMotiveUserMsg.sLoginAccept   );
	OrderSetDataItem(&vMsgBodyType, "login_no"       , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType, "mode_code"      , ORDERDATAFORMAT_STRING , sTdMotiveUserMsg.sModeCode      );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertTermSellMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdTermSellMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTermSellMsg	sTdTermSellMsg;
{
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdTermSellMsg.sPhoneNo);
	Coltrim(sTdTermSellMsg.sIdNo);
	Coltrim(sTdTermSellMsg.sBelongCode);
	Coltrim(sTdTermSellMsg.sImei);
	Coltrim(sTdTermSellMsg.sMachCode);
	Coltrim(sTdTermSellMsg.sSmCode);
	Coltrim(sTdTermSellMsg.sGradeCode);
	Coltrim(sTdTermSellMsg.sInnetTime);
	Coltrim(sTdTermSellMsg.sSupplyShop);
	Coltrim(sTdTermSellMsg.sBusinessShop);
	Coltrim(sTdTermSellMsg.sProductFee);
	Coltrim(sTdTermSellMsg.sProductPayed);
	Coltrim(sTdTermSellMsg.sCastFee);
	Coltrim(sTdTermSellMsg.sBusinPrepay);
	Coltrim(sTdTermSellMsg.sFavMoney);
	Coltrim(sTdTermSellMsg.sShouldFee);
	Coltrim(sTdTermSellMsg.sPayedFee);
	Coltrim(sTdTermSellMsg.sPromptFee);
	Coltrim(sTdTermSellMsg.sPlanFee);
	Coltrim(sTdTermSellMsg.sPlanMonths);
	Coltrim(sTdTermSellMsg.sMarkProduct);
	Coltrim(sTdTermSellMsg.sProductUsed);
	Coltrim(sTdTermSellMsg.sLoginNo);
	Coltrim(sTdTermSellMsg.sOrgCode);
	Coltrim(sTdTermSellMsg.sOpTime);
	Coltrim(sTdTermSellMsg.sLoginAccept);
	Coltrim(sTdTermSellMsg.sContractNo);
	Coltrim(sTdTermSellMsg.sPlanFlag);
	Coltrim(sTdTermSellMsg.sModeCode);
	Coltrim(sTdTermSellMsg.sImpowerFlag);
	Coltrim(sTdTermSellMsg.sCostFlag);
	Coltrim(sTdTermSellMsg.sObjectFlag);
	Coltrim(sTdTermSellMsg.sGrantAccept);
	Coltrim(sTdTermSellMsg.sCustplanFlag);
	Coltrim(sTdTermSellMsg.sCustplanFee);
	Coltrim(sTdTermSellMsg.sCustplanMonths);
	Coltrim(sTdTermSellMsg.sRepeatlimitMonths);
	Coltrim(sTdTermSellMsg.sImeibindMonths);
	Coltrim(sTdTermSellMsg.sSellChntype);
	Coltrim(sTdTermSellMsg.sSellcardType);
	Coltrim(sTdTermSellMsg.sOtherphoneNo);
	Coltrim(sTdTermSellMsg.sOtheridNo);
	Coltrim(sTdTermSellMsg.sOrgId);
	Coltrim(sTdTermSellMsg.sGroupId);
	Coltrim(sTdTermSellMsg.sSellType);
	Coltrim(sTdTermSellMsg.sMachType);
	Coltrim(sTdTermSellMsg.sCollectFlag);
	Coltrim(sTdTermSellMsg.sGoodForProduct);
	Coltrim(sTdTermSellMsg.sGoodForPrepay);
		
	EXEC SQL INSERT INTO dTermSellMsg(PHONE_NO, ID_NO, BELONG_CODE, IMEI, MACH_CODE,
	                                  SM_CODE, GRADE_CODE, INNET_TIME, SUPPLY_SHOP,
	                                  BUSINESS_SHOP, PRODUCT_FEE, PRODUCT_PAYED,
	                                  CAST_FEE, BUSIN_PREPAY, FAV_MONEY, SHOULD_FEE,
	                                  PAYED_FEE, PROMPT_FEE, PLAN_FEE, PLAN_MONTHS,
	                                  MARK_PRODUCT, PRODUCT_USED, LOGIN_NO, ORG_CODE,
	                                  OP_TIME, LOGIN_ACCEPT, CONTRACT_NO, PLAN_FLAG,
	                                  MODE_CODE, IMPOWER_FLAG, COST_FLAG, OBJECT_FLAG,
	                                  GRANT_ACCEPT, CUSTPLAN_FLAG, CUSTPLAN_FEE,
	                                  CUSTPLAN_MONTHS, REPEATLIMIT_MONTHS, IMEIBIND_MONTHS,
	                                  SELL_CHNTYPE, SELLCARD_TYPE, OTHERPHONE_NO,
	                                  OTHERID_NO, ORG_ID, GROUP_ID, SELL_TYPE, MACH_TYPE,COLLECT_FLAG,GOODFORPRODUCT,GOODFORPREPAY
	                                  /*BANK_FEE, BANK_NO, INSTALLMENT_NUM, GROUP_ID, ORG_ID*/)
		VALUES(
		       :sTdTermSellMsg.sPhoneNo ,
               to_number(:sTdTermSellMsg.sIdNo ),
               :sTdTermSellMsg.sBelongCode,
               to_number(:sTdTermSellMsg.sImei ),
               :sTdTermSellMsg.sMachCode,
               :sTdTermSellMsg.sSmCode,
               :sTdTermSellMsg.sGradeCode ,
               to_date(:sTdTermSellMsg.sInnetTime,'yyyymmdd hh24:mi:ss'),
               :sTdTermSellMsg.sSupplyShop,
               :sTdTermSellMsg.sBusinessShop,
               to_number(:sTdTermSellMsg.sProductFee ),
               to_number(:sTdTermSellMsg.sProductPayed ),
               to_number(:sTdTermSellMsg.sCastFee),
               to_number(:sTdTermSellMsg.sBusinPrepay),
               to_number(:sTdTermSellMsg.sFavMoney ),
               to_number(:sTdTermSellMsg.sShouldFee),
               to_number(:sTdTermSellMsg.sPayedFee ),
               to_number(:sTdTermSellMsg.sPromptFee),
               to_number(:sTdTermSellMsg.sPlanFee),
               to_number(:sTdTermSellMsg.sPlanMonths ),
               to_number(:sTdTermSellMsg.sMarkProduct),
               to_number(:sTdTermSellMsg.sProductUsed),
               :sTdTermSellMsg.sLoginNo ,
               :sTdTermSellMsg.sOrgCode ,
               to_date(:sTdTermSellMsg.sOpTime,'yyyymmdd hh24:mi:ss') ,
               to_number(:sTdTermSellMsg.sLoginAccept),
               to_number(:sTdTermSellMsg.sContractNo ),
               :sTdTermSellMsg.sPlanFlag,
               :sTdTermSellMsg.sModeCode,
               :sTdTermSellMsg.sImpowerFlag ,
               :sTdTermSellMsg.sCostFlag,
               :sTdTermSellMsg.sObjectFlag,
               to_number(:sTdTermSellMsg.sGrantAccept),
               :sTdTermSellMsg.sCustplanFlag,
               to_number(:sTdTermSellMsg.sCustplanFee),
               to_number(:sTdTermSellMsg.sCustplanMonths ),
               to_number(:sTdTermSellMsg.sRepeatlimitMonths),
               to_number(:sTdTermSellMsg.sImeibindMonths ),
               nvl(:sTdTermSellMsg.sSellChntype,'0') ,
               :sTdTermSellMsg.sSellcardType,
               :sTdTermSellMsg.sOtherphoneNo,
               to_number(:sTdTermSellMsg.sOtheridNo),
               :sTdTermSellMsg.sOrgId ,
               :sTdTermSellMsg.sGroupId,
               :sTdTermSellMsg.sSellType,
               :sTdTermSellMsg.sMachType,
               :sTdTermSellMsg.sCollectFlag,
               nvl(to_number(:sTdTermSellMsg.sGoodForProduct),0),
               nvl(to_number(:sTdTermSellMsg.sGoodForPrepay),0)
            /*   to_number(:sTdTermSellMsg.sBankFee),
               :sTdTermSellMsg.sBankNo,
               to_number(:sTdTermSellMsg.sInstallmentNum),
               :sTdTermSellMsg.sGroupId,
               :sTdTermSellMsg.sOrgId*/
		       );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DTERMSELLMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "phone_no"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sPhoneNo          );
	OrderSetDataItem(&vMsgBodyType, "id_no"             , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sIdNo             );
	OrderSetDataItem(&vMsgBodyType, "belong_code"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBelongCode       );
	OrderSetDataItem(&vMsgBodyType, "imei"              , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sImei             );
	OrderSetDataItem(&vMsgBodyType, "mach_code"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sMachCode         );
	OrderSetDataItem(&vMsgBodyType, "sm_code"           , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSmCode           );
	OrderSetDataItem(&vMsgBodyType, "grade_code"        , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGradeCode        );
	OrderSetDataItem(&vMsgBodyType, "innet_time"        , ORDERDATAFORMAT_DATE   ,  sTdTermSellMsg.sInnetTime        );
	OrderSetDataItem(&vMsgBodyType, "supply_shop"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSupplyShop       );
	OrderSetDataItem(&vMsgBodyType, "business_shop"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBusinessShop     );
	OrderSetDataItem(&vMsgBodyType, "product_fee"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductFee       );
	OrderSetDataItem(&vMsgBodyType, "product_payed"     , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductPayed     );
	OrderSetDataItem(&vMsgBodyType, "cast_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCastFee           );
	OrderSetDataItem(&vMsgBodyType, "busin_prepay"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sBusinPrepay      );
	OrderSetDataItem(&vMsgBodyType, "fav_money"         , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sFavMoney         );
	OrderSetDataItem(&vMsgBodyType, "should_fee"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sShouldFee        );
	OrderSetDataItem(&vMsgBodyType, "payed_fee"         , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPayedFee         );
	OrderSetDataItem(&vMsgBodyType, "prompt_fee"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPromptFee        );
	OrderSetDataItem(&vMsgBodyType, "plan_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPlanFee          );
	OrderSetDataItem(&vMsgBodyType, "plan_months"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPlanMonths       );
	OrderSetDataItem(&vMsgBodyType, "mark_product"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sMarkProduct      );
	OrderSetDataItem(&vMsgBodyType, "product_used"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductUsed      );
	OrderSetDataItem(&vMsgBodyType, "login_no"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sLoginNo          );
	OrderSetDataItem(&vMsgBodyType, "org_code"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgCode          );
	OrderSetDataItem(&vMsgBodyType, "op_time"           , ORDERDATAFORMAT_DATE   ,  sTdTermSellMsg.sOpTime           );
	OrderSetDataItem(&vMsgBodyType, "login_accept"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sLoginAccept      );
	OrderSetDataItem(&vMsgBodyType, "contract_no"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sContractNo       );
	OrderSetDataItem(&vMsgBodyType, "plan_flag"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sPlanFlag         );
	OrderSetDataItem(&vMsgBodyType, "mode_code"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sModeCode         );
	OrderSetDataItem(&vMsgBodyType, "impower_flag"      , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sImpowerFlag      );
	OrderSetDataItem(&vMsgBodyType, "cost_flag"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sCostFlag         );
	OrderSetDataItem(&vMsgBodyType, "object_flag"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sObjectFlag       );
	OrderSetDataItem(&vMsgBodyType, "grant_accept"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sGrantAccept      );
	OrderSetDataItem(&vMsgBodyType, "custplan_flag"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sCustplanFlag     );
	OrderSetDataItem(&vMsgBodyType, "custplan_fee"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCustplanFee      );
	OrderSetDataItem(&vMsgBodyType, "custplan_months"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCustplanMonths   );
	OrderSetDataItem(&vMsgBodyType, "repeatlimit_months", ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sRepeatlimitMonths);
	OrderSetDataItem(&vMsgBodyType, "imeibind_months"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sImeibindMonths   );
	OrderSetDataItem(&vMsgBodyType, "sell_chntype"      , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellChntype      );
	OrderSetDataItem(&vMsgBodyType, "sellcard_type"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellcardType     );
	OrderSetDataItem(&vMsgBodyType, "otherphone_no"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOtherphoneNo     );
	OrderSetDataItem(&vMsgBodyType, "otherid_no"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sOtheridNo        );
	OrderSetDataItem(&vMsgBodyType, "org_id"            , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgId            );
	OrderSetDataItem(&vMsgBodyType, "group_id"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGroupId          );
	OrderSetDataItem(&vMsgBodyType, "sell_type"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellType         );
	OrderSetDataItem(&vMsgBodyType, "mach_type"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sMachType         );
	OrderSetDataItem(&vMsgBodyType, "collect_flag"      , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sCollectFlag      );
	OrderSetDataItem(&vMsgBodyType, "goodforproduct"    , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sGoodForProduct   );
	OrderSetDataItem(&vMsgBodyType, "goodforprepay"     , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sGoodForPrepay    );
/*
	OrderSetDataItem(&vMsgBodyType, "bank_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sBankFee          );
	OrderSetDataItem(&vMsgBodyType, "bank_no"           , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBankNo           );
	OrderSetDataItem(&vMsgBodyType, "installment_num"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sInstallmentNum   );
	OrderSetDataItem(&vMsgBodyType, "group_id"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGroupId          );
	OrderSetDataItem(&vMsgBodyType, "org_id"            , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgId            );
*/
	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteTermSellMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_imei,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_imei;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dTermSellMsg a WHERE a.imei=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0){
		printf("++++++++++++++++ v_ret = [%d],SQLCODE = [%d]\n",v_ret,SQLCODE);
		return -500033;
	}


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DTERMSELLMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"imei",ORDERDATAFORMAT_NUMBER,i_imei);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateTermSellMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_imei_old,i_imei_new,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_imei_old;
char *i_imei_new;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret,i,j;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;

	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdTermSellMsg	sTdTermSellMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dTermSellMsg a SET %s WHERE a.imei=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		printf("v_sql_buff=%s,ret=%d,sqlcode=%d\n",v_sql_buff,v_ret,SQLCODE);
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT phone_no,
                    to_char(id_no),
                    belong_code,
                    to_char(imei),
                    mach_code,
                    nvl(sm_code,chr(0)),
                    nvl(grade_code, chr(0)),
                    nvl(to_char(innet_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    supply_shop,
                    business_shop,
                    to_char(product_fee),
                    to_char(product_payed),
                    to_char(cast_fee),
                    to_char(busin_prepay),
                    to_char(fav_money),
                    to_char(should_fee),
                    to_char(payed_fee),
                    to_char(prompt_fee),
                    to_char(plan_fee),
                    to_char(plan_months),
                    to_char(mark_product),
                    to_char(product_used),
                    login_no,
                    org_code,
                    to_char(op_time,'yyyymmdd hh24:mi:ss'),
                    to_char(login_accept),
                    nvl(to_char(contract_no),         chr(0)),
                    nvl(plan_flag,                   chr(0)),
                    nvl(mode_code,                   chr(0)),
                    nvl(impower_flag,                chr(0)),
                    nvl(cost_flag,                   chr(0)),
                    nvl(object_flag,                 chr(0)),
                    nvl(to_char(grant_accept),       chr(0)),
                    nvl(custplan_flag,               chr(0)),
                    nvl(to_char(custplan_fee),       chr(0)),
                    nvl(to_char(custplan_months),    chr(0)),
                    nvl(to_char(repeatlimit_months), chr(0)),
                    nvl(to_char(imeibind_months),    chr(0)),
                    nvl(sell_chntype,                chr(0)),
                    nvl(sellcard_type,               chr(0)),
                    nvl(otherphone_no,               chr(0)),
                    nvl(to_char(otherid_no),         chr(0)),
                    nvl(org_id,                      chr(0)),
                    nvl(group_id,                    chr(0)),
                    nvl(sell_type,					 chr(0)),
                    nvl(mach_type,					 chr(0))
/*
					nvl(to_char(bank_fee),           chr(0)),
					nvl(bank_no,                     chr(0)),
					nvl(to_char(installment_num),    chr(0)),
					nvl(group_id,                    chr(0)),
					nvl(org_id,                      chr(0))
*/
			INTO    :sTdTermSellMsg.sPhoneNo,
                    :sTdTermSellMsg.sIdNo,
                    :sTdTermSellMsg.sBelongCode,
                    :sTdTermSellMsg.sImei,
                    :sTdTermSellMsg.sMachCode,
                    :sTdTermSellMsg.sSmCode,
                    :sTdTermSellMsg.sGradeCode,
                    :sTdTermSellMsg.sInnetTime,
                    :sTdTermSellMsg.sSupplyShop,
                    :sTdTermSellMsg.sBusinessShop,
                    :sTdTermSellMsg.sProductFee,
                    :sTdTermSellMsg.sProductPayed,
                    :sTdTermSellMsg.sCastFee,
                    :sTdTermSellMsg.sBusinPrepay,
                    :sTdTermSellMsg.sFavMoney,
                    :sTdTermSellMsg.sShouldFee,
                    :sTdTermSellMsg.sPayedFee,
                    :sTdTermSellMsg.sPromptFee,
                    :sTdTermSellMsg.sPlanFee,
                    :sTdTermSellMsg.sPlanMonths,
                    :sTdTermSellMsg.sMarkProduct,
                    :sTdTermSellMsg.sProductUsed,
                    :sTdTermSellMsg.sLoginNo,
                    :sTdTermSellMsg.sOrgCode,
                    :sTdTermSellMsg.sOpTime,
                    :sTdTermSellMsg.sLoginAccept,
                    :sTdTermSellMsg.sContractNo,
                    :sTdTermSellMsg.sPlanFlag,
                    :sTdTermSellMsg.sModeCode,
                    :sTdTermSellMsg.sImpowerFlag,
                    :sTdTermSellMsg.sCostFlag,
                    :sTdTermSellMsg.sObjectFlag,
                    :sTdTermSellMsg.sGrantAccept,
                    :sTdTermSellMsg.sCustplanFlag,
                    :sTdTermSellMsg.sCustplanFee,
                    :sTdTermSellMsg.sCustplanMonths,
                    :sTdTermSellMsg.sRepeatlimitMonths,
                    :sTdTermSellMsg.sImeibindMonths,
                    :sTdTermSellMsg.sSellChntype,
                    :sTdTermSellMsg.sSellcardType,
                    :sTdTermSellMsg.sOtherphoneNo,
                    :sTdTermSellMsg.sOtheridNo,
                    :sTdTermSellMsg.sOrgId,
                    :sTdTermSellMsg.sGroupId,
                    :sTdTermSellMsg.sSellType,
                    :sTdTermSellMsg.sMachType
/*
                    :sTdTermSellMsg.sBankFee,
                    :sTdTermSellMsg.sBankNo,
                    :sTdTermSellMsg.sInstallmentNum,
                    :sTdTermSellMsg.sGroupId,
                    :sTdTermSellMsg.sOrgId*/
			FROM dTermSellMsg
			WHERE imei = :i_imei_new;
	if (SQLCODE!=SQLOK)
		return -500037;

    Coltrim(sTdTermSellMsg.sPhoneNo           );
    Coltrim(sTdTermSellMsg.sIdNo              );
    Coltrim(sTdTermSellMsg.sBelongCode        );
    Coltrim(sTdTermSellMsg.sImei              );
    Coltrim(sTdTermSellMsg.sMachCode          );
    Coltrim(sTdTermSellMsg.sSmCode            );
    Coltrim(sTdTermSellMsg.sGradeCode         );
    Coltrim(sTdTermSellMsg.sInnetTime         );
    Coltrim(sTdTermSellMsg.sSupplyShop        );
    Coltrim(sTdTermSellMsg.sBusinessShop      );
    Coltrim(sTdTermSellMsg.sProductFee        );
    Coltrim(sTdTermSellMsg.sProductPayed      );
    Coltrim(sTdTermSellMsg.sCastFee           );
    Coltrim(sTdTermSellMsg.sBusinPrepay       );
    Coltrim(sTdTermSellMsg.sFavMoney          );
    Coltrim(sTdTermSellMsg.sShouldFee         );
    Coltrim(sTdTermSellMsg.sPayedFee          );
    Coltrim(sTdTermSellMsg.sPromptFee         );
    Coltrim(sTdTermSellMsg.sPlanFee           );
    Coltrim(sTdTermSellMsg.sPlanMonths        );
    Coltrim(sTdTermSellMsg.sMarkProduct       );
    Coltrim(sTdTermSellMsg.sProductUsed       );
    Coltrim(sTdTermSellMsg.sLoginNo           );
    Coltrim(sTdTermSellMsg.sOrgCode           );
    Coltrim(sTdTermSellMsg.sOpTime            );
    Coltrim(sTdTermSellMsg.sLoginAccept       );
    Coltrim(sTdTermSellMsg.sContractNo        );
    Coltrim(sTdTermSellMsg.sPlanFlag          );
    Coltrim(sTdTermSellMsg.sModeCode          );
    Coltrim(sTdTermSellMsg.sImpowerFlag       );
    Coltrim(sTdTermSellMsg.sCostFlag          );
    Coltrim(sTdTermSellMsg.sObjectFlag        );
    Coltrim(sTdTermSellMsg.sGrantAccept       );
    Coltrim(sTdTermSellMsg.sCustplanFlag      );
    Coltrim(sTdTermSellMsg.sCustplanFee       );
    Coltrim(sTdTermSellMsg.sCustplanMonths    );
    Coltrim(sTdTermSellMsg.sRepeatlimitMonths );
    Coltrim(sTdTermSellMsg.sImeibindMonths    );
    Coltrim(sTdTermSellMsg.sSellChntype       );
    Coltrim(sTdTermSellMsg.sSellcardType      );
    Coltrim(sTdTermSellMsg.sOtherphoneNo      );
    Coltrim(sTdTermSellMsg.sOtheridNo         );
    Coltrim(sTdTermSellMsg.sOrgId             );
    Coltrim(sTdTermSellMsg.sGroupId           );
    Coltrim(sTdTermSellMsg.sSellType          );
    Coltrim(sTdTermSellMsg.sMachType          );
/*
    Coltrim(sTdTermSellMsg.sBankFee           );
    Coltrim(sTdTermSellMsg.sBankNo            );
    Coltrim(sTdTermSellMsg.sInstallmentNum    );
    Coltrim(sTdTermSellMsg.sGroupId           );
    Coltrim(sTdTermSellMsg.sOrgId             );*/

	strcpy(v_table_name,"DTERMSELLMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"imei",ORDERDATAFORMAT_NUMBER,i_imei_old);

	OrderSetDataItem(&vMsgBodyType, "phone_no"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sPhoneNo          );
	OrderSetDataItem(&vMsgBodyType, "id_no"             , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sIdNo             );
	OrderSetDataItem(&vMsgBodyType, "belong_code"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBelongCode       );
	OrderSetDataItem(&vMsgBodyType, "imei"              , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sImei             );
	OrderSetDataItem(&vMsgBodyType, "mach_code"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sMachCode         );
	OrderSetDataItem(&vMsgBodyType, "sm_code"           , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSmCode           );
	OrderSetDataItem(&vMsgBodyType, "grade_code"        , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGradeCode        );
	OrderSetDataItem(&vMsgBodyType, "innet_time"        , ORDERDATAFORMAT_DATE   ,  sTdTermSellMsg.sInnetTime        );
	OrderSetDataItem(&vMsgBodyType, "supply_shop"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSupplyShop       );
	OrderSetDataItem(&vMsgBodyType, "business_shop"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBusinessShop     );
	OrderSetDataItem(&vMsgBodyType, "product_fee"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductFee       );
	OrderSetDataItem(&vMsgBodyType, "product_payed"     , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductPayed     );
	OrderSetDataItem(&vMsgBodyType, "cast_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCastFee          );
	OrderSetDataItem(&vMsgBodyType, "busin_prepay"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sBusinPrepay      );
	OrderSetDataItem(&vMsgBodyType, "fav_money"         , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sFavMoney         );
	OrderSetDataItem(&vMsgBodyType, "should_fee"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sShouldFee        );
	OrderSetDataItem(&vMsgBodyType, "payed_fee"         , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPayedFee         );
	OrderSetDataItem(&vMsgBodyType, "prompt_fee"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPromptFee        );
	OrderSetDataItem(&vMsgBodyType, "plan_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPlanFee          );
	OrderSetDataItem(&vMsgBodyType, "plan_months"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sPlanMonths       );
	OrderSetDataItem(&vMsgBodyType, "mark_product"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sMarkProduct      );
	OrderSetDataItem(&vMsgBodyType, "product_used"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sProductUsed      );
	OrderSetDataItem(&vMsgBodyType, "login_no"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sLoginNo          );
	OrderSetDataItem(&vMsgBodyType, "org_code"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgCode          );
	OrderSetDataItem(&vMsgBodyType, "op_time"           , ORDERDATAFORMAT_DATE   ,  sTdTermSellMsg.sOpTime           );
	OrderSetDataItem(&vMsgBodyType, "login_accept"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sLoginAccept      );
	OrderSetDataItem(&vMsgBodyType, "contract_no"       , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sContractNo       );
	OrderSetDataItem(&vMsgBodyType, "plan_flag"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sPlanFlag         );
	OrderSetDataItem(&vMsgBodyType, "mode_code"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sModeCode         );
	OrderSetDataItem(&vMsgBodyType, "impower_flag"      , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sImpowerFlag      );
	OrderSetDataItem(&vMsgBodyType, "cost_flag"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sCostFlag         );
	OrderSetDataItem(&vMsgBodyType, "object_flag"       , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sObjectFlag       );
	OrderSetDataItem(&vMsgBodyType, "grant_accept"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sGrantAccept      );
	OrderSetDataItem(&vMsgBodyType, "custplan_flag"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sCustplanFlag     );
	OrderSetDataItem(&vMsgBodyType, "custplan_fee"      , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCustplanFee      );
	OrderSetDataItem(&vMsgBodyType, "custplan_months"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sCustplanMonths   );
	OrderSetDataItem(&vMsgBodyType, "repeatlimit_months", ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sRepeatlimitMonths);
	OrderSetDataItem(&vMsgBodyType, "imeibind_months"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sImeibindMonths   );
	OrderSetDataItem(&vMsgBodyType, "sell_chntype"      , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellChntype      );
	OrderSetDataItem(&vMsgBodyType, "sellcard_type"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellcardType     );
	OrderSetDataItem(&vMsgBodyType, "otherphone_no"     , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOtherphoneNo     );
	OrderSetDataItem(&vMsgBodyType, "otherid_no"        , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sOtheridNo        );
	OrderSetDataItem(&vMsgBodyType, "org_id"            , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgId            );
	OrderSetDataItem(&vMsgBodyType, "group_id"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGroupId          );
	OrderSetDataItem(&vMsgBodyType, "sell_type"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sSellType         );
	OrderSetDataItem(&vMsgBodyType, "mach_type"         , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sMachType         );

/*
	OrderSetDataItem(&vMsgBodyType, "bank_fee"          , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sBankFee          );
	OrderSetDataItem(&vMsgBodyType, "bank_no"           , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sBankNo           );
	OrderSetDataItem(&vMsgBodyType, "installment_num"   , ORDERDATAFORMAT_NUMBER ,  sTdTermSellMsg.sInstallmentNum   );
	OrderSetDataItem(&vMsgBodyType, "group_id"          , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sGroupId          );
	OrderSetDataItem(&vMsgBodyType, "org_id"            , ORDERDATAFORMAT_STRING ,  sTdTermSellMsg.sOrgId            );
*/
	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}
	return 0;

}


int OrderInsertLocalBlackList(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTwLocalBlackList
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwLocalBlackList	sTwLocalBlackList;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwLocalBlackList.sBlackNo);
	Coltrim(sTwLocalBlackList.sBlackType);
	Coltrim(sTwLocalBlackList.sBelongCode);
	Coltrim(sTwLocalBlackList.sOpTime);
	Coltrim(sTwLocalBlackList.sOrgCode);
	Coltrim(sTwLocalBlackList.sLoginNo);
	Coltrim(sTwLocalBlackList.sOpCode);
	Coltrim(sTwLocalBlackList.sOpNote);
	Coltrim(sTwLocalBlackList.sOrgId);
	Coltrim(sTwLocalBlackList.sGroupId);

	EXEC SQL INSERT INTO wLocalBlackList(BLACK_NO, BLACK_TYPE, BELONG_CODE, OP_TIME,
	                                     ORG_CODE, LOGIN_NO, OP_CODE, OP_NOTE, ORG_ID, GROUP_ID)
		VALUES(:sTwLocalBlackList.sBlackNo    ,
               :sTwLocalBlackList.sBlackType  ,
               :sTwLocalBlackList.sBelongCode ,
               to_date(:sTwLocalBlackList.sOpTime,'yyyymmdd hh24:mi:ss'),
               :sTwLocalBlackList.sOrgCode ,
               :sTwLocalBlackList.sLoginNo ,
               :sTwLocalBlackList.sOpCode  ,
               :sTwLocalBlackList.sOpNote  ,
               :sTwLocalBlackList.sOrgId   ,
               :sTwLocalBlackList.sGroupId
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"WLOCALBLACKLIST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "black_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBlackNo   );
	OrderSetDataItem(&vMsgBodyType, "black_type"  , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBlackType );
	OrderSetDataItem(&vMsgBodyType, "belong_code" , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBelongCode);
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE   , sTwLocalBlackList.sOpTime    );
	OrderSetDataItem(&vMsgBodyType, "org_code"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOrgCode   );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sLoginNo   );
	OrderSetDataItem(&vMsgBodyType, "op_code"     , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOpCode    );
	OrderSetDataItem(&vMsgBodyType, "op_note"     , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOpNote    );
	OrderSetDataItem(&vMsgBodyType, "org_id"      , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOrgId     );
	OrderSetDataItem(&vMsgBodyType, "group_id"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sGroupId   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteLocalBlackList(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwLocalBlackListIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE wLocalBlackList a WHERE a.black_no=rpad(:NG_Param0,20,' ') \
	        and a.black_type=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"WLOCALBLACKLIST");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"black_no",      ORDERDATAFORMAT_STRING,oldIndex.sBlackNo);
	OrderSetPrimaryKey(&vMsgBodyType,"black_type",    ORDERDATAFORMAT_STRING,oldIndex.sBlackType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateLocalBlackList(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwLocalBlackListIndex oldIndex;
TwLocalBlackListIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TwLocalBlackList	sTwLocalBlackList;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE wLocalBlackList a SET %s WHERE a.black_no=rpad(:NG_Param0,20,' ') and a.black_type=:NG_Param1 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT black_no    ,
                    black_type  ,
                    nvl(belong_code,chr(0)) ,
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0))     ,
                    nvl(org_code,chr(0))    ,
                    nvl(login_no,chr(0))    ,
                    nvl(op_code,chr(0))     ,
                    nvl(op_note,chr(0))     ,
                    nvl(org_id,chr(0))      ,
                    nvl(group_id,chr(0))
			   INTO :sTwLocalBlackList.sBlackNo    ,
                    :sTwLocalBlackList.sBlackType  ,
                    :sTwLocalBlackList.sBelongCode ,
                    :sTwLocalBlackList.sOpTime     ,
                    :sTwLocalBlackList.sOrgCode    ,
                    :sTwLocalBlackList.sLoginNo    ,
                    :sTwLocalBlackList.sOpCode     ,
                    :sTwLocalBlackList.sOpNote     ,
                    :sTwLocalBlackList.sOrgId      ,
                    :sTwLocalBlackList.sGroupId
			   FROM wLocalBlackList
			  WHERE black_no = :newIndex.sBlackNo and black_type=:newIndex.sBlackType;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTwLocalBlackList.sBlackNo   );
	Coltrim( sTwLocalBlackList.sBlackType );
	Coltrim( sTwLocalBlackList.sBelongCode);
	Coltrim( sTwLocalBlackList.sOpTime    );
	Coltrim( sTwLocalBlackList.sOrgCode   );
	Coltrim( sTwLocalBlackList.sLoginNo   );
	Coltrim( sTwLocalBlackList.sOpCode    );
	Coltrim( sTwLocalBlackList.sOpNote    );
	Coltrim( sTwLocalBlackList.sOrgId     );
	Coltrim( sTwLocalBlackList.sGroupId   );


	strcpy(v_table_name,"WLOCALBLACKLIST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"black_no",      ORDERDATAFORMAT_STRING,oldIndex.sBlackNo);
	OrderSetPrimaryKey(&vMsgBodyType,"black_type",    ORDERDATAFORMAT_STRING,oldIndex.sBlackType);

	OrderSetDataItem(&vMsgBodyType, "black_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBlackNo   );
	OrderSetDataItem(&vMsgBodyType, "black_type"  , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBlackType );
	OrderSetDataItem(&vMsgBodyType, "belong_code" , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sBelongCode);
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE   , sTwLocalBlackList.sOpTime    );
	OrderSetDataItem(&vMsgBodyType, "org_code"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOrgCode   );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sLoginNo   );
	OrderSetDataItem(&vMsgBodyType, "op_code"     , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOpCode    );
	OrderSetDataItem(&vMsgBodyType, "op_note"     , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOpNote    );
	OrderSetDataItem(&vMsgBodyType, "org_id"      , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sOrgId     );
	OrderSetDataItem(&vMsgBodyType, "group_id"    , ORDERDATAFORMAT_STRING , sTwLocalBlackList.sGroupId   );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertLocalBlackListHis(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTwLocalBlackListHis
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwLocalBlackListHis	sTwLocalBlackListHis;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwLocalBlackListHis.sBlackNo);
	Coltrim(sTwLocalBlackListHis.sBlackType);
	Coltrim(sTwLocalBlackListHis.sBelongCode);
	Coltrim(sTwLocalBlackListHis.sOpTime);
	Coltrim(sTwLocalBlackListHis.sOrgCode);
	Coltrim(sTwLocalBlackListHis.sLoginNo);
	Coltrim(sTwLocalBlackListHis.sOpCode);
	Coltrim(sTwLocalBlackListHis.sOpNote);
	Coltrim(sTwLocalBlackListHis.sLoginAccept);
	Coltrim(sTwLocalBlackListHis.sOrgId);
	Coltrim(sTwLocalBlackListHis.sGroupId);

	EXEC SQL INSERT INTO wLocalBlackListHis(BLACK_NO, BLACK_TYPE, BELONG_CODE, OP_TIME,
	                                     ORG_CODE, LOGIN_NO, OP_CODE, OP_NOTE, LOGIN_ACCEPT, ORG_ID, GROUP_ID)
		VALUES(:sTwLocalBlackListHis.sBlackNo    ,
               :sTwLocalBlackListHis.sBlackType  ,
               :sTwLocalBlackListHis.sBelongCode ,
               to_date(:sTwLocalBlackListHis.sOpTime,'yyyymmdd hh24:mi:ss'),
               :sTwLocalBlackListHis.sOrgCode ,
               :sTwLocalBlackListHis.sLoginNo ,
               :sTwLocalBlackListHis.sOpCode  ,
               :sTwLocalBlackListHis.sOpNote  ,
               :sTwLocalBlackListHis.sLoginAccept   ,
               :sTwLocalBlackListHis.sOrgId   ,
               :sTwLocalBlackListHis.sGroupId
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"WLOCALBLACKLISTHIS");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "black_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sBlackNo   );
	OrderSetDataItem(&vMsgBodyType, "black_type"  , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sBlackType );
	OrderSetDataItem(&vMsgBodyType, "belong_code" , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sBelongCode);
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE   , sTwLocalBlackListHis.sOpTime    );
	OrderSetDataItem(&vMsgBodyType, "org_code"    , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sOrgCode   );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sLoginNo   );
	OrderSetDataItem(&vMsgBodyType, "op_code"     , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sOpCode    );
	OrderSetDataItem(&vMsgBodyType, "op_note"     , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sOpNote    );
	OrderSetDataItem(&vMsgBodyType, "login_accept", ORDERDATAFORMAT_NUMBER , sTwLocalBlackListHis.sLoginAccept    );
	OrderSetDataItem(&vMsgBodyType, "org_id"      , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sOrgId     );
	OrderSetDataItem(&vMsgBodyType, "group_id"    , ORDERDATAFORMAT_STRING , sTwLocalBlackListHis.sGroupId   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderInsertCheckPrepay(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCheckPrepay
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCheckPrepay	sTdCheckPrepay;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCheckPrepay.sBankCode);
	Coltrim(sTdCheckPrepay.sCheckNo);
	Coltrim(sTdCheckPrepay.sCheckPrepay);
	Coltrim(sTdCheckPrepay.sOpTime);

	EXEC SQL INSERT INTO dCheckPrepay(BANK_CODE, CHECK_NO, CHECK_PREPAY, OP_TIME)
		VALUES(:sTdCheckPrepay.sBankCode,
               :sTdCheckPrepay.sCheckNo,
               :sTdCheckPrepay.sCheckPrepay,
               to_date(:sTdCheckPrepay.sOpTime,'yyyymmdd hh24:mi:ss')
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCHECKPREPAY");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "bank_code"    , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sBankCode   );
	OrderSetDataItem(&vMsgBodyType, "check_no"     , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sCheckNo );
	OrderSetDataItem(&vMsgBodyType, "check_prepay" , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sCheckPrepay);
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdCheckPrepay.sOpTime    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCheckPrepay(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCheckPrepayIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCheckPrepay a WHERE a.bank_code=rpad(:NG_Param0,5,' ') \
	        and a.check_no=rpad(:NG_Param1,20,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCHECKPREPAY");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"bank_code",   ORDERDATAFORMAT_STRING,oldIndex.sBankCode);
	OrderSetPrimaryKey(&vMsgBodyType,"check_no",    ORDERDATAFORMAT_STRING,oldIndex.sCheckNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCheckPrepay(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCheckPrepayIndex oldIndex;
TdCheckPrepayIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCheckPrepay	sTdCheckPrepay;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCheckPrepay a SET %s WHERE a.bank_code=rpad(:NG_Param0,5,' ') and a.check_no=rpad(:NG_Param1,20,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT bank_code,
                    check_no,
                    check_prepay,
                    to_char(op_time,'yyyymmdd hh24:mi:ss')
			   INTO :sTdCheckPrepay.sBankCode    ,
                    :sTdCheckPrepay.sCheckNo  ,
                    :sTdCheckPrepay.sCheckPrepay ,
                    :sTdCheckPrepay.sOpTime
			   FROM dCheckPrepay
			  WHERE bank_code = :newIndex.sBankCode and check_no=:newIndex.sCheckNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTdCheckPrepay.sBankCode   );
	Coltrim( sTdCheckPrepay.sCheckNo );
	Coltrim( sTdCheckPrepay.sCheckPrepay);
	Coltrim( sTdCheckPrepay.sOpTime    );


	strcpy(v_table_name,"DCHECKPREPAY");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"bank_code",      ORDERDATAFORMAT_STRING,oldIndex.sBankCode);
	OrderSetPrimaryKey(&vMsgBodyType,"check_no",       ORDERDATAFORMAT_STRING,oldIndex.sCheckNo);

	OrderSetDataItem(&vMsgBodyType, "bank_code"    , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sBankCode   );
	OrderSetDataItem(&vMsgBodyType, "check_no"     , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sCheckNo );
	OrderSetDataItem(&vMsgBodyType, "check_prepay" , ORDERDATAFORMAT_STRING , sTdCheckPrepay.sCheckPrepay);
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdCheckPrepay.sOpTime    );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertCustType(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustType
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustType	sTdCustType;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustType.sIdNo);
	Coltrim(sTdCustType.sMainCode);
	Coltrim(sTdCustType.sMainNote);

	EXEC SQL INSERT INTO dCustType(ID_NO, MAIN_CODE, MAIN_NOTE)
		VALUES(:sTdCustType.sIdNo,
               :sTdCustType.sMainCode,
               :sTdCustType.sMainNote
		      );
	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE!=-1))
		return -500030;

	strcpy(v_table_name,"DCUSTTYPE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"     ,     ORDERDATAFORMAT_NUMBER , sTdCustType.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "main_code" ,     ORDERDATAFORMAT_STRING , sTdCustType.sMainCode );
	OrderSetDataItem(&vMsgBodyType, "main_note" ,     ORDERDATAFORMAT_STRING , sTdCustType.sMainNote);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustType(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustTypeIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustType a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.main_code=rpad(:NG_Param1,2,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTTYPE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"main_code",    ORDERDATAFORMAT_STRING,oldIndex.sMainCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustType(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustTypeIndex oldIndex;
TdCustTypeIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustType	sTdCustType;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustType a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.main_code=rpad(:NG_Param1,2,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT id_no,
                    main_code,
                    nvl(main_note,chr(0))
			   INTO :sTdCustType.sIdNo    ,
                    :sTdCustType.sMainCode  ,
                    :sTdCustType.sMainNote
			   FROM dCustType
			  WHERE id_no = :newIndex.sIdNo and main_code=:newIndex.sMainCode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTdCustType.sIdNo   );
	Coltrim( sTdCustType.sMainCode );
	Coltrim( sTdCustType.sMainNote);


	strcpy(v_table_name,"DCUSTTYPE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",      ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"main_code",  ORDERDATAFORMAT_STRING,oldIndex.sMainCode);

	OrderSetDataItem(&vMsgBodyType, "id_no"     ,     ORDERDATAFORMAT_NUMBER , sTdCustType.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "main_code" ,     ORDERDATAFORMAT_STRING , sTdCustType.sMainCode );
	OrderSetDataItem(&vMsgBodyType, "main_note" ,     ORDERDATAFORMAT_STRING , sTdCustType.sMainNote);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertSQSP_APPLY_REC(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sT_SQSP_APPLY_REC
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

T_SQSP_APPLY_REC	sT_SQSP_APPLY_REC;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sT_SQSP_APPLY_REC.sApplyNo);
	Coltrim(sT_SQSP_APPLY_REC.sPhoneNo);
	Coltrim(sT_SQSP_APPLY_REC.sApplyWorkId);
	Coltrim(sT_SQSP_APPLY_REC.sApplyTime);
	Coltrim(sT_SQSP_APPLY_REC.sFuncCode);
	Coltrim(sT_SQSP_APPLY_REC.sProcessStatus);
	Coltrim(sT_SQSP_APPLY_REC.sOrgCode);
	Coltrim(sT_SQSP_APPLY_REC.sOrgId);

	EXEC SQL INSERT INTO SQSP_APPLY_REC(APPLY_NO, PHONE_NO, APPLY_WORK_ID, APPLY_TIME,
	                                    FUNC_CODE, PROCESS_STATUS, ORG_CODE, ORG_ID)
		     VALUES(
		            :sT_SQSP_APPLY_REC.sApplyNo        ,
                    :sT_SQSP_APPLY_REC.sPhoneNo        ,
                    :sT_SQSP_APPLY_REC.sApplyWorkId    ,
                    to_date(:sT_SQSP_APPLY_REC.sApplyTime,'yyyymmdd hh24:mi:ss')      ,
                    :sT_SQSP_APPLY_REC.sFuncCode       ,
                    :sT_SQSP_APPLY_REC.sProcessStatus  ,
                    :sT_SQSP_APPLY_REC.sOrgCode        ,
                    :sT_SQSP_APPLY_REC.sOrgId
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"SQSP_APPLY_REC");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "apply_no"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sApplyNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType, "apply_work_id" , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sApplyWorkId   );
	OrderSetDataItem(&vMsgBodyType, "apply_time"    , ORDERDATAFORMAT_DATE  , sT_SQSP_APPLY_REC.sApplyTime     );
	OrderSetDataItem(&vMsgBodyType, "func_code"     , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sFuncCode      );
	OrderSetDataItem(&vMsgBodyType, "process_status", ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sProcessStatus );
	OrderSetDataItem(&vMsgBodyType, "org_code"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sOrgCode       );
	OrderSetDataItem(&vMsgBodyType, "org_id"        , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sOrgId         );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteSQSP_APPLY_REC(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_apply_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_apply_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE SQSP_APPLY_REC a WHERE a.apply_no=:NG_Param0 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"SQSP_APPLY_REC");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"apply_no",ORDERDATAFORMAT_STRING,i_apply_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateSQSP_APPLY_REC(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_apply_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_apply_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		T_SQSP_APPLY_REC	sT_SQSP_APPLY_REC;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE SQSP_APPLY_REC a SET %s WHERE a.apply_no=:NG_Param0 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT apply_no       ,
                    nvl(phone_no,chr(0))       ,
                    nvl(apply_work_id,chr(0))  ,
                    nvl(to_char(apply_time,'yyyymmdd hh24:mi:ss'),chr(0))     ,
                    nvl(func_code,chr(0))      ,
                    nvl(process_status,chr(0)) ,
                    nvl(org_code,chr(0))       ,
                    nvl(org_id,chr(0))
			INTO :sT_SQSP_APPLY_REC.sApplyNo      ,
                 :sT_SQSP_APPLY_REC.sPhoneNo      ,
                 :sT_SQSP_APPLY_REC.sApplyWorkId  ,
                 :sT_SQSP_APPLY_REC.sApplyTime    ,
                 :sT_SQSP_APPLY_REC.sFuncCode     ,
                 :sT_SQSP_APPLY_REC.sProcessStatus,
                 :sT_SQSP_APPLY_REC.sOrgCode      ,
                 :sT_SQSP_APPLY_REC.sOrgId
			FROM SQSP_APPLY_REC
			WHERE apply_no = :i_apply_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sT_SQSP_APPLY_REC.sApplyNo      );
	Coltrim(sT_SQSP_APPLY_REC.sPhoneNo      );
	Coltrim(sT_SQSP_APPLY_REC.sApplyWorkId  );
	Coltrim(sT_SQSP_APPLY_REC.sApplyTime    );
	Coltrim(sT_SQSP_APPLY_REC.sFuncCode     );
	Coltrim(sT_SQSP_APPLY_REC.sProcessStatus);
	Coltrim(sT_SQSP_APPLY_REC.sOrgCode      );
	Coltrim(sT_SQSP_APPLY_REC.sOrgId        );

	strcpy(v_table_name,"SQSP_APPLY_REC");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"apply_no",ORDERDATAFORMAT_STRING,i_apply_no);

	OrderSetDataItem(&vMsgBodyType, "apply_no"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sApplyNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType, "apply_work_id" , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sApplyWorkId   );
	OrderSetDataItem(&vMsgBodyType, "apply_time"    , ORDERDATAFORMAT_DATE  , sT_SQSP_APPLY_REC.sApplyTime     );
	OrderSetDataItem(&vMsgBodyType, "func_code"     , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sFuncCode      );
	OrderSetDataItem(&vMsgBodyType, "process_status", ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sProcessStatus );
	OrderSetDataItem(&vMsgBodyType, "org_code"      , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sOrgCode       );
	OrderSetDataItem(&vMsgBodyType, "org_id"        , ORDERDATAFORMAT_STRING, sT_SQSP_APPLY_REC.sOrgId         );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertConMarkPreYYYYMM(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdConMarkPreYYYYMM
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConMarkPreYYYYMM	sTdConMarkPreYYYYMM;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	char v_parameter_array[DLMAXITEMS][DLINTERFACEDATA];		/*参数列表*/
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdConMarkPreYYYYMM.sContractNo);
	Coltrim(sTdConMarkPreYYYYMM.sDetailCode);
	Coltrim(sTdConMarkPreYYYYMM.sBillYm);
	Coltrim(sTdConMarkPreYYYYMM.sTotalMark);
	Coltrim(sTdConMarkPreYYYYMM.sAvailableMark);
	Coltrim(sTdConMarkPreYYYYMM.sOpTime);

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DCONMARKPRE%s",v_current_month);

	/*设置绑定变量*/
	strcpy(v_parameter_array[0],  sTdConMarkPreYYYYMM.sContractNo);
	strcpy(v_parameter_array[1],  sTdConMarkPreYYYYMM.sDetailCode);
	strcpy(v_parameter_array[2],  sTdConMarkPreYYYYMM.sBillYm);
	strcpy(v_parameter_array[3],  sTdConMarkPreYYYYMM.sTotalMark);
	strcpy(v_parameter_array[4],  sTdConMarkPreYYYYMM.sAvailableMark);
	strcpy(v_parameter_array[5],  sTdConMarkPreYYYYMM.sOpTime);

	/*SQL插入语句*/
	sprintf(v_sql_buff,"INSERT INTO %s(CONTRACT_NO, DETAIL_CODE, BILL_YM, TOTAL_MARK, AVAILABLE_MARK, OP_TIME) \
							VALUES(to_number(:NG_Param1),to_number(:NG_Param2),to_number(:NG_Param3), \
							       to_number(:NG_Param4),to_number(:NG_Param5),to_date(:NG_Param6,'yyyymmdd hh24:mi:ss'))",v_table_name);

	/*插入表dBillCustDetail*/
#ifdef _DEBUG_
	printf("插入表%s：%s\n",v_table_name,v_sql_buff);
#endif

	v_ret=OrderMultiParaDML(v_sql_buff,&v_parameter_array);

	if (v_ret!=0&&SQLCODE!=SQLOK)
		return -500040;

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "contract_no"    ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "detail_code"    ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "bill_ym"        ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sBillYm);
	OrderSetDataItem(&vMsgBodyType, "total_mark"     ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sTotalMark);
	OrderSetDataItem(&vMsgBodyType, "available_mark" ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sAvailableMark);
	OrderSetDataItem(&vMsgBodyType, "op_time"        ,ORDERDATAFORMAT_DATE   , sTdConMarkPreYYYYMM.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteConMarkPreYYYYMM(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConMarkPreYYYYMMIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DCONMARKPRE%s",v_current_month);

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE %s a WHERE a.contract_no=to_number(:NG_Param0) \
	        and a.detail_code=to_number(:NG_Param1) %s ",v_table_name,i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_code",    ORDERDATAFORMAT_NUMBER,oldIndex.sDetailCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateConMarkPreYYYYMM(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConMarkPreYYYYMMIndex oldIndex;
TdConMarkPreYYYYMMIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];
	char v_parameter[DLMAXITEMS][DLINTERFACEDATA];		/*存储查询语句中所用参数的值*/

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DCONMARKPRE%s",v_current_month);

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdConMarkPreYYYYMM	sTdConMarkPreYYYYMM;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE %s a SET %s WHERE a.contract_no=to_number(:NG_Param0) \
	                    and a.detail_code=to_number(:NG_Param1) %s ",v_table_name,i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	/*查询更新内容*/
	init(v_sql_buff);
	sprintf(v_sql_buff,"SELECT to_char(contract_no),to_char(detail_code),to_char(bill_ym),\
                        to_char(total_mark),to_char(available_mark),nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)) \
							FROM %s a WHERE a.contract_no=to_number(:NG_Param0)\
								AND a.detail_code=to_number(:NG_Param1) ",v_table_name);

	EXEC SQL PREPARE select_stmt FROM :v_sql_buff;
	EXEC SQL EXECUTE select_stmt
	            INTO :sTdConMarkPreYYYYMM.sContractNo,
                     :sTdConMarkPreYYYYMM.sDetailCode,
                     :sTdConMarkPreYYYYMM.sBillYm,
                     :sTdConMarkPreYYYYMM.sTotalMark,
                     :sTdConMarkPreYYYYMM.sAvailableMark,
                     :sTdConMarkPreYYYYMM.sOpTime
			   USING :newIndex.sContractNo,
					 :newIndex.sDetailCode;
	if (SQLCODE!=SQLOK)
	{
		return -500047;
	}

	Coltrim(sTdConMarkPreYYYYMM.sContractNo);
	Coltrim(sTdConMarkPreYYYYMM.sDetailCode);
	Coltrim(sTdConMarkPreYYYYMM.sBillYm);
	Coltrim(sTdConMarkPreYYYYMM.sTotalMark);
	Coltrim(sTdConMarkPreYYYYMM.sAvailableMark);
	Coltrim(sTdConMarkPreYYYYMM.sOpTime);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",    ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo);
	OrderSetPrimaryKey(&vMsgBodyType,"detail_code",    ORDERDATAFORMAT_NUMBER,oldIndex.sDetailCode);

	OrderSetDataItem(&vMsgBodyType, "contract_no"    ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "detail_code"    ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "bill_ym"        ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sBillYm);
	OrderSetDataItem(&vMsgBodyType, "total_mark"     ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sTotalMark);
	OrderSetDataItem(&vMsgBodyType, "available_mark" ,ORDERDATAFORMAT_NUMBER , sTdConMarkPreYYYYMM.sAvailableMark);
	OrderSetDataItem(&vMsgBodyType, "op_time"        ,ORDERDATAFORMAT_DATE   , sTdConMarkPreYYYYMM.sOpTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertMarkChangeDetailYYYYMM(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdMarkChangeDetailYYYYMM
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMarkChangeDetailYYYYMM	sTdMarkChangeDetailYYYYMM;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	char v_parameter_array[DLMAXITEMS][DLINTERFACEDATA];		/*参数列表*/
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdMarkChangeDetailYYYYMM. sOpAccept         );
	Coltrim(sTdMarkChangeDetailYYYYMM. sContractNo       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sDetailCode       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sBillYm           );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangeSeq        );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangetype       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sPreDetailValue   );
	Coltrim(sTdMarkChangeDetailYYYYMM. sPreTotalValue    );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangeValue      );
	Coltrim(sTdMarkChangeDetailYYYYMM. sAfterDetailValue );
	Coltrim(sTdMarkChangeDetailYYYYMM.sAfterTotalValue  );
	Coltrim(sTdMarkChangeDetailYYYYMM.sLoginNo          );
	Coltrim(sTdMarkChangeDetailYYYYMM.sOpTime           );
	Coltrim(sTdMarkChangeDetailYYYYMM.sBackFlag         );
	Coltrim(sTdMarkChangeDetailYYYYMM.sOpCode           );
	Coltrim(sTdMarkChangeDetailYYYYMM.sSmCode           );

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DMARKCHANGEDETAIL%s",v_current_month);

	/*设置绑定变量*/
	strcpy(v_parameter_array[0],  sTdMarkChangeDetailYYYYMM. sOpAccept         );
	strcpy(v_parameter_array[1],  sTdMarkChangeDetailYYYYMM. sContractNo       );
	strcpy(v_parameter_array[2],  sTdMarkChangeDetailYYYYMM. sDetailCode       );
	strcpy(v_parameter_array[3],  sTdMarkChangeDetailYYYYMM. sBillYm           );
	strcpy(v_parameter_array[4],  sTdMarkChangeDetailYYYYMM. sChangeSeq        );
	strcpy(v_parameter_array[5],  sTdMarkChangeDetailYYYYMM. sChangetype       );
	strcpy(v_parameter_array[6],  sTdMarkChangeDetailYYYYMM. sPreDetailValue   );
	strcpy(v_parameter_array[7],  sTdMarkChangeDetailYYYYMM. sPreTotalValue    );
	strcpy(v_parameter_array[8],  sTdMarkChangeDetailYYYYMM. sChangeValue      );
	strcpy(v_parameter_array[9],  sTdMarkChangeDetailYYYYMM. sAfterDetailValue );
	strcpy(v_parameter_array[10],  sTdMarkChangeDetailYYYYMM.sAfterTotalValue  );
	strcpy(v_parameter_array[11],  sTdMarkChangeDetailYYYYMM.sLoginNo          );
	strcpy(v_parameter_array[12],  sTdMarkChangeDetailYYYYMM.sOpTime           );
	strcpy(v_parameter_array[13],  sTdMarkChangeDetailYYYYMM.sBackFlag         );
	strcpy(v_parameter_array[14],  sTdMarkChangeDetailYYYYMM.sOpCode           );
	strcpy(v_parameter_array[15],  sTdMarkChangeDetailYYYYMM.sSmCode           );

	/*SQL插入语句*/
	sprintf(v_sql_buff,"INSERT INTO %s(OP_ACCEPT, CONTRACT_NO, DETAIL_CODE, BILL_YM, CHANGE_SEQ,\
	                    CHANGETYPE, PRE_DETAIL_VALUE, PRE_TOTAL_VALUE, CHANGE_VALUE, \
	                    AFTER_DETAIL_VALUE, AFTER_TOTAL_VALUE, LOGIN_NO, OP_TIME, BACK_FLAG, OP_CODE, SM_CODE) \
							VALUES(to_number(:NG_Param0),to_number(:NG_Param1),to_number(:NG_Param2),to_number(:NG_Param3),to_number(:NG_Param4),:NG_Param5,\
                          to_number(:NG_Param6),to_number(:NG_Param7),to_number(:NG_Param8),to_number(:NG_Param9),to_number(:NG_Param10),:NG_Param11, \
                          to_date(:NG_Param12,'yyyymmdd hh24:mi:ss'),:NG_Param13,:NG_Param14,:NG_Param15)",v_table_name);

#ifdef _DEBUG_
	printf("插入表%s：%s\n",v_table_name,v_sql_buff);
#endif

	v_ret=OrderMultiParaDML(v_sql_buff,&v_parameter_array);

	if (v_ret!=0&&SQLCODE!=SQLOK)
		return -500040;

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "op_accept"          , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sOpAccept        );
	OrderSetDataItem(&vMsgBodyType, "contract_no"        , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sContractNo      );
	OrderSetDataItem(&vMsgBodyType, "detail_code"        , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sDetailCode      );
	OrderSetDataItem(&vMsgBodyType, "bill_ym"            , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sBillYm          );
	OrderSetDataItem(&vMsgBodyType, "change_seq"         , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sChangeSeq       );
	OrderSetDataItem(&vMsgBodyType, "changetype"         , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sChangetype      );
	OrderSetDataItem(&vMsgBodyType, "pre_detail_value"   , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sPreDetailValue  );
	OrderSetDataItem(&vMsgBodyType, "pre_total_value"    , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sPreTotalValue   );
	OrderSetDataItem(&vMsgBodyType, "change_value"       , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sChangeValue     );
	OrderSetDataItem(&vMsgBodyType, "after_detail_value" , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sAfterDetailValue);
	OrderSetDataItem(&vMsgBodyType, "after_total_value"  , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sAfterTotalValue );
	OrderSetDataItem(&vMsgBodyType, "login_no"           , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sLoginNo         );
	OrderSetDataItem(&vMsgBodyType, "op_time"            , ORDERDATAFORMAT_DATE   , sTdMarkChangeDetailYYYYMM.sOpTime          );
	OrderSetDataItem(&vMsgBodyType, "back_flag"          , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sBackFlag        );
	OrderSetDataItem(&vMsgBodyType, "op_code"            , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sOpCode          );
	OrderSetDataItem(&vMsgBodyType, "sm_code"            , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sSmCode          );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteMarkChangeDetailYYYYMM(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMarkChangeDetailYYYYMMIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DMARKCHANGEDETAIL%s",v_current_month);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE %s a WHERE a.op_accept=to_number(:NG_Param0) \
	        and a.CONTRACT_NO=to_number(:NG_Param1) and a.DETAIL_CODE=to_number(:NG_Param2) \
	        and a.BILL_YM=to_number(:NG_Param3) and a.CHANGE_SEQ=to_number(:NG_Param4) %s ",v_table_name,i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "op_accept"   , ORDERDATAFORMAT_NUMBER,oldIndex.sOpAccept        );
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no" , ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo      );
	OrderSetPrimaryKey(&vMsgBodyType, "detail_code" , ORDERDATAFORMAT_NUMBER,oldIndex.sDetailCode      );
	OrderSetPrimaryKey(&vMsgBodyType, "bill_ym"     , ORDERDATAFORMAT_NUMBER,oldIndex.sBillYm          );
	OrderSetPrimaryKey(&vMsgBodyType, "change_seq"  , ORDERDATAFORMAT_NUMBER,oldIndex.sChangeSeq       );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateMarkChangeDetailYYYYMM(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMarkChangeDetailYYYYMMIndex oldIndex;
TdMarkChangeDetailYYYYMMIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_current_month[6+1];
	char v_table_name[DLTABLENAME];
	char v_parameter[DLMAXITEMS][DLINTERFACEDATA];		/*存储查询语句中所用参数的值*/

	init(v_current_month);
	EXEC SQL SELECT to_char(sysdate,'yyyymm')
	           INTO :v_current_month
	           FROM dual;

	sprintf(v_table_name,"DMARKCHANGEDETAIL%s",v_current_month);

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdMarkChangeDetailYYYYMM	sTdMarkChangeDetailYYYYMM;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE %s a SET %s WHERE a.op_accept=to_number(:NG_Param0) \
	        and a.CONTRACT_NO=to_number(:NG_Param1) and a.DETAIL_CODE=to_number(:NG_Param2) \
	        and a.BILL_YM=to_number(:NG_Param3) and a.CHANGE_SEQ=to_number(:NG_Param4) %s ",v_table_name,i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	/*查询更新内容*/
	init(v_sql_buff);
	sprintf(v_sql_buff,"SELECT to_char(op_accept),to_char(contract_no),to_char(detail_code),to_char(bill_ym),\
                         to_char(change_seq ),changetype,to_char(pre_detail_value ),to_char(pre_total_value ),\
                        to_char(change_value),to_char(after_detail_value),to_char(after_total_value ),login_no,\
                        to_char(op_time,'yyyymmdd hh24:mi:ss'),back_flag,op_code  ,sm_code \
							FROM %s a WHERE a.op_accept=to_number(:NG_Param0) \
	                         and a.CONTRACT_NO=to_number(:NG_Param1) and a.DETAIL_CODE=to_number(:NG_Param2) \
	                         and a.BILL_YM=to_number(:NG_Param3) and a.CHANGE_SEQ=to_number(:NG_Param4) ",v_table_name);

	EXEC SQL PREPARE select_stmt FROM :v_sql_buff;
	EXEC SQL EXECUTE select_stmt
	            INTO :sTdMarkChangeDetailYYYYMM. sOpAccept        ,
                     :sTdMarkChangeDetailYYYYMM. sContractNo      ,
                     :sTdMarkChangeDetailYYYYMM. sDetailCode      ,
                     :sTdMarkChangeDetailYYYYMM. sBillYm          ,
                     :sTdMarkChangeDetailYYYYMM. sChangeSeq       ,
                     :sTdMarkChangeDetailYYYYMM. sChangetype      ,
                     :sTdMarkChangeDetailYYYYMM. sPreDetailValue  ,
                     :sTdMarkChangeDetailYYYYMM. sPreTotalValue   ,
                     :sTdMarkChangeDetailYYYYMM. sChangeValue     ,
                     :sTdMarkChangeDetailYYYYMM. sAfterDetailValue,
                     :sTdMarkChangeDetailYYYYMM.sAfterTotalValue  ,
                     :sTdMarkChangeDetailYYYYMM.sLoginNo          ,
                     :sTdMarkChangeDetailYYYYMM.sOpTime           ,
                     :sTdMarkChangeDetailYYYYMM.sBackFlag         ,
                     :sTdMarkChangeDetailYYYYMM.sOpCode           ,
                     :sTdMarkChangeDetailYYYYMM.sSmCode
			   USING :newIndex.sOpAccept  ,
                     :newIndex.sContractNo,
                     :newIndex.sDetailCode,
                     :newIndex.sBillYm    ,
                     :newIndex.sChangeSeq;
	if (SQLCODE!=SQLOK)
	{
		return -500047;
	}

	Coltrim(sTdMarkChangeDetailYYYYMM. sOpAccept         );
	Coltrim(sTdMarkChangeDetailYYYYMM. sContractNo       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sDetailCode       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sBillYm           );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangeSeq        );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangetype       );
	Coltrim(sTdMarkChangeDetailYYYYMM. sPreDetailValue   );
	Coltrim(sTdMarkChangeDetailYYYYMM. sPreTotalValue    );
	Coltrim(sTdMarkChangeDetailYYYYMM. sChangeValue      );
	Coltrim(sTdMarkChangeDetailYYYYMM. sAfterDetailValue );
	Coltrim(sTdMarkChangeDetailYYYYMM.sAfterTotalValue   );
	Coltrim(sTdMarkChangeDetailYYYYMM.sLoginNo           );
	Coltrim(sTdMarkChangeDetailYYYYMM.sOpTime            );
	Coltrim(sTdMarkChangeDetailYYYYMM.sBackFlag          );
	Coltrim(sTdMarkChangeDetailYYYYMM.sOpCode            );
	Coltrim(sTdMarkChangeDetailYYYYMM.sSmCode            );


	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "op_accept"   , ORDERDATAFORMAT_NUMBER,oldIndex.sOpAccept        );
	OrderSetPrimaryKey(&vMsgBodyType, "contract_no" , ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo      );
	OrderSetPrimaryKey(&vMsgBodyType, "detail_code" , ORDERDATAFORMAT_NUMBER,oldIndex.sDetailCode      );
	OrderSetPrimaryKey(&vMsgBodyType, "bill_ym"     , ORDERDATAFORMAT_NUMBER,oldIndex.sBillYm          );
	OrderSetPrimaryKey(&vMsgBodyType, "change_seq"  , ORDERDATAFORMAT_NUMBER,oldIndex.sChangeSeq       );

	OrderSetDataItem(&vMsgBodyType, "op_accept"          , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sOpAccept        );
	OrderSetDataItem(&vMsgBodyType, "contract_no"        , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sContractNo      );
	OrderSetDataItem(&vMsgBodyType, "detail_code"        , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sDetailCode      );
	OrderSetDataItem(&vMsgBodyType, "bill_ym"            , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sBillYm          );
	OrderSetDataItem(&vMsgBodyType, "change_seq"         , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sChangeSeq       );
	OrderSetDataItem(&vMsgBodyType, "changetype"         , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sChangetype      );
	OrderSetDataItem(&vMsgBodyType, "pre_detail_value"   , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sPreDetailValue  );
	OrderSetDataItem(&vMsgBodyType, "pre_total_value"    , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sPreTotalValue   );
	OrderSetDataItem(&vMsgBodyType, "change_value"       , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sChangeValue     );
	OrderSetDataItem(&vMsgBodyType, "after_detail_value" , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sAfterDetailValue);
	OrderSetDataItem(&vMsgBodyType, "after_total_value"  , ORDERDATAFORMAT_NUMBER , sTdMarkChangeDetailYYYYMM.sAfterTotalValue );
	OrderSetDataItem(&vMsgBodyType, "login_no"           , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sLoginNo         );
	OrderSetDataItem(&vMsgBodyType, "op_time"            , ORDERDATAFORMAT_DATE   , sTdMarkChangeDetailYYYYMM.sOpTime          );
	OrderSetDataItem(&vMsgBodyType, "back_flag"          , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sBackFlag        );
	OrderSetDataItem(&vMsgBodyType, "op_code"            , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sOpCode          );
	OrderSetDataItem(&vMsgBodyType, "sm_code"            , ORDERDATAFORMAT_STRING , sTdMarkChangeDetailYYYYMM.sSmCode          );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustSignMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustSignMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustSignMsg	sTdCustSignMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustSignMsg.sPhoneNo);
	Coltrim(sTdCustSignMsg.sIdNo);

	EXEC SQL INSERT INTO dCustSignMsg(phone_no,id_no)
		VALUES(:sTdCustSignMsg.sPhoneNo,to_number(:sTdCustSignMsg.sIdNo));

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTSIGNMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"phone_no",		ORDERDATAFORMAT_STRING, sTdCustSignMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"id_no",			ORDERDATAFORMAT_NUMBER, sTdCustSignMsg.sIdNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteCustSignMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustSignMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTSIGNMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustSignMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustSignMsg	sTdCustSignMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustSignMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT phone_no,to_char(id_no)
			INTO :sTdCustSignMsg.sPhoneNo,:sTdCustSignMsg.sIdNo
			FROM dCustSignMsg
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustSignMsg.sPhoneNo);
	Coltrim(sTdCustSignMsg.sIdNo);

	strcpy(v_table_name,"DCUSTSIGNMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"phone_no",	ORDERDATAFORMAT_STRING, sTdCustSignMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER, sTdCustSignMsg.sIdNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertTransBind(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdTransBind
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTransBind tdTransBind;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdTransBind.sIdNo       );
	Coltrim(tdTransBind.sPhoneNo    );
	Coltrim(tdTransBind.sTownCode   );
	Coltrim(tdTransBind.sLoginNo    );
	Coltrim(tdTransBind.sOrgCode    );
	Coltrim(tdTransBind.sOpTime     );
	Coltrim(tdTransBind.sLoginAccept);
	Coltrim(tdTransBind.sOrgId      );
	Coltrim(tdTransBind.sGroupId    );

	EXEC SQL INSERT INTO dTransBind(id_no, phone_no, town_code, login_no,
	                                org_code, op_time, login_accept, org_id, group_id)
		     				VALUES(
		     				       to_number(:tdTransBind.sIdNo)       ,
                                   :tdTransBind.sPhoneNo    ,
                                   :tdTransBind.sTownCode   ,
                                   :tdTransBind.sLoginNo    ,
                                   :tdTransBind.sOrgCode    ,
                                   to_date(:tdTransBind.sOpTime,'yyyymmdd hh24:mi:ss')     ,
                                   to_number(:tdTransBind.sLoginAccept),
                                   :tdTransBind.sOrgId      ,
                                   :tdTransBind.sGroupId
		     	    				);
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DTRANSBIND");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"       , ORDERDATAFORMAT_NUMBER, tdTransBind.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    , ORDERDATAFORMAT_STRING, tdTransBind.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "town_code"   , ORDERDATAFORMAT_STRING, tdTransBind.sTownCode   );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING, tdTransBind.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "org_code"    , ORDERDATAFORMAT_STRING, tdTransBind.sOrgCode    );
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE,   tdTransBind.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_accept", ORDERDATAFORMAT_NUMBER, tdTransBind.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "org_id"      , ORDERDATAFORMAT_STRING, tdTransBind.sOrgId      );
	OrderSetDataItem(&vMsgBodyType, "group_id"    , ORDERDATAFORMAT_STRING, tdTransBind.sGroupId    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderDeleteTransBind(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTransBindIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dTransBind a WHERE id_no=to_number(:NG_Param0) \
		and a.org_code=rpad(:NG_Param1,9,' ') %s ", i_where_sql);

	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DTRANSBIND");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",			ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "org_code",	    ORDERDATAFORMAT_STRING, oldIndex.sOrgCode);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}


int OrderUpdateTransBind(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTransBindIndex oldIndex;
TdTransBindIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdTransBind	tdTransBind;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dTransBind a SET %s WHERE id_no=to_number(:NG_Param0) \
		and a.org_code=rpad(:NG_Param1,9,' ') %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)), nvl(phone_no,chr(0)), nvl(town_code,chr(0)), nvl(login_no,chr(0)), nvl(org_code,chr(0)),
	                nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)), nvl(to_char(login_accept),chr(0)), nvl(org_id,chr(0)), nvl(group_id,chr(0))
			   INTO :tdTransBind.sIdNo        ,
                    :tdTransBind.sPhoneNo     ,
                    :tdTransBind.sTownCode    ,
                    :tdTransBind.sLoginNo     ,
                    :tdTransBind.sOrgCode     ,
                    :tdTransBind.sOpTime      ,
                    :tdTransBind.sLoginAccept ,
                    :tdTransBind.sOrgId       ,
                    :tdTransBind.sGroupId
			   FROM dTransBind
			  WHERE id_no=to_number(:newIndex.sIdNo) and org_code=:newIndex.sOrgCode;
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdTransBind.sIdNo        );
	Coltrim(tdTransBind.sPhoneNo     );
	Coltrim(tdTransBind.sTownCode    );
	Coltrim(tdTransBind.sLoginNo     );
	Coltrim(tdTransBind.sOrgCode     );
	Coltrim(tdTransBind.sOpTime      );
	Coltrim(tdTransBind.sLoginAccept );
	Coltrim(tdTransBind.sOrgId       );
	Coltrim(tdTransBind.sGroupId     );


	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DTRANSBIND");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",			ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "org_code",	    ORDERDATAFORMAT_STRING, oldIndex.sOrgCode);

	OrderSetDataItem(&vMsgBodyType, "id_no"       , ORDERDATAFORMAT_NUMBER, tdTransBind.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    , ORDERDATAFORMAT_STRING, tdTransBind.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "town_code"   , ORDERDATAFORMAT_STRING, tdTransBind.sTownCode   );
	OrderSetDataItem(&vMsgBodyType, "login_no"    , ORDERDATAFORMAT_STRING, tdTransBind.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "org_code"    , ORDERDATAFORMAT_STRING, tdTransBind.sOrgCode    );
	OrderSetDataItem(&vMsgBodyType, "op_time"     , ORDERDATAFORMAT_DATE,   tdTransBind.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_accept", ORDERDATAFORMAT_NUMBER, tdTransBind.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "org_id"      , ORDERDATAFORMAT_STRING, tdTransBind.sOrgId      );
	OrderSetDataItem(&vMsgBodyType, "group_id"    , ORDERDATAFORMAT_STRING, tdTransBind.sGroupId    );

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}


int OrderInsertCustFuncAdd(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustFuncAdd
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncAdd	sTdCustFuncAdd;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustFuncAdd.sIdNo        );
	Coltrim(sTdCustFuncAdd.sFunctionCode);
	Coltrim(sTdCustFuncAdd.sFunctionType);
	Coltrim(sTdCustFuncAdd.sBeginTime   );
	Coltrim(sTdCustFuncAdd.sBillTime    );
	Coltrim(sTdCustFuncAdd.sFavourMonth );
	Coltrim(sTdCustFuncAdd.sAddNo       );
	Coltrim(sTdCustFuncAdd.sOtherAttr   );

	EXEC SQL INSERT INTO dCustFuncAdd(ID_NO, FUNCTION_CODE, FUNCTION_TYPE, BEGIN_TIME, BILL_TIME, FAVOUR_MONTH, ADD_NO, OTHER_ATTR)
		     VALUES(to_number(:sTdCustFuncAdd.sIdNo)        ,
                    :sTdCustFuncAdd.sFunctionCode,
                    :sTdCustFuncAdd.sFunctionType,
                    to_date(:sTdCustFuncAdd.sBeginTime,'yyyymmdd hh24:mi:ss')   ,
                    to_date(:sTdCustFuncAdd.sBillTime ,'yyyymmdd hh24:mi:ss')   ,
                    to_number(:sTdCustFuncAdd.sFavourMonth) ,
                    :sTdCustFuncAdd.sAddNo       ,
                    :sTdCustFuncAdd.sOtherAttr
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTFUNCADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"        ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAdd.sIdNo        );
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"begin_time"   ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAdd.sBeginTime   );
	OrderSetDataItem(&vMsgBodyType,"bill_time"    ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAdd.sBillTime    );
	OrderSetDataItem(&vMsgBodyType,"favour_month" ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAdd.sFavourMonth );
	OrderSetDataItem(&vMsgBodyType,"add_no"       ,ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sAddNo       );
	OrderSetDataItem(&vMsgBodyType,"other_attr"   ,ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sOtherAttr   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustFuncAdd(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncAddIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustFuncAdd a WHERE a.id_no=to_number(:NG_Param0) and a.function_code=:NG_Param1 and a.function_type=:NG_Param2 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTFUNCADD");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustFuncAdd(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncAddIndex oldIndex;
TdCustFuncAddIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustFuncAdd	sTdCustFuncAdd;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustFuncAdd a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.function_type=:NG_Param1 and a.function_code =:NG_Param2 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no), function_code, function_type,
	                nvl(to_char(begin_time,'yyyymmdd hh24:mi:ss'),chr(0)), nvl(to_char(bill_time ,'yyyymmdd hh24:mi:ss'),chr(0)),
	                nvl(to_char(favour_month),chr(0)), nvl(add_no,chr(0)), nvl(other_attr,chr(0))
			   INTO :sTdCustFuncAdd.sIdNo        ,
                    :sTdCustFuncAdd.sFunctionCode,
                    :sTdCustFuncAdd.sFunctionType,
                    :sTdCustFuncAdd.sBeginTime   ,
                    :sTdCustFuncAdd.sBillTime    ,
                    :sTdCustFuncAdd.sFavourMonth ,
                    :sTdCustFuncAdd.sAddNo       ,
                    :sTdCustFuncAdd.sOtherAttr
			   FROM dCustFuncAdd
			  WHERE id_no = :newIndex.sIdNo and function_type = :newIndex.sFunctionType and function_code = :newIndex.sFunctionCode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustFuncAdd.sIdNo        );
	Coltrim(sTdCustFuncAdd.sFunctionCode);
	Coltrim(sTdCustFuncAdd.sFunctionType);
	Coltrim(sTdCustFuncAdd.sBeginTime   );
	Coltrim(sTdCustFuncAdd.sBillTime    );
	Coltrim(sTdCustFuncAdd.sFavourMonth );
	Coltrim(sTdCustFuncAdd.sAddNo       );
	Coltrim(sTdCustFuncAdd.sOtherAttr   );


	strcpy(v_table_name,"DCUSTFUNCADD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);

	OrderSetDataItem(&vMsgBodyType,"id_no"        ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAdd.sIdNo        );
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"begin_time"   ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAdd.sBeginTime   );
	OrderSetDataItem(&vMsgBodyType,"bill_time"    ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAdd.sBillTime    );
	OrderSetDataItem(&vMsgBodyType,"favour_month" ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAdd.sFavourMonth );
	OrderSetDataItem(&vMsgBodyType,"add_no"       ,ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sAddNo       );
	OrderSetDataItem(&vMsgBodyType,"other_attr"   ,ORDERDATAFORMAT_STRING,sTdCustFuncAdd.sOtherAttr   );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCustFuncAddHis(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustFuncAddHis
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncAddHis	sTdCustFuncAddHis;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustFuncAddHis.sIdNo        );
	Coltrim(sTdCustFuncAddHis.sFunctionType);
	Coltrim(sTdCustFuncAddHis.sFunctionCode);
	Coltrim(sTdCustFuncAddHis.sBeginTime   );
	Coltrim(sTdCustFuncAddHis.sBillTime    );
	Coltrim(sTdCustFuncAddHis.sFavourMonth );
	Coltrim(sTdCustFuncAddHis.sAddNo       );
	Coltrim(sTdCustFuncAddHis.sOtherAttr   );
	Coltrim(sTdCustFuncAddHis.sUpdateLogin );
	Coltrim(sTdCustFuncAddHis.sUpdateAccept);
	Coltrim(sTdCustFuncAddHis.sUpdateDate  );
	Coltrim(sTdCustFuncAddHis.sUpdateTime  );
	Coltrim(sTdCustFuncAddHis.sUpdateCode  );
	Coltrim(sTdCustFuncAddHis.sUpdateType  );

	EXEC SQL INSERT INTO dCustFuncAddHis(ID_NO, FUNCTION_TYPE, FUNCTION_CODE, BEGIN_TIME, BILL_TIME,
	                                     FAVOUR_MONTH, ADD_NO, OTHER_ATTR, UPDATE_LOGIN, UPDATE_ACCEPT,
	                                     UPDATE_DATE, UPDATE_TIME, UPDATE_CODE, UPDATE_TYPE)
		     VALUES(to_number(:sTdCustFuncAddHis.sIdNo)        ,
                    :sTdCustFuncAddHis.sFunctionType,
                    :sTdCustFuncAddHis.sFunctionCode,
                    to_date(:sTdCustFuncAddHis.sBeginTime,'yyyymmdd hh24:mi:ss')   ,
                    to_date(:sTdCustFuncAddHis.sBillTime ,'yyyymmdd hh24:mi:ss')   ,
                    to_number(:sTdCustFuncAddHis.sFavourMonth) ,
                    :sTdCustFuncAddHis.sAddNo       ,
                    :sTdCustFuncAddHis.sOtherAttr   ,
                    :sTdCustFuncAddHis.sUpdateLogin ,
                    to_number(:sTdCustFuncAddHis.sUpdateAccept),
                    to_number(:sTdCustFuncAddHis.sUpdateDate  ),
                    to_date(:sTdCustFuncAddHis.sUpdateTime,'yyyymmdd hh24:mi:ss')  ,
                    :sTdCustFuncAddHis.sUpdateCode  ,
                    :sTdCustFuncAddHis.sUpdateType
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTFUNCADDHIS");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"        ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAddHis.sIdNo        );
	OrderSetDataItem(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sFunctionType);
	OrderSetDataItem(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sFunctionCode);
	OrderSetDataItem(&vMsgBodyType,"begin_time"   ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAddHis.sBeginTime   );
	OrderSetDataItem(&vMsgBodyType,"bill_time"    ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAddHis.sBillTime    );
	OrderSetDataItem(&vMsgBodyType,"favour_month" ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAddHis.sFavourMonth );
	OrderSetDataItem(&vMsgBodyType,"add_no"       ,ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sAddNo       );
	OrderSetDataItem(&vMsgBodyType,"other_attr"   ,ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sOtherAttr   );
	OrderSetDataItem(&vMsgBodyType,"update_login" ,ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sUpdateLogin );
	OrderSetDataItem(&vMsgBodyType,"update_accept",ORDERDATAFORMAT_NUMBER,sTdCustFuncAddHis.sUpdateAccept);
	OrderSetDataItem(&vMsgBodyType,"update_date"  ,ORDERDATAFORMAT_NUMBER,sTdCustFuncAddHis.sUpdateDate  );
	OrderSetDataItem(&vMsgBodyType,"update_time"  ,ORDERDATAFORMAT_DATE  ,sTdCustFuncAddHis.sUpdateTime  );
	OrderSetDataItem(&vMsgBodyType,"update_code"  ,ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sUpdateCode  );
	OrderSetDataItem(&vMsgBodyType,"update_type"  ,ORDERDATAFORMAT_STRING,sTdCustFuncAddHis.sUpdateType  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteCustFuncAddHis(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustFuncAddHisIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustFuncAddHis a WHERE a.id_no=to_number(:NG_Param0) and a.function_type=:NG_Param1 and a.function_code=:NG_Param2 \
	        and a.update_accept=to_number(:NG_Param3) and a.update_date=to_number(:NG_Param4) and a.update_type=:NG_Param5 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTFUNCADDHIS");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"function_type",ORDERDATAFORMAT_STRING,oldIndex.sFunctionType);
	OrderSetPrimaryKey(&vMsgBodyType,"function_code",ORDERDATAFORMAT_STRING,oldIndex.sFunctionCode);
	OrderSetPrimaryKey(&vMsgBodyType,"update_accept",ORDERDATAFORMAT_NUMBER,oldIndex.sUpdateAccept);
	OrderSetPrimaryKey(&vMsgBodyType,"update_date",  ORDERDATAFORMAT_NUMBER,oldIndex.sUpdateDate);
	OrderSetPrimaryKey(&vMsgBodyType,"update_type",  ORDERDATAFORMAT_STRING,oldIndex.sUpdateType);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderInsertCustTestCard(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdCustTestCard
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustTestCard	sTdCustTestCard;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustTestCard.sIdNo      );
	Coltrim(sTdCustTestCard.sPhoneNo   );
	Coltrim(sTdCustTestCard.sBelongCode);
	Coltrim(sTdCustTestCard.sLimitOwe  );
	Coltrim(sTdCustTestCard.sBeginDate );
	Coltrim(sTdCustTestCard.sExpireDate);
	Coltrim(sTdCustTestCard.sStopFlag  );
	Coltrim(sTdCustTestCard.sOpTime    );
	Coltrim(sTdCustTestCard.sGroupId   );

	EXEC SQL INSERT INTO dCustTestCard
	                    (ID_NO, PHONE_NO, BELONG_CODE, LIMIT_OWE, BEGIN_DATE,
	                     EXPIRE_DATE, STOP_FLAG, OP_TIME, GROUP_ID)
		     VALUES(
		            to_number(:sTdCustTestCard.sIdNo),
                    :sTdCustTestCard.sPhoneNo,
                    :sTdCustTestCard.sBelongCode,
                    to_number(:sTdCustTestCard.sLimitOwe),
                    to_date(:sTdCustTestCard.sBeginDate ,'yyyymmdd hh24:mi:ss'),
                    to_date(:sTdCustTestCard.sExpireDate,'yyyymmdd hh24:mi:ss'),
                    :sTdCustTestCard.sStopFlag,
                    to_date(:sTdCustTestCard.sOpTime,'yyyymmdd hh24:mi:ss'),
                    :sTdCustTestCard.sGroupId
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCUSTTESTCARD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"      ,ORDERDATAFORMAT_NUMBER, sTdCustTestCard.sIdNo      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"   ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType,"belong_code",ORDERDATAFORMAT_STRING, sTdCustTestCard.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe"  ,ORDERDATAFORMAT_NUMBER, sTdCustTestCard.sLimitOwe  );
	OrderSetDataItem(&vMsgBodyType,"begin_date" ,ORDERDATAFORMAT_DATE  , sTdCustTestCard.sBeginDate );
	OrderSetDataItem(&vMsgBodyType,"expire_date",ORDERDATAFORMAT_DATE  , sTdCustTestCard.sExpireDate);
	OrderSetDataItem(&vMsgBodyType,"stop_flag"  ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sStopFlag  );
	OrderSetDataItem(&vMsgBodyType,"op_time"    ,ORDERDATAFORMAT_DATE  , sTdCustTestCard.sOpTime    );
	OrderSetDataItem(&vMsgBodyType,"group_id"   ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sGroupId   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustTestCard(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCustTestCard a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTTESTCARD");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustTestCard(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustTestCard	sTdCustTestCard;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCustTestCard a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),
                    phone_no,
                    belong_code,
                    to_char(limit_owe),
                    to_char(begin_date,'yyyymmdd hh24:mi:ss'),
                    to_char(expire_date,'yyyymmdd hh24:mi:ss'),
                    stop_flag,
                    to_char(op_time,'yyyymmdd hh24:mi:ss'),
                    nvl(group_id,chr(0))
			INTO :sTdCustTestCard.sIdNo,
                 :sTdCustTestCard.sPhoneNo,
                 :sTdCustTestCard.sBelongCode,
                 :sTdCustTestCard.sLimitOwe,
                 :sTdCustTestCard.sBeginDate,
                 :sTdCustTestCard.sExpireDate,
                 :sTdCustTestCard.sStopFlag,
                 :sTdCustTestCard.sOpTime,
                 :sTdCustTestCard.sGroupId
			FROM dCustTestCard
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustTestCard.sIdNo      );
	Coltrim(sTdCustTestCard.sPhoneNo   );
	Coltrim(sTdCustTestCard.sBelongCode);
	Coltrim(sTdCustTestCard.sLimitOwe  );
	Coltrim(sTdCustTestCard.sBeginDate );
	Coltrim(sTdCustTestCard.sExpireDate);
	Coltrim(sTdCustTestCard.sStopFlag  );
	Coltrim(sTdCustTestCard.sOpTime    );
	Coltrim(sTdCustTestCard.sGroupId   );

	strcpy(v_table_name,"DCUSTTESTCARD");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no"      ,ORDERDATAFORMAT_NUMBER, sTdCustTestCard.sIdNo      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"   ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType,"belong_code",ORDERDATAFORMAT_STRING, sTdCustTestCard.sBelongCode);
	OrderSetDataItem(&vMsgBodyType,"limit_owe"  ,ORDERDATAFORMAT_NUMBER, sTdCustTestCard.sLimitOwe  );
	OrderSetDataItem(&vMsgBodyType,"begin_date" ,ORDERDATAFORMAT_DATE  , sTdCustTestCard.sBeginDate );
	OrderSetDataItem(&vMsgBodyType,"expire_date",ORDERDATAFORMAT_DATE  , sTdCustTestCard.sExpireDate);
	OrderSetDataItem(&vMsgBodyType,"stop_flag"  ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sStopFlag  );
	OrderSetDataItem(&vMsgBodyType,"op_time"    ,ORDERDATAFORMAT_DATE  , sTdCustTestCard.sOpTime    );
	OrderSetDataItem(&vMsgBodyType,"group_id"   ,ORDERDATAFORMAT_STRING, sTdCustTestCard.sGroupId   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertDesignLogin(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdDesignLogin
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdDesignLogin	sTdDesignLogin;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdDesignLogin.sLoginNo);
	Coltrim(sTdDesignLogin.sOrgCode);
	Coltrim(sTdDesignLogin.sOrgId  );

	EXEC SQL INSERT INTO dDesignLogin
	                    (LOGIN_NO,ORG_CODE,ORG_ID)
		     VALUES(
		            :sTdDesignLogin.sLoginNo,
                    :sTdDesignLogin.sOrgCode,
                    :sTdDesignLogin.sOrgId
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DDESIGNLOGIN");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"login_no",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"org_code",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sOrgCode);
	OrderSetDataItem(&vMsgBodyType,"org_id",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sOrgId);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteDesignLogin(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_login_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_login_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dDesignLogin a WHERE a.login_no=rpad(:NG_Param0,6,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DDESIGNLOGIN");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"login_no",ORDERDATAFORMAT_STRING,i_login_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateDesignLogin(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_login_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_login_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdDesignLogin	sTdDesignLogin;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dDesignLogin a SET %s WHERE a.login_no=rpad(:NG_Param0,6,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT LOGIN_NO,ORG_CODE,nvl(ORG_ID,chr(0))
			INTO :sTdDesignLogin.sLoginNo,
                 :sTdDesignLogin.sOrgCode,
                 :sTdDesignLogin.sOrgId
			FROM dDesignLogin
			WHERE login_no = :i_login_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdDesignLogin.sLoginNo      );
	Coltrim(sTdDesignLogin.sOrgCode   );
	Coltrim(sTdDesignLogin.sOrgId);

	strcpy(v_table_name,"DDESIGNLOGIN");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"login_no",     ORDERDATAFORMAT_NUMBER,i_login_no);

	OrderSetDataItem(&vMsgBodyType,"login_no",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"org_code",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sOrgCode);
	OrderSetDataItem(&vMsgBodyType,"org_id",	ORDERDATAFORMAT_STRING, sTdDesignLogin.sOrgId);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGotobCustMsg(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdGotobCustMsg
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGotobCustMsg	sTdGotobCustMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGotobCustMsg.sIdNo      );
	Coltrim(sTdGotobCustMsg.sCustId    );
	Coltrim(sTdGotobCustMsg.sContractNo);
	Coltrim(sTdGotobCustMsg.sIds       );
	Coltrim(sTdGotobCustMsg.sPhoneNo   );
	Coltrim(sTdGotobCustMsg.sSmCode    );
	Coltrim(sTdGotobCustMsg.sAttrCode  );
	Coltrim(sTdGotobCustMsg.sOpenTime  );
	Coltrim(sTdGotobCustMsg.sBelongCode);
	Coltrim(sTdGotobCustMsg.sRunCode   );
	Coltrim(sTdGotobCustMsg.sRunTime   );
	Coltrim(sTdGotobCustMsg.sLoginNo   );
	Coltrim(sTdGotobCustMsg.sOpCode    );
	Coltrim(sTdGotobCustMsg.sOpTime    );
	Coltrim(sTdGotobCustMsg.sOpDate    );
	Coltrim(sTdGotobCustMsg.sDealFlag  );
	Coltrim(sTdGotobCustMsg.sRegionCode);
	Coltrim(sTdGotobCustMsg.sGroupId   );

	EXEC SQL INSERT INTO dGotobCustMsg
	                    (ID_NO, CUST_ID, CONTRACT_NO, IDS, PHONE_NO,
	                     SM_CODE, ATTR_CODE, OPEN_TIME, BELONG_CODE,
	                     RUN_CODE, RUN_TIME, LOGIN_NO, OP_CODE, OP_TIME,
	                     OP_DATE, DEAL_FLAG, REGION_CODE, GROUP_ID)
		     VALUES(
        		    to_number(:sTdGotobCustMsg.sIdNo      ) ,
                    to_number(:sTdGotobCustMsg.sCustId    ) ,
                    to_number(:sTdGotobCustMsg.sContractNo) ,
                    to_number(:sTdGotobCustMsg.sIds       ) ,
                    :sTdGotobCustMsg.sPhoneNo,
                    :sTdGotobCustMsg.sSmCode,
                    :sTdGotobCustMsg.sAttrCode ,
                    to_date(:sTdGotobCustMsg.sOpenTime,'yyyymmdd hh24:mi:ss'),
                    :sTdGotobCustMsg.sBelongCode ,
                    :sTdGotobCustMsg.sRunCode,
                    to_date(:sTdGotobCustMsg.sRunTime,'yyyymmdd hh24:mi:ss'),
                    :sTdGotobCustMsg.sLoginNo,
                    :sTdGotobCustMsg.sOpCode,
                    to_date(:sTdGotobCustMsg.sOpTime,'yyyymmdd hh24:mi:ss'),
                    to_number(:sTdGotobCustMsg.sOpDate),
                    :sTdGotobCustMsg.sDealFlag ,
                    :sTdGotobCustMsg.sRegionCode ,
                    :sTdGotobCustMsg.sGroupId
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGOTOBCUSTMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"       , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType,"cust_id"     , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sCustId     );
	OrderSetDataItem(&vMsgBodyType,"contract_no" , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sContractNo );
	OrderSetDataItem(&vMsgBodyType,"ids"         , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sIds        );
	OrderSetDataItem(&vMsgBodyType,"phone_no"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType,"sm_code"     , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sSmCode     );
	OrderSetDataItem(&vMsgBodyType,"attr_code"   , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sAttrCode   );
	OrderSetDataItem(&vMsgBodyType,"open_time"   , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sOpenTime   );
	OrderSetDataItem(&vMsgBodyType,"belong_code" , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sBelongCode );
	OrderSetDataItem(&vMsgBodyType,"run_code"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sRunCode    );
	OrderSetDataItem(&vMsgBodyType,"run_time"    , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sRunTime    );
	OrderSetDataItem(&vMsgBodyType,"login_no"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"op_code"     , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sOpCode     );
	OrderSetDataItem(&vMsgBodyType,"op_time"     , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"op_date"     , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sOpDate     );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"   , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sDealFlag   );
	OrderSetDataItem(&vMsgBodyType,"region_code" , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sRegionCode );
	OrderSetDataItem(&vMsgBodyType,"group_id"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sGroupId    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGotobCustMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGotobCustMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGOTOBCUSTMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_STRING,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGotobCustMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGotobCustMsg	sTdGotobCustMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGotobCustMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)),
                    nvl(to_char(cust_id),chr(0)),
                    nvl(to_char(contract_no),chr(0)),
                    nvl(to_char(ids),chr(0)),
                    nvl(phone_no,chr(0)),
                    nvl(sm_code,chr(0)),
                    nvl(attr_code,chr(0)),
                    nvl(to_char(open_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(belong_code,chr(0)),
                    nvl(run_code,chr(0)),
                    nvl(to_char(run_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(login_no,chr(0)),
                    nvl(op_code,chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(to_char(op_date),chr(0)),
                    nvl(deal_flag,chr(0)),
                    nvl(region_code,chr(0)),
                    nvl(group_id,chr(0))
			INTO :sTdGotobCustMsg.sIdNo       ,
                 :sTdGotobCustMsg.sCustId     ,
                 :sTdGotobCustMsg.sContractNo ,
                 :sTdGotobCustMsg.sIds        ,
                 :sTdGotobCustMsg.sPhoneNo    ,
                 :sTdGotobCustMsg.sSmCode     ,
                 :sTdGotobCustMsg.sAttrCode   ,
                 :sTdGotobCustMsg.sOpenTime   ,
                 :sTdGotobCustMsg.sBelongCode ,
                 :sTdGotobCustMsg.sRunCode    ,
                 :sTdGotobCustMsg.sRunTime    ,
                 :sTdGotobCustMsg.sLoginNo    ,
                 :sTdGotobCustMsg.sOpCode     ,
                 :sTdGotobCustMsg.sOpTime     ,
                 :sTdGotobCustMsg.sOpDate     ,
                 :sTdGotobCustMsg.sDealFlag   ,
                 :sTdGotobCustMsg.sRegionCode ,
                 :sTdGotobCustMsg.sGroupId
			FROM dGotobCustMsg
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGotobCustMsg.sIdNo       );
	Coltrim(sTdGotobCustMsg.sCustId     );
	Coltrim(sTdGotobCustMsg.sContractNo );
	Coltrim(sTdGotobCustMsg.sIds        );
	Coltrim(sTdGotobCustMsg.sPhoneNo    );
	Coltrim(sTdGotobCustMsg.sSmCode     );
	Coltrim(sTdGotobCustMsg.sAttrCode   );
	Coltrim(sTdGotobCustMsg.sOpenTime   );
	Coltrim(sTdGotobCustMsg.sBelongCode );
	Coltrim(sTdGotobCustMsg.sRunCode    );
	Coltrim(sTdGotobCustMsg.sRunTime    );
	Coltrim(sTdGotobCustMsg.sLoginNo    );
	Coltrim(sTdGotobCustMsg.sOpCode     );
	Coltrim(sTdGotobCustMsg.sOpTime     );
	Coltrim(sTdGotobCustMsg.sOpDate     );
	Coltrim(sTdGotobCustMsg.sDealFlag   );
	Coltrim(sTdGotobCustMsg.sRegionCode );
	Coltrim(sTdGotobCustMsg.sGroupId    );

	strcpy(v_table_name,"DGOTOBCUSTMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no"       , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType,"cust_id"     , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sCustId     );
	OrderSetDataItem(&vMsgBodyType,"contract_no" , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sContractNo );
	OrderSetDataItem(&vMsgBodyType,"ids"         , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sIds        );
	OrderSetDataItem(&vMsgBodyType,"phone_no"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType,"sm_code"     , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sSmCode     );
	OrderSetDataItem(&vMsgBodyType,"attr_code"   , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sAttrCode   );
	OrderSetDataItem(&vMsgBodyType,"open_time"   , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sOpenTime   );
	OrderSetDataItem(&vMsgBodyType,"belong_code" , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sBelongCode );
	OrderSetDataItem(&vMsgBodyType,"run_code"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sRunCode    );
	OrderSetDataItem(&vMsgBodyType,"run_time"    , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sRunTime    );
	OrderSetDataItem(&vMsgBodyType,"login_no"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType,"op_code"     , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sOpCode     );
	OrderSetDataItem(&vMsgBodyType,"op_time"     , ORDERDATAFORMAT_DATE   , sTdGotobCustMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType,"op_date"     , ORDERDATAFORMAT_NUMBER , sTdGotobCustMsg.sOpDate     );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"   , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sDealFlag   );
	OrderSetDataItem(&vMsgBodyType,"region_code" , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sRegionCode );
	OrderSetDataItem(&vMsgBodyType,"group_id"    , ORDERDATAFORMAT_STRING , sTdGotobCustMsg.sGroupId    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertGrpPost(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGrpPost
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpPost	sTdGrpPost;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpPost.sCustId     );
	Coltrim(sTdGrpPost.sPostFlag   );
	Coltrim(sTdGrpPost.sPostType   );
	Coltrim(sTdGrpPost.sPostAddress);
	Coltrim(sTdGrpPost.sPostZip    );
	Coltrim(sTdGrpPost.sFaxNo      );
	Coltrim(sTdGrpPost.sMailAddress);
	Coltrim(sTdGrpPost.sContactTel );
	Coltrim(sTdGrpPost.sPostName   );
	Coltrim(sTdGrpPost.sPostnoFlag );
	Coltrim(sTdGrpPost.sOpTime     );

	EXEC SQL INSERT INTO dGrpPost(CUST_ID, POST_FLAG, POST_TYPE, POST_ADDRESS, POST_ZIP,
	                              FAX_NO, MAIL_ADDRESS, CONTACT_TEL, POST_NAME, POSTNO_FLAG, OP_TIME)
		VALUES(
               to_number(:sTdGrpPost.sCustId),
               :sTdGrpPost.sPostFlag,
               :sTdGrpPost.sPostType,
               :sTdGrpPost.sPostAddress,
               :sTdGrpPost.sPostZip,
               :sTdGrpPost.sFaxNo,
               :sTdGrpPost.sMailAddress,
               :sTdGrpPost.sContactTel,
               :sTdGrpPost.sPostName,
               to_number(:sTdGrpPost.sPostnoFlag),
               to_date(:sTdGrpPost.sOpTime,'yyyymmdd hh24:mi:ss')
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGRPPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"cust_id"      , ORDERDATAFORMAT_NUMBER , sTdGrpPost.sCustId      );
	OrderSetDataItem(&vMsgBodyType,"post_flag"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostFlag    );
	OrderSetDataItem(&vMsgBodyType,"post_type"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostType    );
	OrderSetDataItem(&vMsgBodyType,"post_address" , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostAddress );
	OrderSetDataItem(&vMsgBodyType,"post_zip"     , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostZip     );
	OrderSetDataItem(&vMsgBodyType,"fax_no"       , ORDERDATAFORMAT_STRING , sTdGrpPost.sFaxNo       );
	OrderSetDataItem(&vMsgBodyType,"mail_address" , ORDERDATAFORMAT_STRING , sTdGrpPost.sMailAddress );
	OrderSetDataItem(&vMsgBodyType,"contact_tel"  , ORDERDATAFORMAT_STRING , sTdGrpPost.sContactTel  );
	OrderSetDataItem(&vMsgBodyType,"post_name"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostName    );
	OrderSetDataItem(&vMsgBodyType,"postno_flag"  , ORDERDATAFORMAT_NUMBER , sTdGrpPost.sPostnoFlag  );
	OrderSetDataItem(&vMsgBodyType,"op_time"      , ORDERDATAFORMAT_DATE   , sTdGrpPost.sOpTime      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGrpPost(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpPostIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGrpPost a WHERE a.cust_id=to_number(:NG_Param0) \
	        and a.post_type=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGRPPOST");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",		ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"post_type",	ORDERDATAFORMAT_STRING,oldIndex.sPostType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGrpPost(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpPostIndex oldIndex;
TdGrpPostIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpPost	sTdGrpPost;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGrpPost SET %s WHERE cust_id=to_number(:NG_Param0) and post_type=:NG_Param1 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(cust_id),
                    post_flag,
                    post_type,
                    post_address,
                    post_zip,
                    nvl(fax_no,chr(0)),
                    nvl(mail_address,chr(0)),
                    contact_tel,
                    post_name,
                    to_char(postno_flag),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0))
			   INTO :sTdGrpPost.sCustId     ,
                    :sTdGrpPost.sPostFlag   ,
                    :sTdGrpPost.sPostType   ,
                    :sTdGrpPost.sPostAddress,
                    :sTdGrpPost.sPostZip    ,
                    :sTdGrpPost.sFaxNo      ,
                    :sTdGrpPost.sMailAddress,
                    :sTdGrpPost.sContactTel ,
                    :sTdGrpPost.sPostName   ,
                    :sTdGrpPost.sPostnoFlag ,
                    :sTdGrpPost.sOpTime
			   FROM dGrpPost
			  WHERE cust_id = to_number(:newIndex.sCustId) and post_type=:newIndex.sPostType;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGrpPost.sCustId     );
	Coltrim(sTdGrpPost.sPostFlag   );
	Coltrim(sTdGrpPost.sPostType   );
	Coltrim(sTdGrpPost.sPostAddress);
	Coltrim(sTdGrpPost.sPostZip    );
	Coltrim(sTdGrpPost.sFaxNo      );
	Coltrim(sTdGrpPost.sMailAddress);
	Coltrim(sTdGrpPost.sContactTel );
	Coltrim(sTdGrpPost.sPostName   );
	Coltrim(sTdGrpPost.sPostnoFlag );
	Coltrim(sTdGrpPost.sOpTime     );

	strcpy(v_table_name,"DGRPPOST");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",		ORDERDATAFORMAT_NUMBER,oldIndex.sCustId);
	OrderSetPrimaryKey(&vMsgBodyType,"post_type",	ORDERDATAFORMAT_STRING,oldIndex.sPostType);

	OrderSetDataItem(&vMsgBodyType,"cust_id"      , ORDERDATAFORMAT_NUMBER , sTdGrpPost.sCustId      );
	OrderSetDataItem(&vMsgBodyType,"post_flag"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostFlag    );
	OrderSetDataItem(&vMsgBodyType,"post_type"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostType    );
	OrderSetDataItem(&vMsgBodyType,"post_address" , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostAddress );
	OrderSetDataItem(&vMsgBodyType,"post_zip"     , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostZip     );
	OrderSetDataItem(&vMsgBodyType,"fax_no"       , ORDERDATAFORMAT_STRING , sTdGrpPost.sFaxNo       );
	OrderSetDataItem(&vMsgBodyType,"mail_address" , ORDERDATAFORMAT_STRING , sTdGrpPost.sMailAddress );
	OrderSetDataItem(&vMsgBodyType,"contact_tel"  , ORDERDATAFORMAT_STRING , sTdGrpPost.sContactTel  );
	OrderSetDataItem(&vMsgBodyType,"post_name"    , ORDERDATAFORMAT_STRING , sTdGrpPost.sPostName    );
	OrderSetDataItem(&vMsgBodyType,"postno_flag"  , ORDERDATAFORMAT_NUMBER , sTdGrpPost.sPostnoFlag  );
	OrderSetDataItem(&vMsgBodyType,"op_time"      , ORDERDATAFORMAT_DATE   , sTdGrpPost.sOpTime      );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertNetCardMsg(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdNetCardMsg
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdNetCardMsg	sTdNetCardMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdNetCardMsg.sIdNo       );
	Coltrim(sTdNetCardMsg.sPhoneNo    );
	Coltrim(sTdNetCardMsg.sBelongCode );
	Coltrim(sTdNetCardMsg.sGroupId    );
	Coltrim(sTdNetCardMsg.sUsimPhoneno);
	Coltrim(sTdNetCardMsg.sUsimRuncode);
	Coltrim(sTdNetCardMsg.sModeId     );
	Coltrim(sTdNetCardMsg.sModeCode   );
	Coltrim(sTdNetCardMsg.sLoginNo    );
	Coltrim(sTdNetCardMsg.sOrgCode    );
	Coltrim(sTdNetCardMsg.sOrgId      );
	Coltrim(sTdNetCardMsg.sOpTime     );
	Coltrim(sTdNetCardMsg.sTotalDate  );
	Coltrim(sTdNetCardMsg.sLoginAccept);
	Coltrim(sTdNetCardMsg.sLastLoginno);
	Coltrim(sTdNetCardMsg.sOpCode     );

	EXEC SQL INSERT INTO dNetCardMsg
	                    (ID_NO, PHONE_NO, BELONG_CODE, GROUP_ID, USIM_PHONENO,
	                     USIM_RUNCODE, MODE_ID, MODE_CODE, LOGIN_NO, ORG_CODE,
	                     ORG_ID, OP_TIME, TOTAL_DATE, LOGIN_ACCEPT, LAST_LOGINNO, OP_CODE)
		     VALUES(
		            to_number(:sTdNetCardMsg.sIdNo) ,
                    :sTdNetCardMsg.sPhoneNo     ,
                    :sTdNetCardMsg.sBelongCode  ,
                    :sTdNetCardMsg.sGroupId     ,
                    :sTdNetCardMsg.sUsimPhoneno ,
                    :sTdNetCardMsg.sUsimRuncode ,
                    :sTdNetCardMsg.sModeId      ,
                    :sTdNetCardMsg.sModeCode    ,
                    :sTdNetCardMsg.sLoginNo     ,
                    :sTdNetCardMsg.sOrgCode     ,
                    :sTdNetCardMsg.sOrgId       ,
                    to_date(:sTdNetCardMsg.sOpTime,'yyyymmdd hh24:mi:ss') ,
                    to_number(:sTdNetCardMsg.sTotalDate) ,
                    :sTdNetCardMsg.sLoginAccept ,
                    :sTdNetCardMsg.sLastLoginno ,
                    :sTdNetCardMsg.sOpCode
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DNETCARDMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no"        ,ORDERDATAFORMAT_NUMBER, sTdNetCardMsg.sIdNo         );
	OrderSetDataItem(&vMsgBodyType,"phone_no"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sPhoneNo      );
	OrderSetDataItem(&vMsgBodyType,"belong_code"  ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sBelongCode   );
	OrderSetDataItem(&vMsgBodyType,"group_id"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sGroupId      );
	OrderSetDataItem(&vMsgBodyType,"usim_phoneno" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sUsimPhoneno  );
	OrderSetDataItem(&vMsgBodyType,"usim_runcode" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sUsimRuncode  );
	OrderSetDataItem(&vMsgBodyType,"mode_id"      ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sModeId       );
	OrderSetDataItem(&vMsgBodyType,"mode_code"    ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sModeCode     );
	OrderSetDataItem(&vMsgBodyType,"login_no"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLoginNo      );
	OrderSetDataItem(&vMsgBodyType,"org_code"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOrgCode      );
	OrderSetDataItem(&vMsgBodyType,"org_id"       ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOrgId        );
	OrderSetDataItem(&vMsgBodyType,"op_time"      ,ORDERDATAFORMAT_DATE  , sTdNetCardMsg.sOpTime       );
	OrderSetDataItem(&vMsgBodyType,"total_date"   ,ORDERDATAFORMAT_NUMBER, sTdNetCardMsg.sTotalDate    );
	OrderSetDataItem(&vMsgBodyType,"login_accept" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLoginAccept  );
	OrderSetDataItem(&vMsgBodyType,"last_loginno" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLastLoginno  );
	OrderSetDataItem(&vMsgBodyType,"op_code"      ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOpCode       );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteNetCardMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dNetCardMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DNETCARDMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateNetCardMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdNetCardMsg	sTdNetCardMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dNetCardMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)),
                    nvl(phone_no,chr(0)),
                    nvl(belong_code,chr(0)),
                    nvl(group_id,chr(0)),
                    nvl(usim_phoneno,chr(0)),
                    nvl(usim_runcode,chr(0)),
                    nvl(mode_id,chr(0)),
                    nvl(mode_code,chr(0)),
                    nvl(login_no,chr(0)),
                    nvl(org_code,chr(0)),
                    nvl(org_id,chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(to_char(total_date),chr(0)),
                    nvl(login_accept,chr(0)),
                    nvl(last_loginno,chr(0)),
                    nvl(op_code,chr(0))
			INTO :sTdNetCardMsg.sIdNo       ,
                 :sTdNetCardMsg.sPhoneNo    ,
                 :sTdNetCardMsg.sBelongCode ,
                 :sTdNetCardMsg.sGroupId    ,
                 :sTdNetCardMsg.sUsimPhoneno,
                 :sTdNetCardMsg.sUsimRuncode,
                 :sTdNetCardMsg.sModeId     ,
                 :sTdNetCardMsg.sModeCode   ,
                 :sTdNetCardMsg.sLoginNo    ,
                 :sTdNetCardMsg.sOrgCode    ,
                 :sTdNetCardMsg.sOrgId      ,
                 :sTdNetCardMsg.sOpTime     ,
                 :sTdNetCardMsg.sTotalDate  ,
                 :sTdNetCardMsg.sLoginAccept,
                 :sTdNetCardMsg.sLastLoginno,
                 :sTdNetCardMsg.sOpCode
			FROM dNetCardMsg
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdNetCardMsg.sIdNo       );
	Coltrim(sTdNetCardMsg.sPhoneNo    );
	Coltrim(sTdNetCardMsg.sBelongCode );
	Coltrim(sTdNetCardMsg.sGroupId    );
	Coltrim(sTdNetCardMsg.sUsimPhoneno);
	Coltrim(sTdNetCardMsg.sUsimRuncode);
	Coltrim(sTdNetCardMsg.sModeId     );
	Coltrim(sTdNetCardMsg.sModeCode   );
	Coltrim(sTdNetCardMsg.sLoginNo    );
	Coltrim(sTdNetCardMsg.sOrgCode    );
	Coltrim(sTdNetCardMsg.sOrgId      );
	Coltrim(sTdNetCardMsg.sOpTime     );
	Coltrim(sTdNetCardMsg.sTotalDate  );
	Coltrim(sTdNetCardMsg.sLoginAccept);
	Coltrim(sTdNetCardMsg.sLastLoginno);
	Coltrim(sTdNetCardMsg.sOpCode     );

	strcpy(v_table_name,"DNETCARDMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",     ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"id_no"        ,ORDERDATAFORMAT_NUMBER, sTdNetCardMsg.sIdNo         );
	OrderSetDataItem(&vMsgBodyType,"phone_no"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sPhoneNo      );
	OrderSetDataItem(&vMsgBodyType,"belong_code"  ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sBelongCode   );
	OrderSetDataItem(&vMsgBodyType,"group_id"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sGroupId      );
	OrderSetDataItem(&vMsgBodyType,"usim_phoneno" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sUsimPhoneno  );
	OrderSetDataItem(&vMsgBodyType,"usim_runcode" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sUsimRuncode  );
	OrderSetDataItem(&vMsgBodyType,"mode_id"      ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sModeId       );
	OrderSetDataItem(&vMsgBodyType,"mode_code"    ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sModeCode     );
	OrderSetDataItem(&vMsgBodyType,"login_no"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLoginNo      );
	OrderSetDataItem(&vMsgBodyType,"org_code"     ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOrgCode      );
	OrderSetDataItem(&vMsgBodyType,"org_id"       ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOrgId        );
	OrderSetDataItem(&vMsgBodyType,"op_time"      ,ORDERDATAFORMAT_DATE  , sTdNetCardMsg.sOpTime       );
	OrderSetDataItem(&vMsgBodyType,"total_date"   ,ORDERDATAFORMAT_NUMBER, sTdNetCardMsg.sTotalDate    );
	OrderSetDataItem(&vMsgBodyType,"login_accept" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLoginAccept  );
	OrderSetDataItem(&vMsgBodyType,"last_loginno" ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sLastLoginno  );
	OrderSetDataItem(&vMsgBodyType,"op_code"      ,ORDERDATAFORMAT_STRING, sTdNetCardMsg.sOpCode       );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertUserMail(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdUserMail
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdUserMail	sTdUserMail;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdUserMail.sIdNo       );
	Coltrim(sTdUserMail.sPostFlag   );
	Coltrim(sTdUserMail.sPostAddress);
	Coltrim(sTdUserMail.sPostZip    );
	Coltrim(sTdUserMail.sContactTel );
	Coltrim(sTdUserMail.sPostName   );
	Coltrim(sTdUserMail.sBizcode    );

	EXEC SQL INSERT INTO dUserMail(ID_NO, POST_FLAG, POST_ADDRESS, POST_ZIP, CONTACT_TEL, POST_NAME, BIZCODE)
		VALUES(to_number(:sTdUserMail.sIdNo),
               :sTdUserMail.sPostFlag,
               :sTdUserMail.sPostAddress,
               :sTdUserMail.sPostZip,
               to_number(:sTdUserMail.sContactTel),
               :sTdUserMail.sPostName,
               :sTdUserMail.sBizcode
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DUSERMAIL");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdUserMail.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "post_flag"    , ORDERDATAFORMAT_STRING , sTdUserMail.sPostFlag   );
	OrderSetDataItem(&vMsgBodyType, "post_address" , ORDERDATAFORMAT_STRING , sTdUserMail.sPostAddress);
	OrderSetDataItem(&vMsgBodyType, "post_zip"     , ORDERDATAFORMAT_STRING , sTdUserMail.sPostZip    );
	OrderSetDataItem(&vMsgBodyType, "contact_tel"  , ORDERDATAFORMAT_NUMBER , sTdUserMail.sContactTel );
	OrderSetDataItem(&vMsgBodyType, "post_name"    , ORDERDATAFORMAT_STRING , sTdUserMail.sPostName   );
	OrderSetDataItem(&vMsgBodyType, "bizcode"      , ORDERDATAFORMAT_STRING , sTdUserMail.sBizcode    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteUserMail(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdUserMailIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dUserMail a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.bizcode=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DUSERMAIL");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",	ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"bizcode",	ORDERDATAFORMAT_STRING,oldIndex.sBizcode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateUserMail(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdUserMailIndex oldIndex;
TdUserMailIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdUserMail	sTdUserMail;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dUserMail a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.bizcode=:NG_Param1 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),
                    post_flag,
                    post_address,
                    post_zip,
                    to_char(contact_tel),
                    post_name,
                    nvl(bizcode,chr(0))
			   INTO :sTdUserMail.sIdNo       ,
                    :sTdUserMail.sPostFlag   ,
                    :sTdUserMail.sPostAddress,
                    :sTdUserMail.sPostZip    ,
                    :sTdUserMail.sContactTel ,
                    :sTdUserMail.sPostName   ,
                    :sTdUserMail.sBizcode
			   FROM dUserMail
			  WHERE id_no = to_number(:newIndex.sIdNo) and bizcode=:newIndex.sBizcode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdUserMail.sIdNo       );
	Coltrim(sTdUserMail.sPostFlag   );
	Coltrim(sTdUserMail.sPostAddress);
	Coltrim(sTdUserMail.sPostZip    );
	Coltrim(sTdUserMail.sContactTel );
	Coltrim(sTdUserMail.sPostName   );
	Coltrim(sTdUserMail.sBizcode    );


	strcpy(v_table_name,"DUSERMAIL");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",	ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"bizcode",	ORDERDATAFORMAT_STRING,oldIndex.sBizcode);

	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdUserMail.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "post_flag"    , ORDERDATAFORMAT_STRING , sTdUserMail.sPostFlag   );
	OrderSetDataItem(&vMsgBodyType, "post_address" , ORDERDATAFORMAT_STRING , sTdUserMail.sPostAddress);
	OrderSetDataItem(&vMsgBodyType, "post_zip"     , ORDERDATAFORMAT_STRING , sTdUserMail.sPostZip    );
	OrderSetDataItem(&vMsgBodyType, "contact_tel"  , ORDERDATAFORMAT_NUMBER , sTdUserMail.sContactTel );
	OrderSetDataItem(&vMsgBodyType, "post_name"    , ORDERDATAFORMAT_STRING , sTdUserMail.sPostName   );
	OrderSetDataItem(&vMsgBodyType, "bizcode"      , ORDERDATAFORMAT_STRING , sTdUserMail.sBizcode    );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertSmAwakeBlackMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdSmAwakeBlackMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdSmAwakeBlackMsg	sTdSmAwakeBlackMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdSmAwakeBlackMsg.sIdNo       );
	Coltrim(sTdSmAwakeBlackMsg.sPhoneNo    );
	Coltrim(sTdSmAwakeBlackMsg.sContractNo );
	Coltrim(sTdSmAwakeBlackMsg.sBlackAwake );
	Coltrim(sTdSmAwakeBlackMsg.sTotalDate  );
	Coltrim(sTdSmAwakeBlackMsg.sOpTime     );
	Coltrim(sTdSmAwakeBlackMsg.sLoginNo    );
	Coltrim(sTdSmAwakeBlackMsg.sOrgCode    );
	Coltrim(sTdSmAwakeBlackMsg.sLoginAccept);
	Coltrim(sTdSmAwakeBlackMsg.sAwakeCode  );
	Coltrim(sTdSmAwakeBlackMsg.sAwakeDetail);
	Coltrim(sTdSmAwakeBlackMsg.sOrgId      );

	EXEC SQL INSERT INTO dSmAwakeBlackMsg(ID_NO, PHONE_NO, CONTRACT_NO, BLACK_AWAKE, TOTAL_DATE,
	                    OP_TIME, LOGIN_NO, ORG_CODE, LOGIN_ACCEPT, AWAKE_CODE, AWAKE_DETAIL, ORG_ID)
		VALUES(
		       to_number(:sTdSmAwakeBlackMsg.sIdNo)       ,
               :sTdSmAwakeBlackMsg.sPhoneNo    ,
               to_number(:sTdSmAwakeBlackMsg.sContractNo) ,
               :sTdSmAwakeBlackMsg.sBlackAwake ,
               to_number(:sTdSmAwakeBlackMsg.sTotalDate)  ,
               to_date(:sTdSmAwakeBlackMsg.sOpTime,'yyyymmdd hh24:mi:ss')     ,
               :sTdSmAwakeBlackMsg.sLoginNo    ,
               :sTdSmAwakeBlackMsg.sOrgCode    ,
               to_number(:sTdSmAwakeBlackMsg.sLoginAccept),
               :sTdSmAwakeBlackMsg.sAwakeCode  ,
               :sTdSmAwakeBlackMsg.sAwakeDetail,
               :sTdSmAwakeBlackMsg.sOrgId
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DSMAWAKEBLACKMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "contract_no"  , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sContractNo );
	OrderSetDataItem(&vMsgBodyType, "black_awake"  , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sBlackAwake );
	OrderSetDataItem(&vMsgBodyType, "total_date"   , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sTotalDate  );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdSmAwakeBlackMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "org_code"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sOrgCode    );
	OrderSetDataItem(&vMsgBodyType, "login_accept" , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "awake_code"   , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sAwakeCode  );
	OrderSetDataItem(&vMsgBodyType, "awake_detail" , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sAwakeDetail);
	OrderSetDataItem(&vMsgBodyType, "org_id"       , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sOrgId      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteSmAwakeBlackMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdSmAwakeBlackMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dSmAwakeBlackMsg a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.black_awake=rpad(:NG_Param1,2,' ') and a.awake_code=rpad(:NG_Param2,2,' ') and a.awake_detail=rpad(:NG_Param3,2,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DSMAWAKEBLACKMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"black_awake",	ORDERDATAFORMAT_STRING,oldIndex.sBlackAwake);
	OrderSetPrimaryKey(&vMsgBodyType,"awake_code",	ORDERDATAFORMAT_STRING,oldIndex.sAwakeCode);
	OrderSetPrimaryKey(&vMsgBodyType,"awake_detail",ORDERDATAFORMAT_STRING,oldIndex.sAwakeDetail);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateSmAwakeBlackMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdSmAwakeBlackMsgIndex oldIndex;
TdSmAwakeBlackMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdSmAwakeBlackMsg	sTdSmAwakeBlackMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dSmawakeBlackMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) \
	        and a.black_awake=rpad(:NG_Param1,2,' ') and a.awake_code=rpad(:NG_Param2,2,' ') and a.awake_detail=rpad(:NG_Param3,2,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT
                    nvl(to_char(id_no),chr(0)),
                    nvl(phone_no,chr(0)),
                    nvl(to_char(contract_no),chr(0)),
                    nvl(black_awake,chr(0)),
                    nvl(to_char(total_date),chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0)),
                    nvl(login_no,chr(0)),
                    nvl(org_code,chr(0)),
                    nvl(to_char(login_accept),chr(0)),
                    nvl(awake_code,chr(0)),
                    nvl(awake_detail,chr(0)),
                    nvl(org_id,chr(0))
			   INTO :sTdSmAwakeBlackMsg.sIdNo       ,
                    :sTdSmAwakeBlackMsg.sPhoneNo    ,
                    :sTdSmAwakeBlackMsg.sContractNo ,
                    :sTdSmAwakeBlackMsg.sBlackAwake ,
                    :sTdSmAwakeBlackMsg.sTotalDate  ,
                    :sTdSmAwakeBlackMsg.sOpTime     ,
                    :sTdSmAwakeBlackMsg.sLoginNo    ,
                    :sTdSmAwakeBlackMsg.sOrgCode    ,
                    :sTdSmAwakeBlackMsg.sLoginAccept,
                    :sTdSmAwakeBlackMsg.sAwakeCode  ,
                    :sTdSmAwakeBlackMsg.sAwakeDetail,
                    :sTdSmAwakeBlackMsg.sOrgId
			   FROM dSmAwakeBlackMsg
			  WHERE id_no = to_number(:newIndex.sIdNo) and black_awake=:newIndex.sBlackAwake
			  	and awake_code = :newIndex.sAwakeCode and awake_detail = :newIndex.sAwakeDetail;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdSmAwakeBlackMsg.sIdNo       );
	Coltrim(sTdSmAwakeBlackMsg.sPhoneNo    );
	Coltrim(sTdSmAwakeBlackMsg.sContractNo );
	Coltrim(sTdSmAwakeBlackMsg.sBlackAwake );
	Coltrim(sTdSmAwakeBlackMsg.sTotalDate  );
	Coltrim(sTdSmAwakeBlackMsg.sOpTime     );
	Coltrim(sTdSmAwakeBlackMsg.sLoginNo    );
	Coltrim(sTdSmAwakeBlackMsg.sOrgCode    );
	Coltrim(sTdSmAwakeBlackMsg.sLoginAccept);
	Coltrim(sTdSmAwakeBlackMsg.sAwakeCode  );
	Coltrim(sTdSmAwakeBlackMsg.sAwakeDetail);
	Coltrim(sTdSmAwakeBlackMsg.sOrgId      );


	strcpy(v_table_name,"DSMAWAKEBLACKMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"black_awake",	ORDERDATAFORMAT_STRING,oldIndex.sBlackAwake);
	OrderSetPrimaryKey(&vMsgBodyType,"awake_code",	ORDERDATAFORMAT_STRING,oldIndex.sAwakeCode);
	OrderSetPrimaryKey(&vMsgBodyType,"awake_detail",ORDERDATAFORMAT_STRING,oldIndex.sAwakeDetail);

	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "contract_no"  , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sContractNo );
	OrderSetDataItem(&vMsgBodyType, "black_awake"  , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sBlackAwake );
	OrderSetDataItem(&vMsgBodyType, "total_date"   , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sTotalDate  );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdSmAwakeBlackMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "org_code"     , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sOrgCode    );
	OrderSetDataItem(&vMsgBodyType, "login_accept" , ORDERDATAFORMAT_NUMBER , sTdSmAwakeBlackMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "awake_code"   , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sAwakeCode  );
	OrderSetDataItem(&vMsgBodyType, "awake_detail" , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sAwakeDetail);
	OrderSetDataItem(&vMsgBodyType, "org_id"       , ORDERDATAFORMAT_STRING , sTdSmAwakeBlackMsg.sOrgId      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGrpManagerMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGrpManagerMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpManagerMsg	sTdGrpManagerMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpManagerMsg.sServiceNo     );
	Coltrim(sTdGrpManagerMsg.sOrgCode       );
	Coltrim(sTdGrpManagerMsg.sLoginType     );
	Coltrim(sTdGrpManagerMsg.sBossOrgCode   );
	Coltrim(sTdGrpManagerMsg.sName          );
	Coltrim(sTdGrpManagerMsg.sDuty          );
	Coltrim(sTdGrpManagerMsg.sIdType        );
	Coltrim(sTdGrpManagerMsg.sSex           );
	Coltrim(sTdGrpManagerMsg.sIdentifyNo    );
	Coltrim(sTdGrpManagerMsg.sBelongRegion  );
	Coltrim(sTdGrpManagerMsg.sBirthday      );
	Coltrim(sTdGrpManagerMsg.sPolity        );
	Coltrim(sTdGrpManagerMsg.sProfession    );
	Coltrim(sTdGrpManagerMsg.sJoinDate      );
	Coltrim(sTdGrpManagerMsg.sPhoneNo       );
	Coltrim(sTdGrpManagerMsg.sEmail         );
	Coltrim(sTdGrpManagerMsg.sBelongDept    );
	Coltrim(sTdGrpManagerMsg.sEduLevelid    );
	Coltrim(sTdGrpManagerMsg.sSpeciality    );
	Coltrim(sTdGrpManagerMsg.sHomeCall      );
	Coltrim(sTdGrpManagerMsg.sHomeAddress   );
	Coltrim(sTdGrpManagerMsg.sManagerLevel  );
	Coltrim(sTdGrpManagerMsg.sInterest      );
	Coltrim(sTdGrpManagerMsg.sCreateDate    );
	Coltrim(sTdGrpManagerMsg.sUpdateDate    );
	Coltrim(sTdGrpManagerMsg.sUpServiceNo   );
	Coltrim(sTdGrpManagerMsg.sSystemType    );
	Coltrim(sTdGrpManagerMsg.sAge           );
	Coltrim(sTdGrpManagerMsg.sNativeplace   );
	Coltrim(sTdGrpManagerMsg.sJobAge        );
	Coltrim(sTdGrpManagerMsg.sTrainStatus   );
	Coltrim(sTdGrpManagerMsg.sMarrowName    );
	Coltrim(sTdGrpManagerMsg.sMarrowJob     );
	Coltrim(sTdGrpManagerMsg.sMarrowPosition);
	Coltrim(sTdGrpManagerMsg.sGraTime       );
	Coltrim(sTdGrpManagerMsg.sGraAcademy    );
	Coltrim(sTdGrpManagerMsg.sCharacter     );
	Coltrim(sTdGrpManagerMsg.sMarry         );
	Coltrim(sTdGrpManagerMsg.sCompany       );
	Coltrim(sTdGrpManagerMsg.sStationId     );
	Coltrim(sTdGrpManagerMsg.sStationLevel  );
	Coltrim(sTdGrpManagerMsg.sStationChange );

	EXEC SQL INSERT INTO DBVIPADM.dGrpManagerMsg(SERVICE_NO, ORG_CODE, LOGIN_TYPE, BOSS_ORG_CODE, NAME,
	                              DUTY, ID_TYPE, SEX, IDENTIFY_NO, BELONG_REGION,
	                              BIRTHDAY, POLITY, PROFESSION, JOIN_DATE, PHONE_NO,
	                              EMAIL, BELONG_DEPT, EDU_LEVELID, SPECIALITY, HOME_CALL,
	                              HOME_ADDRESS, MANAGER_LEVEL, INTEREST, CREATE_DATE,
	                              UPDATE_DATE, UP_SERVICE_NO, SYSTEM_TYPE, AGE, NATIVEPLACE,
	                              JOB_AGE, TRAIN_STATUS, MARROW_NAME, MARROW_JOB, MARROW_POSITION,
	                              GRA_TIME, GRA_ACADEMY, CHARACTER, MARRY, COMPANY, STATION_ID,
	                              STATION_LEVEL, STATION_CHANGE)
		VALUES(
               :sTdGrpManagerMsg.sServiceNo          ,
               to_number(:sTdGrpManagerMsg.sOrgCode) ,
               :sTdGrpManagerMsg.sLoginType          ,
               :sTdGrpManagerMsg.sBossOrgCode        ,
               :sTdGrpManagerMsg.sName               ,
               :sTdGrpManagerMsg.sDuty               ,
               :sTdGrpManagerMsg.sIdType             ,
               :sTdGrpManagerMsg.sSex                ,
               :sTdGrpManagerMsg.sIdentifyNo         ,
               :sTdGrpManagerMsg.sBelongRegion       ,
               :sTdGrpManagerMsg.sBirthday           ,
               :sTdGrpManagerMsg.sPolity             ,
               :sTdGrpManagerMsg.sProfession         ,
               :sTdGrpManagerMsg.sJoinDate           ,
               :sTdGrpManagerMsg.sPhoneNo            ,
               :sTdGrpManagerMsg.sEmail              ,
               :sTdGrpManagerMsg.sBelongDept         ,
               :sTdGrpManagerMsg.sEduLevelid         ,
               :sTdGrpManagerMsg.sSpeciality         ,
               :sTdGrpManagerMsg.sHomeCall           ,
               :sTdGrpManagerMsg.sHomeAddress        ,
               :sTdGrpManagerMsg.sManagerLevel       ,
               :sTdGrpManagerMsg.sInterest           ,
               :sTdGrpManagerMsg.sCreateDate         ,
               :sTdGrpManagerMsg.sUpdateDate         ,
               :sTdGrpManagerMsg.sUpServiceNo        ,
               :sTdGrpManagerMsg.sSystemType         ,
               to_number(:sTdGrpManagerMsg.sAge)     ,
               :sTdGrpManagerMsg.sNativeplace        ,
               :sTdGrpManagerMsg.sJobAge             ,
               :sTdGrpManagerMsg.sTrainStatus        ,
               :sTdGrpManagerMsg.sMarrowName         ,
               :sTdGrpManagerMsg.sMarrowJob          ,
               :sTdGrpManagerMsg.sMarrowPosition     ,
               :sTdGrpManagerMsg.sGraTime            ,
               :sTdGrpManagerMsg.sGraAcademy         ,
               :sTdGrpManagerMsg.sCharacter          ,
               :sTdGrpManagerMsg.sMarry              ,
               :sTdGrpManagerMsg.sCompany            ,
               :sTdGrpManagerMsg.sStationId          ,
               :sTdGrpManagerMsg.sStationLevel       ,
               :sTdGrpManagerMsg.sStationChange
		       );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGRPMANAGERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"service_no"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sServiceNo     );
	OrderSetDataItem(&vMsgBodyType,"org_code"       , ORDERDATAFORMAT_NUMBER, sTdGrpManagerMsg.sOrgCode       );
	OrderSetDataItem(&vMsgBodyType,"login_type"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sLoginType     );
	OrderSetDataItem(&vMsgBodyType,"boss_org_code"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBossOrgCode   );
	OrderSetDataItem(&vMsgBodyType,"name"           , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sName          );
	OrderSetDataItem(&vMsgBodyType,"duty"           , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sDuty          );
	OrderSetDataItem(&vMsgBodyType,"id_type"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sIdType        );
	OrderSetDataItem(&vMsgBodyType,"sex"            , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSex           );
	OrderSetDataItem(&vMsgBodyType,"identify_no"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sIdentifyNo    );
	OrderSetDataItem(&vMsgBodyType,"belong_region"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBelongRegion  );
	OrderSetDataItem(&vMsgBodyType,"birthday"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBirthday      );
	OrderSetDataItem(&vMsgBodyType,"polity"         , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sPolity        );
	OrderSetDataItem(&vMsgBodyType,"profession"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sProfession    );
	OrderSetDataItem(&vMsgBodyType,"join_date"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sJoinDate      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType,"email"          , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sEmail         );
	OrderSetDataItem(&vMsgBodyType,"belong_dept"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBelongDept    );
	OrderSetDataItem(&vMsgBodyType,"edu_levelid"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sEduLevelid    );
	OrderSetDataItem(&vMsgBodyType,"speciality"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSpeciality    );
	OrderSetDataItem(&vMsgBodyType,"home_call"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sHomeCall      );
	OrderSetDataItem(&vMsgBodyType,"home_address"   , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sHomeAddress   );
	OrderSetDataItem(&vMsgBodyType,"manager_level"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sManagerLevel  );
	OrderSetDataItem(&vMsgBodyType,"interest"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sInterest      );
	OrderSetDataItem(&vMsgBodyType,"create_date"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCreateDate    );
	OrderSetDataItem(&vMsgBodyType,"update_date"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sUpdateDate    );
	OrderSetDataItem(&vMsgBodyType,"up_service_no"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sUpServiceNo   );
	OrderSetDataItem(&vMsgBodyType,"system_type"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSystemType    );
	OrderSetDataItem(&vMsgBodyType,"age"            , ORDERDATAFORMAT_NUMBER, sTdGrpManagerMsg.sAge           );
	OrderSetDataItem(&vMsgBodyType,"nativeplace"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sNativeplace   );
	OrderSetDataItem(&vMsgBodyType,"job_age"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sJobAge        );
	OrderSetDataItem(&vMsgBodyType,"train_status"   , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sTrainStatus   );
	OrderSetDataItem(&vMsgBodyType,"marrow_name"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowName    );
	OrderSetDataItem(&vMsgBodyType,"marrow_job"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowJob     );
	OrderSetDataItem(&vMsgBodyType,"marrow_position", ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowPosition);
	OrderSetDataItem(&vMsgBodyType,"gra_time"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sGraTime       );
	OrderSetDataItem(&vMsgBodyType,"gra_academy"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sGraAcademy    );
	OrderSetDataItem(&vMsgBodyType,"character"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCharacter     );
	OrderSetDataItem(&vMsgBodyType,"marry"          , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarry         );
	OrderSetDataItem(&vMsgBodyType,"company"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCompany       );
	OrderSetDataItem(&vMsgBodyType,"station_id"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationId     );
	OrderSetDataItem(&vMsgBodyType,"station_level"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationLevel  );
	OrderSetDataItem(&vMsgBodyType,"station_change" , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationChange );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGrpManagerMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_service_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_service_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE DBVIPADM.dGrpManagerMsg a WHERE a.service_no=rpad(:NG_Param0,6,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGRPMANAGERMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"service_no",ORDERDATAFORMAT_STRING,i_service_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGrpManagerMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_service_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_service_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpManagerMsg	sTdGrpManagerMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE DBVIPADM.dGrpManagerMsg a SET %s WHERE a.service_no=rpad(:NG_Param0,6,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(service_no,chr(0)),
                    nvl(to_char(org_code),chr(0)),
                    nvl(login_type,chr(0)),
                    nvl(boss_org_code,chr(0)),
                    nvl(name,chr(0)),
                    nvl(duty,chr(0)),
                    nvl(id_type,chr(0)),
                    nvl(sex,chr(0)),
                    nvl(identify_no,chr(0)),
                    nvl(belong_region,chr(0)),
                    nvl(birthday,chr(0)),
                    nvl(polity,chr(0)),
                    nvl(profession,chr(0)),
                    nvl(join_date,chr(0)),
                    nvl(phone_no,chr(0)),
                    nvl(email,chr(0)),
                    nvl(belong_dept,chr(0)),
                    nvl(edu_levelid,chr(0)),
                    nvl(speciality,chr(0)),
                    nvl(home_call,chr(0)),
                    nvl(home_address,chr(0)),
                    nvl(manager_level,chr(0)),
                    nvl(interest,chr(0)),
                    nvl(create_date,chr(0)),
                    nvl(update_date,chr(0)),
                    nvl(up_service_no,chr(0)),
                    nvl(system_type,chr(0)),
                    nvl(to_char(age),chr(0)),
                    nvl(nativeplace,chr(0)),
                    nvl(job_age,chr(0)),
                    nvl(train_status,chr(0)),
                    nvl(marrow_name,chr(0)),
                    nvl(marrow_job,chr(0)),
                    nvl(marrow_position,chr(0)),
                    nvl(gra_time,chr(0)),
                    nvl(gra_academy,chr(0)),
                    nvl(character,chr(0)),
                    nvl(marry,chr(0)),
                    nvl(company,chr(0)),
                    nvl(station_id,chr(0)),
                    nvl(station_level,chr(0)),
                    nvl(station_change,chr(0))
			INTO :sTdGrpManagerMsg.sServiceNo     ,
                 :sTdGrpManagerMsg.sOrgCode       ,
                 :sTdGrpManagerMsg.sLoginType     ,
                 :sTdGrpManagerMsg.sBossOrgCode   ,
                 :sTdGrpManagerMsg.sName          ,
                 :sTdGrpManagerMsg.sDuty          ,
                 :sTdGrpManagerMsg.sIdType        ,
                 :sTdGrpManagerMsg.sSex           ,
                 :sTdGrpManagerMsg.sIdentifyNo    ,
                 :sTdGrpManagerMsg.sBelongRegion  ,
                 :sTdGrpManagerMsg.sBirthday      ,
                 :sTdGrpManagerMsg.sPolity        ,
                 :sTdGrpManagerMsg.sProfession    ,
                 :sTdGrpManagerMsg.sJoinDate      ,
                 :sTdGrpManagerMsg.sPhoneNo       ,
                 :sTdGrpManagerMsg.sEmail         ,
                 :sTdGrpManagerMsg.sBelongDept    ,
                 :sTdGrpManagerMsg.sEduLevelid    ,
                 :sTdGrpManagerMsg.sSpeciality    ,
                 :sTdGrpManagerMsg.sHomeCall      ,
                 :sTdGrpManagerMsg.sHomeAddress   ,
                 :sTdGrpManagerMsg.sManagerLevel  ,
                 :sTdGrpManagerMsg.sInterest      ,
                 :sTdGrpManagerMsg.sCreateDate    ,
                 :sTdGrpManagerMsg.sUpdateDate    ,
                 :sTdGrpManagerMsg.sUpServiceNo   ,
                 :sTdGrpManagerMsg.sSystemType    ,
                 :sTdGrpManagerMsg.sAge           ,
                 :sTdGrpManagerMsg.sNativeplace   ,
                 :sTdGrpManagerMsg.sJobAge        ,
                 :sTdGrpManagerMsg.sTrainStatus   ,
                 :sTdGrpManagerMsg.sMarrowName    ,
                 :sTdGrpManagerMsg.sMarrowJob     ,
                 :sTdGrpManagerMsg.sMarrowPosition,
                 :sTdGrpManagerMsg.sGraTime       ,
                 :sTdGrpManagerMsg.sGraAcademy    ,
                 :sTdGrpManagerMsg.sCharacter     ,
                 :sTdGrpManagerMsg.sMarry         ,
                 :sTdGrpManagerMsg.sCompany       ,
                 :sTdGrpManagerMsg.sStationId     ,
                 :sTdGrpManagerMsg.sStationLevel  ,
                 :sTdGrpManagerMsg.sStationChange
			FROM DBVIPADM.dGrpManagerMsg
			WHERE service_no = :i_service_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGrpManagerMsg.sServiceNo       );
	Coltrim(sTdGrpManagerMsg.sOrgCode         );
	Coltrim(sTdGrpManagerMsg.sLoginType       );
	Coltrim(sTdGrpManagerMsg.sBossOrgCode     );
	Coltrim(sTdGrpManagerMsg.sName            );
	Coltrim(sTdGrpManagerMsg.sDuty            );
	Coltrim(sTdGrpManagerMsg.sIdType          );
	Coltrim(sTdGrpManagerMsg.sSex             );
	Coltrim(sTdGrpManagerMsg.sIdentifyNo      );
	Coltrim(sTdGrpManagerMsg.sBelongRegion    );
	Coltrim(sTdGrpManagerMsg.sBirthday        );
	Coltrim(sTdGrpManagerMsg.sPolity          );
	Coltrim(sTdGrpManagerMsg.sProfession      );
	Coltrim(sTdGrpManagerMsg.sJoinDate        );
	Coltrim(sTdGrpManagerMsg.sPhoneNo         );
	Coltrim(sTdGrpManagerMsg.sEmail           );
	Coltrim(sTdGrpManagerMsg.sBelongDept      );
	Coltrim(sTdGrpManagerMsg.sEduLevelid      );
	Coltrim(sTdGrpManagerMsg.sSpeciality      );
	Coltrim(sTdGrpManagerMsg.sHomeCall        );
	Coltrim(sTdGrpManagerMsg.sHomeAddress     );
	Coltrim(sTdGrpManagerMsg.sManagerLevel    );
	Coltrim(sTdGrpManagerMsg.sInterest        );
	Coltrim(sTdGrpManagerMsg.sCreateDate      );
	Coltrim(sTdGrpManagerMsg.sUpdateDate      );
	Coltrim(sTdGrpManagerMsg.sUpServiceNo     );
	Coltrim(sTdGrpManagerMsg.sSystemType      );
	Coltrim(sTdGrpManagerMsg.sAge             );
	Coltrim(sTdGrpManagerMsg.sNativeplace     );
	Coltrim(sTdGrpManagerMsg.sJobAge          );
	Coltrim(sTdGrpManagerMsg.sTrainStatus     );
	Coltrim(sTdGrpManagerMsg.sMarrowName      );
	Coltrim(sTdGrpManagerMsg.sMarrowJob       );
	Coltrim(sTdGrpManagerMsg.sMarrowPosition  );
	Coltrim(sTdGrpManagerMsg.sGraTime         );
	Coltrim(sTdGrpManagerMsg.sGraAcademy      );
	Coltrim(sTdGrpManagerMsg.sCharacter       );
	Coltrim(sTdGrpManagerMsg.sMarry           );
	Coltrim(sTdGrpManagerMsg.sCompany         );
	Coltrim(sTdGrpManagerMsg.sStationId       );
	Coltrim(sTdGrpManagerMsg.sStationLevel    );
	Coltrim(sTdGrpManagerMsg.sStationChange   );

	strcpy(v_table_name,"DGRPMANAGERMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"service_no",ORDERDATAFORMAT_STRING,i_service_no);

	OrderSetDataItem(&vMsgBodyType,"service_no"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sServiceNo     );
	OrderSetDataItem(&vMsgBodyType,"org_code"       , ORDERDATAFORMAT_NUMBER, sTdGrpManagerMsg.sOrgCode       );
	OrderSetDataItem(&vMsgBodyType,"login_type"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sLoginType     );
	OrderSetDataItem(&vMsgBodyType,"boss_org_code"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBossOrgCode   );
	OrderSetDataItem(&vMsgBodyType,"name"           , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sName          );
	OrderSetDataItem(&vMsgBodyType,"duty"           , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sDuty          );
	OrderSetDataItem(&vMsgBodyType,"id_type"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sIdType        );
	OrderSetDataItem(&vMsgBodyType,"sex"            , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSex           );
	OrderSetDataItem(&vMsgBodyType,"identify_no"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sIdentifyNo    );
	OrderSetDataItem(&vMsgBodyType,"belong_region"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBelongRegion  );
	OrderSetDataItem(&vMsgBodyType,"birthday"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBirthday      );
	OrderSetDataItem(&vMsgBodyType,"polity"         , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sPolity        );
	OrderSetDataItem(&vMsgBodyType,"profession"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sProfession    );
	OrderSetDataItem(&vMsgBodyType,"join_date"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sJoinDate      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sPhoneNo       );
	OrderSetDataItem(&vMsgBodyType,"email"          , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sEmail         );
	OrderSetDataItem(&vMsgBodyType,"belong_dept"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sBelongDept    );
	OrderSetDataItem(&vMsgBodyType,"edu_levelid"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sEduLevelid    );
	OrderSetDataItem(&vMsgBodyType,"speciality"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSpeciality    );
	OrderSetDataItem(&vMsgBodyType,"home_call"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sHomeCall      );
	OrderSetDataItem(&vMsgBodyType,"home_address"   , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sHomeAddress   );
	OrderSetDataItem(&vMsgBodyType,"manager_level"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sManagerLevel  );
	OrderSetDataItem(&vMsgBodyType,"interest"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sInterest      );
	OrderSetDataItem(&vMsgBodyType,"create_date"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCreateDate    );
	OrderSetDataItem(&vMsgBodyType,"update_date"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sUpdateDate    );
	OrderSetDataItem(&vMsgBodyType,"up_service_no"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sUpServiceNo   );
	OrderSetDataItem(&vMsgBodyType,"system_type"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sSystemType    );
	OrderSetDataItem(&vMsgBodyType,"age"            , ORDERDATAFORMAT_NUMBER, sTdGrpManagerMsg.sAge           );
	OrderSetDataItem(&vMsgBodyType,"nativeplace"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sNativeplace   );
	OrderSetDataItem(&vMsgBodyType,"job_age"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sJobAge        );
	OrderSetDataItem(&vMsgBodyType,"train_status"   , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sTrainStatus   );
	OrderSetDataItem(&vMsgBodyType,"marrow_name"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowName    );
	OrderSetDataItem(&vMsgBodyType,"marrow_job"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowJob     );
	OrderSetDataItem(&vMsgBodyType,"marrow_position", ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarrowPosition);
	OrderSetDataItem(&vMsgBodyType,"gra_time"       , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sGraTime       );
	OrderSetDataItem(&vMsgBodyType,"gra_academy"    , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sGraAcademy    );
	OrderSetDataItem(&vMsgBodyType,"character"      , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCharacter     );
	OrderSetDataItem(&vMsgBodyType,"marry"          , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sMarry         );
	OrderSetDataItem(&vMsgBodyType,"company"        , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sCompany       );
	OrderSetDataItem(&vMsgBodyType,"station_id"     , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationId     );
	OrderSetDataItem(&vMsgBodyType,"station_level"  , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationLevel  );
	OrderSetDataItem(&vMsgBodyType,"station_change" , ORDERDATAFORMAT_STRING, sTdGrpManagerMsg.sStationChange );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}



int OrderInsertGrpCustMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGrpCustMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpCustMsg	sTdGrpCustMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpCustMsg.sCustId            );
	Coltrim(sTdGrpCustMsg.sPartyId           );
	Coltrim(sTdGrpCustMsg.sUnitId            );
	Coltrim(sTdGrpCustMsg.sCustName          );
	Coltrim(sTdGrpCustMsg.sTradeCode         );
	Coltrim(sTdGrpCustMsg.sBankName          );
	Coltrim(sTdGrpCustMsg.sBankAccountsCode  );
	Coltrim(sTdGrpCustMsg.sUnitAddr          );
	Coltrim(sTdGrpCustMsg.sUnitZip           );
	Coltrim(sTdGrpCustMsg.sContactPerson     );
	Coltrim(sTdGrpCustMsg.sContactPhone      );
	Coltrim(sTdGrpCustMsg.sContactMobilePhone);
	Coltrim(sTdGrpCustMsg.sFax               );
	Coltrim(sTdGrpCustMsg.sWeb               );
	Coltrim(sTdGrpCustMsg.sUnitLeader        );
	Coltrim(sTdGrpCustMsg.sRunArea           );
	Coltrim(sTdGrpCustMsg.sEnrolFee          );
	Coltrim(sTdGrpCustMsg.sYearTurnover      );
	Coltrim(sTdGrpCustMsg.sYearGain          );
	Coltrim(sTdGrpCustMsg.sTopRepreName      );
	Coltrim(sTdGrpCustMsg.sTopReprePhone     );
	Coltrim(sTdGrpCustMsg.sUnitCreateDay     );
	Coltrim(sTdGrpCustMsg.sLicenseNumber     );
	Coltrim(sTdGrpCustMsg.sInstitutionType   );
	Coltrim(sTdGrpCustMsg.sLicenseValidate   );
	Coltrim(sTdGrpCustMsg.sEntType           );
	Coltrim(sTdGrpCustMsg.sVpmnFlag          );
	Coltrim(sTdGrpCustMsg.sStatusCode        );
	Coltrim(sTdGrpCustMsg.sAreaType          );
	Coltrim(sTdGrpCustMsg.sProvinceCode      );
	Coltrim(sTdGrpCustMsg.sLocalNet          );
	Coltrim(sTdGrpCustMsg.sAreaCode          );
	Coltrim(sTdGrpCustMsg.sOwnerCode         );
	Coltrim(sTdGrpCustMsg.sValidFlag         );
	Coltrim(sTdGrpCustMsg.sCreateLogin       );
	Coltrim(sTdGrpCustMsg.sCreateDate        );
	Coltrim(sTdGrpCustMsg.sLeaveDate         );
	Coltrim(sTdGrpCustMsg.sRevokeDate        );
	Coltrim(sTdGrpCustMsg.sJionDate          );
	Coltrim(sTdGrpCustMsg.sGroupId           );
	Coltrim(sTdGrpCustMsg.sServiceNo         );
	Coltrim(sTdGrpCustMsg.sPayType           );
	Coltrim(sTdGrpCustMsg.sComeChannelCode   );
	Coltrim(sTdGrpCustMsg.sServiceChannel    );
	Coltrim(sTdGrpCustMsg.sEnterPro          );
	Coltrim(sTdGrpCustMsg.sInformationFlag   );
	Coltrim(sTdGrpCustMsg.sNationUnitCode    );
	Coltrim(sTdGrpCustMsg.sUniPayNo          );
	Coltrim(sTdGrpCustMsg.sPhotoCode         );
	Coltrim(sTdGrpCustMsg.sUnitPhoto         );
	Coltrim(sTdGrpCustMsg.sBossPrivilege     );
	Coltrim(sTdGrpCustMsg.sGradeCode         );
	Coltrim(sTdGrpCustMsg.sNote              );
	Coltrim(sTdGrpCustMsg.sUpdateLoginNo     );
	Coltrim(sTdGrpCustMsg.sUpdateDate        );
	Coltrim(sTdGrpCustMsg.sOprtType          );
	Coltrim(sTdGrpCustMsg.sOperType          );
	Coltrim(sTdGrpCustMsg.sOperDate          );
	Coltrim(sTdGrpCustMsg.sBak1              );
	Coltrim(sTdGrpCustMsg.sBak2              );
	Coltrim(sTdGrpCustMsg.sBak3              );
	Coltrim(sTdGrpCustMsg.sBak4              );
	Coltrim(sTdGrpCustMsg.sBak5              );
	Coltrim(sTdGrpCustMsg.sOrgId             );
	Coltrim(sTdGrpCustMsg.sModi_type          );
	Coltrim(sTdGrpCustMsg.sModi_date          );

	EXEC SQL INSERT INTO DBVIPADM.dGrpCustMsg(CUST_ID, PARTY_ID, UNIT_ID, CUST_NAME, TRADE_CODE,
	                                          BANK_NAME, BANK_ACCOUNTS_CODE, UNIT_ADDR, UNIT_ZIP,
	                                          CONTACT_PERSON, CONTACT_PHONE, CONTACT_MOBILE_PHONE,
	                                          FAX, WEB, UNIT_LEADER, RUN_AREA, ENROL_FEE,
	                                          YEAR_TURNOVER, YEAR_GAIN, TOP_REPRE_NAME,
	                                          TOP_REPRE_PHONE, UNIT_CREATE_DAY, LICENSE_NUMBER,
	                                          INSTITUTION_TYPE, LICENSE_VALIDATE, ENT_TYPE,
	                                          VPMN_FLAG, STATUS_CODE, AREA_TYPE, PROVINCE_CODE,
	                                          LOCAL_NET, AREA_CODE, OWNER_CODE, VALID_FLAG,
	                                          CREATE_LOGIN, CREATE_DATE, LEAVE_DATE, REVOKE_DATE,
	                                          JION_DATE, GROUP_ID, SERVICE_NO, PAY_TYPE,
	                                          COME_CHANNEL_CODE, SERVICE_CHANNEL, ENTER_PRO,
	                                          INFORMATION_FLAG, NATION_UNIT_CODE, UNI_PAY_NO,
	                                          PHOTO_CODE, UNIT_PHOTO, BOSS_PRIVILEGE, GRADE_CODE,
	                                          NOTE, UPDATE_LOGIN_NO, UPDATE_DATE, OPRT_TYPE,
	                                          OPER_TYPE, OPER_DATE, BAK1, BAK2,
	                                          BAK3, BAK4, BAK5,modi_type,modi_date)
		VALUES(
                to_number(:sTdGrpCustMsg.sCustId  )                 ,
                to_number(:sTdGrpCustMsg.sPartyId )                 ,
                to_number(:sTdGrpCustMsg.sUnitId  )                 ,
                :sTdGrpCustMsg.sCustName                 ,
                :sTdGrpCustMsg.sTradeCode                ,
                :sTdGrpCustMsg.sBankName                 ,
                :sTdGrpCustMsg.sBankAccountsCode         ,
                :sTdGrpCustMsg.sUnitAddr                 ,
                :sTdGrpCustMsg.sUnitZip                  ,
                :sTdGrpCustMsg.sContactPerson            ,
                :sTdGrpCustMsg.sContactPhone             ,
                :sTdGrpCustMsg.sContactMobilePhone       ,
                :sTdGrpCustMsg.sFax                      ,
                :sTdGrpCustMsg.sWeb                      ,
                :sTdGrpCustMsg.sUnitLeader               ,
                :sTdGrpCustMsg.sRunArea                  ,
                to_number(:sTdGrpCustMsg.sEnrolFee    )             ,
                to_number(:sTdGrpCustMsg.sYearTurnover)             ,
                to_number(:sTdGrpCustMsg.sYearGain    )             ,
                :sTdGrpCustMsg.sTopRepreName             ,
                :sTdGrpCustMsg.sTopReprePhone            ,
                to_date(:sTdGrpCustMsg.sUnitCreateDay ,'yyyymmdd hh24:mi:ss')           ,
                :sTdGrpCustMsg.sLicenseNumber            ,
                :sTdGrpCustMsg.sInstitutionType          ,
                to_date(:sTdGrpCustMsg.sLicenseValidate,'yyyymmdd hh24:mi:ss')          ,
                :sTdGrpCustMsg.sEntType                  ,
                :sTdGrpCustMsg.sVpmnFlag                 ,
                :sTdGrpCustMsg.sStatusCode               ,
                :sTdGrpCustMsg.sAreaType                 ,
                :sTdGrpCustMsg.sProvinceCode             ,
                :sTdGrpCustMsg.sLocalNet                 ,
                :sTdGrpCustMsg.sAreaCode                 ,
                :sTdGrpCustMsg.sOwnerCode                ,
                :sTdGrpCustMsg.sValidFlag                ,
                :sTdGrpCustMsg.sCreateLogin              ,
                to_date(:sTdGrpCustMsg.sCreateDate,'yyyymmdd hh24:mi:ss')               ,
                to_date(:sTdGrpCustMsg.sLeaveDate ,'yyyymmdd hh24:mi:ss')               ,
                to_date(:sTdGrpCustMsg.sRevokeDate,'yyyymmdd hh24:mi:ss')               ,
                to_date(:sTdGrpCustMsg.sJionDate  ,'yyyymmdd hh24:mi:ss')               ,
                :sTdGrpCustMsg.sGroupId                  ,
                :sTdGrpCustMsg.sServiceNo                ,
                :sTdGrpCustMsg.sPayType                  ,
                :sTdGrpCustMsg.sComeChannelCode          ,
                :sTdGrpCustMsg.sServiceChannel           ,
                :sTdGrpCustMsg.sEnterPro                 ,
                :sTdGrpCustMsg.sInformationFlag          ,
                :sTdGrpCustMsg.sNationUnitCode           ,
                :sTdGrpCustMsg.sUniPayNo                 ,
                :sTdGrpCustMsg.sPhotoCode                ,
                :sTdGrpCustMsg.sUnitPhoto                ,
                :sTdGrpCustMsg.sBossPrivilege            ,
                :sTdGrpCustMsg.sGradeCode                ,
                :sTdGrpCustMsg.sNote                     ,
                :sTdGrpCustMsg.sUpdateLoginNo            ,
                to_date(:sTdGrpCustMsg.sUpdateDate,'yyyymmdd hh24:mi:ss')               ,
                :sTdGrpCustMsg.sOprtType                 ,
                :sTdGrpCustMsg.sOperType                 ,
                to_date(:sTdGrpCustMsg.sOperDate,'yyyymmdd hh24:mi:ss')                 ,
                :sTdGrpCustMsg.sBak1                     ,
                :sTdGrpCustMsg.sBak2                     ,
                :sTdGrpCustMsg.sBak3                     ,
                :sTdGrpCustMsg.sBak4                     ,
                :sTdGrpCustMsg.sBak5,
                :sTdGrpCustMsg.sModi_type,
                to_date(:sTdGrpCustMsg.sModi_date,'yyyy-mm-dd')
		       );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGRPCUSTMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"cust_id"             , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sCustId             );
	OrderSetDataItem(&vMsgBodyType,"party_id"            , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sPartyId            );
	OrderSetDataItem(&vMsgBodyType,"unit_id"             , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sUnitId             );
	OrderSetDataItem(&vMsgBodyType,"cust_name"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sCustName           );
	OrderSetDataItem(&vMsgBodyType,"trade_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTradeCode          );
	OrderSetDataItem(&vMsgBodyType,"bank_name"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBankName           );
	OrderSetDataItem(&vMsgBodyType,"bank_accounts_code"  , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBankAccountsCode   );
	OrderSetDataItem(&vMsgBodyType,"unit_addr"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitAddr           );
	OrderSetDataItem(&vMsgBodyType,"unit_zip"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitZip            );
	OrderSetDataItem(&vMsgBodyType,"contact_person"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactPerson      );
	OrderSetDataItem(&vMsgBodyType,"contact_phone"       , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactPhone       );
	OrderSetDataItem(&vMsgBodyType,"contact_mobile_phone", ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactMobilePhone );
	OrderSetDataItem(&vMsgBodyType,"fax"                 , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sFax                );
	OrderSetDataItem(&vMsgBodyType,"web"                 , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sWeb                );
	OrderSetDataItem(&vMsgBodyType,"unit_leader"         , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitLeader         );
	OrderSetDataItem(&vMsgBodyType,"run_area"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sRunArea            );
	OrderSetDataItem(&vMsgBodyType,"enrol_fee"           , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sEnrolFee           );
	OrderSetDataItem(&vMsgBodyType,"year_turnover"       , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sYearTurnover       );
	OrderSetDataItem(&vMsgBodyType,"year_gain"           , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sYearGain           );
	OrderSetDataItem(&vMsgBodyType,"top_repre_name"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTopRepreName       );
	OrderSetDataItem(&vMsgBodyType,"top_repre_phone"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTopReprePhone      );
	OrderSetDataItem(&vMsgBodyType,"unit_create_day"     , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sUnitCreateDay      );
	OrderSetDataItem(&vMsgBodyType,"license_number"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sLicenseNumber      );
	OrderSetDataItem(&vMsgBodyType,"institution_type"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sInstitutionType    );
	OrderSetDataItem(&vMsgBodyType,"license_validate"    , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sLicenseValidate    );
	OrderSetDataItem(&vMsgBodyType,"ent_type"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sEntType            );
	OrderSetDataItem(&vMsgBodyType,"vpmn_flag"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sVpmnFlag           );
	OrderSetDataItem(&vMsgBodyType,"status_code"         , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sStatusCode         );
	OrderSetDataItem(&vMsgBodyType,"area_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sAreaType           );
	OrderSetDataItem(&vMsgBodyType,"province_code"       , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sProvinceCode       );
	OrderSetDataItem(&vMsgBodyType,"local_net"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sLocalNet           );
	OrderSetDataItem(&vMsgBodyType,"area_code"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sAreaCode           );
	OrderSetDataItem(&vMsgBodyType,"owner_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOwnerCode          );
	OrderSetDataItem(&vMsgBodyType,"valid_flag"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sValidFlag          );
	OrderSetDataItem(&vMsgBodyType,"create_login"        , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sCreateLogin        );
	OrderSetDataItem(&vMsgBodyType,"create_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sCreateDate         );
	OrderSetDataItem(&vMsgBodyType,"leave_date"          , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sLeaveDate          );
	OrderSetDataItem(&vMsgBodyType,"revoke_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sRevokeDate         );
	OrderSetDataItem(&vMsgBodyType,"jion_date"           , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sJionDate           );
	OrderSetDataItem(&vMsgBodyType,"group_id"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sGroupId            );
	OrderSetDataItem(&vMsgBodyType,"service_no"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sServiceNo          );
	OrderSetDataItem(&vMsgBodyType,"pay_type"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sPayType            );
	OrderSetDataItem(&vMsgBodyType,"come_channel_code"   , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sComeChannelCode    );
	OrderSetDataItem(&vMsgBodyType,"service_channel"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sServiceChannel     );
	OrderSetDataItem(&vMsgBodyType,"enter_pro"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sEnterPro           );
	OrderSetDataItem(&vMsgBodyType,"information_flag"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sInformationFlag    );
	OrderSetDataItem(&vMsgBodyType,"nation_unit_code"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sNationUnitCode     );
	OrderSetDataItem(&vMsgBodyType,"uni_pay_no"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUniPayNo           );
	OrderSetDataItem(&vMsgBodyType,"photo_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sPhotoCode          );
	OrderSetDataItem(&vMsgBodyType,"unit_photo"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitPhoto          );
	OrderSetDataItem(&vMsgBodyType,"boss_privilege"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBossPrivilege      );
	OrderSetDataItem(&vMsgBodyType,"grade_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sGradeCode          );
	OrderSetDataItem(&vMsgBodyType,"note"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sNote               );
	OrderSetDataItem(&vMsgBodyType,"update_login_no"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUpdateLoginNo      );
	OrderSetDataItem(&vMsgBodyType,"update_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sUpdateDate         );
	OrderSetDataItem(&vMsgBodyType,"oprt_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOprtType           );
	OrderSetDataItem(&vMsgBodyType,"oper_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOperType           );
	OrderSetDataItem(&vMsgBodyType,"oper_date"           , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sOperDate           );
	OrderSetDataItem(&vMsgBodyType,"bak1"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak1               );
	OrderSetDataItem(&vMsgBodyType,"bak2"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak2               );
	OrderSetDataItem(&vMsgBodyType,"bak3"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak3               );
	OrderSetDataItem(&vMsgBodyType,"bak4"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak4               );
	OrderSetDataItem(&vMsgBodyType,"bak5"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak5               );
	OrderSetDataItem(&vMsgBodyType,"modi_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sModi_type   	     );
	OrderSetDataItem(&vMsgBodyType,"modi_date"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sModi_date          );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGrpCustMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_cust_id,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_cust_id;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE DBVIPADM.dGrpCustMsg a WHERE a.cust_id=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGRPCUSTMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGrpCustMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_cust_id,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_cust_id;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpCustMsg	sTdGrpCustMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE DBVIPADM.dGrpCustMsg a SET %s WHERE a.cust_id=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT                     to_char( cust_id )                ,
                    nvl(to_char( party_id), chr(0) )                ,
                    nvl(to_char( unit_id ), chr(0) )               ,
                    nvl(cust_name         , chr(0) )     ,
                    trade_code              ,
                    nvl(bank_name               ,chr(0)),
                    nvl(bank_accounts_code      ,chr(0)),
                    nvl(unit_addr               ,chr(0)),
                    nvl(unit_zip                ,chr(0)),
                    nvl(contact_person          ,chr(0)),
                    nvl(contact_phone           ,chr(0)),
                    nvl(contact_mobile_phone    ,chr(0)),
                    nvl(fax                     ,chr(0)),
                    nvl(web                     ,chr(0)),
                    nvl(unit_leader             ,chr(0)),
                    nvl(run_area                ,chr(0)),
                    nvl(to_char( enrol_fee    ) ,chr(0))          ,
                    nvl(to_char( year_turnover) ,chr(0))          ,
                    nvl(to_char( year_gain    ) ,chr(0))          ,
                    nvl(top_repre_name          ,chr(0)),
                    nvl(top_repre_phone         ,chr(0)),
                    nvl(to_char(   unit_create_day,'yyyymmdd hh24:mi:ss')         ,chr(0)),
                    nvl(license_number          ,                                  chr(0)),
                    nvl(institution_type        ,                                  chr(0)),
                    nvl(to_char(   license_validate ,'yyyymmdd hh24:mi:ss')       ,chr(0)),
                    nvl(ent_type                ,                                  chr(0)),
                    nvl(vpmn_flag               ,                                  chr(0)),
                    status_code             ,
                    area_type               ,
                    nvl(province_code           ,chr(0)),
                    nvl(local_net               ,chr(0)),
                    nvl(area_code               ,chr(0)),
                    owner_code              ,
                    nvl(valid_flag              ,chr(0)),
                    nvl(create_login            ,chr(0)),
                    to_char(   create_date ,'yyyymmdd hh24:mi:ss')            ,
                    nvl(to_char(   leave_date  ,'yyyymmdd hh24:mi:ss')            ,chr(0)),
                    nvl(to_char(   revoke_date ,'yyyymmdd hh24:mi:ss')            ,chr(0)),
                    nvl(to_char(   jion_date   ,'yyyymmdd hh24:mi:ss')            ,chr(0)),
                    nvl(group_id                ,                                  chr(0)),
                    service_no              ,
                    nvl(pay_type                ,chr(0)),
                    nvl(come_channel_code       ,chr(0)),
                    nvl(service_channel         ,chr(0)),
                    nvl(enter_pro               ,chr(0)),
                    nvl(information_flag        ,chr(0)),
                    nvl(nation_unit_code        ,chr(0)),
                    nvl(uni_pay_no              ,chr(0)),
                    nvl(photo_code              ,chr(0)),
                    nvl(unit_photo              ,chr(0)),
                    nvl(boss_privilege          ,chr(0)),
                    nvl(grade_code              ,chr(0)),
                    nvl(note                    ,chr(0)),
                    update_login_no         ,
                    nvl(to_char(   update_date ,'yyyymmdd hh24:mi:ss')            ,chr(0)),
                    nvl(oprt_type               ,                                  chr(0)),
                    nvl(oper_type               ,                                  chr(0)),
                    nvl(to_char(   oper_date  ,'yyyymmdd hh24:mi:ss')             ,chr(0)),
                    nvl(bak1                    ,                                  chr(0)),
                    nvl(bak2                    ,                                  chr(0)),
                    nvl(bak3                    ,                                  chr(0)),
                    nvl(bak4                    ,                                  chr(0)),
                    nvl(bak5                    ,                                  chr(0))
			INTO                  :sTdGrpCustMsg.sCustId             ,
                 :sTdGrpCustMsg.sPartyId            ,
                 :sTdGrpCustMsg.sUnitId             ,
                 :sTdGrpCustMsg.sCustName           ,
                 :sTdGrpCustMsg.sTradeCode          ,
                 :sTdGrpCustMsg.sBankName           ,
                 :sTdGrpCustMsg.sBankAccountsCode   ,
                 :sTdGrpCustMsg.sUnitAddr           ,
                 :sTdGrpCustMsg.sUnitZip            ,
                 :sTdGrpCustMsg.sContactPerson      ,
                 :sTdGrpCustMsg.sContactPhone       ,
                 :sTdGrpCustMsg.sContactMobilePhone ,
                 :sTdGrpCustMsg.sFax                ,
                 :sTdGrpCustMsg.sWeb                ,
                 :sTdGrpCustMsg.sUnitLeader         ,
                 :sTdGrpCustMsg.sRunArea            ,
                 :sTdGrpCustMsg.sEnrolFee           ,
                 :sTdGrpCustMsg.sYearTurnover       ,
                 :sTdGrpCustMsg.sYearGain           ,
                 :sTdGrpCustMsg.sTopRepreName       ,
                 :sTdGrpCustMsg.sTopReprePhone      ,
                 :sTdGrpCustMsg.sUnitCreateDay      ,
                 :sTdGrpCustMsg.sLicenseNumber      ,
                 :sTdGrpCustMsg.sInstitutionType    ,
                 :sTdGrpCustMsg.sLicenseValidate    ,
                 :sTdGrpCustMsg.sEntType            ,
                 :sTdGrpCustMsg.sVpmnFlag           ,
                 :sTdGrpCustMsg.sStatusCode         ,
                 :sTdGrpCustMsg.sAreaType           ,
                 :sTdGrpCustMsg.sProvinceCode       ,
                 :sTdGrpCustMsg.sLocalNet           ,
                 :sTdGrpCustMsg.sAreaCode           ,
                 :sTdGrpCustMsg.sOwnerCode          ,
                 :sTdGrpCustMsg.sValidFlag          ,
                 :sTdGrpCustMsg.sCreateLogin        ,
                 :sTdGrpCustMsg.sCreateDate         ,
                 :sTdGrpCustMsg.sLeaveDate          ,
                 :sTdGrpCustMsg.sRevokeDate         ,
                 :sTdGrpCustMsg.sJionDate           ,
                 :sTdGrpCustMsg.sGroupId            ,
                 :sTdGrpCustMsg.sServiceNo          ,
                 :sTdGrpCustMsg.sPayType            ,
                 :sTdGrpCustMsg.sComeChannelCode    ,
                 :sTdGrpCustMsg.sServiceChannel     ,
                 :sTdGrpCustMsg.sEnterPro           ,
                 :sTdGrpCustMsg.sInformationFlag    ,
                 :sTdGrpCustMsg.sNationUnitCode     ,
                 :sTdGrpCustMsg.sUniPayNo           ,
                 :sTdGrpCustMsg.sPhotoCode          ,
                 :sTdGrpCustMsg.sUnitPhoto          ,
                 :sTdGrpCustMsg.sBossPrivilege      ,
                 :sTdGrpCustMsg.sGradeCode          ,
                 :sTdGrpCustMsg.sNote               ,
                 :sTdGrpCustMsg.sUpdateLoginNo      ,
                 :sTdGrpCustMsg.sUpdateDate         ,
                 :sTdGrpCustMsg.sOprtType           ,
                 :sTdGrpCustMsg.sOperType           ,
                 :sTdGrpCustMsg.sOperDate           ,
                 :sTdGrpCustMsg.sBak1               ,
                 :sTdGrpCustMsg.sBak2               ,
                 :sTdGrpCustMsg.sBak3               ,
                 :sTdGrpCustMsg.sBak4               ,
                 :sTdGrpCustMsg.sBak5
			FROM DBVIPADM.dGrpCustMsg
			WHERE cust_id = to_number(:i_cust_id);

	if (SQLCODE!=SQLOK)
		return -500037;

    Coltrim(sTdGrpCustMsg.sCustId             );
    Coltrim(sTdGrpCustMsg.sPartyId            );
    Coltrim(sTdGrpCustMsg.sUnitId             );
    Coltrim(sTdGrpCustMsg.sCustName           );
    Coltrim(sTdGrpCustMsg.sTradeCode          );
    Coltrim(sTdGrpCustMsg.sBankName           );
    Coltrim(sTdGrpCustMsg.sBankAccountsCode   );
    Coltrim(sTdGrpCustMsg.sUnitAddr           );
    Coltrim(sTdGrpCustMsg.sUnitZip            );
    Coltrim(sTdGrpCustMsg.sContactPerson      );
    Coltrim(sTdGrpCustMsg.sContactPhone       );
    Coltrim(sTdGrpCustMsg.sContactMobilePhone );
    Coltrim(sTdGrpCustMsg.sFax                );
    Coltrim(sTdGrpCustMsg.sWeb                );
    Coltrim(sTdGrpCustMsg.sUnitLeader         );
    Coltrim(sTdGrpCustMsg.sRunArea            );
    Coltrim(sTdGrpCustMsg.sEnrolFee           );
    Coltrim(sTdGrpCustMsg.sYearTurnover       );
    Coltrim(sTdGrpCustMsg.sYearGain           );
    Coltrim(sTdGrpCustMsg.sTopRepreName       );
    Coltrim(sTdGrpCustMsg.sTopReprePhone      );
    Coltrim(sTdGrpCustMsg.sUnitCreateDay      );
    Coltrim(sTdGrpCustMsg.sLicenseNumber      );
    Coltrim(sTdGrpCustMsg.sInstitutionType    );
    Coltrim(sTdGrpCustMsg.sLicenseValidate    );
    Coltrim(sTdGrpCustMsg.sEntType            );
    Coltrim(sTdGrpCustMsg.sVpmnFlag           );
    Coltrim(sTdGrpCustMsg.sStatusCode         );
    Coltrim(sTdGrpCustMsg.sAreaType           );
    Coltrim(sTdGrpCustMsg.sProvinceCode       );
    Coltrim(sTdGrpCustMsg.sLocalNet           );
    Coltrim(sTdGrpCustMsg.sAreaCode           );
    Coltrim(sTdGrpCustMsg.sOwnerCode          );
    Coltrim(sTdGrpCustMsg.sValidFlag          );
    Coltrim(sTdGrpCustMsg.sCreateLogin        );
    Coltrim(sTdGrpCustMsg.sCreateDate         );
    Coltrim(sTdGrpCustMsg.sLeaveDate          );
    Coltrim(sTdGrpCustMsg.sRevokeDate         );
    Coltrim(sTdGrpCustMsg.sJionDate           );
    Coltrim(sTdGrpCustMsg.sGroupId            );
    Coltrim(sTdGrpCustMsg.sServiceNo          );
    Coltrim(sTdGrpCustMsg.sPayType            );
    Coltrim(sTdGrpCustMsg.sComeChannelCode    );
    Coltrim(sTdGrpCustMsg.sServiceChannel     );
    Coltrim(sTdGrpCustMsg.sEnterPro           );
    Coltrim(sTdGrpCustMsg.sInformationFlag    );
    Coltrim(sTdGrpCustMsg.sNationUnitCode     );
    Coltrim(sTdGrpCustMsg.sUniPayNo           );
    Coltrim(sTdGrpCustMsg.sPhotoCode          );
    Coltrim(sTdGrpCustMsg.sUnitPhoto          );
    Coltrim(sTdGrpCustMsg.sBossPrivilege      );
    Coltrim(sTdGrpCustMsg.sGradeCode          );
    Coltrim(sTdGrpCustMsg.sNote               );
    Coltrim(sTdGrpCustMsg.sUpdateLoginNo      );
    Coltrim(sTdGrpCustMsg.sUpdateDate         );
    Coltrim(sTdGrpCustMsg.sOprtType           );
    Coltrim(sTdGrpCustMsg.sOperType           );
    Coltrim(sTdGrpCustMsg.sOperDate           );
    Coltrim(sTdGrpCustMsg.sBak1               );
    Coltrim(sTdGrpCustMsg.sBak2               );
    Coltrim(sTdGrpCustMsg.sBak3               );
    Coltrim(sTdGrpCustMsg.sBak4               );
    Coltrim(sTdGrpCustMsg.sBak5               );

	strcpy(v_table_name,"DGRPCUSTMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"cust_id",ORDERDATAFORMAT_NUMBER,i_cust_id);

	OrderSetDataItem(&vMsgBodyType,"cust_id"             , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sCustId             );
	OrderSetDataItem(&vMsgBodyType,"party_id"            , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sPartyId            );
	OrderSetDataItem(&vMsgBodyType,"unit_id"             , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sUnitId             );
	OrderSetDataItem(&vMsgBodyType,"cust_name"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sCustName           );
	OrderSetDataItem(&vMsgBodyType,"trade_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTradeCode          );
	OrderSetDataItem(&vMsgBodyType,"bank_name"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBankName           );
	OrderSetDataItem(&vMsgBodyType,"bank_accounts_code"  , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBankAccountsCode   );
	OrderSetDataItem(&vMsgBodyType,"unit_addr"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitAddr           );
	OrderSetDataItem(&vMsgBodyType,"unit_zip"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitZip            );
	OrderSetDataItem(&vMsgBodyType,"contact_person"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactPerson      );
	OrderSetDataItem(&vMsgBodyType,"contact_phone"       , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactPhone       );
	OrderSetDataItem(&vMsgBodyType,"contact_mobile_phone", ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sContactMobilePhone );
	OrderSetDataItem(&vMsgBodyType,"fax"                 , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sFax                );
	OrderSetDataItem(&vMsgBodyType,"web"                 , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sWeb                );
	OrderSetDataItem(&vMsgBodyType,"unit_leader"         , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitLeader         );
	OrderSetDataItem(&vMsgBodyType,"run_area"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sRunArea            );
	OrderSetDataItem(&vMsgBodyType,"enrol_fee"           , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sEnrolFee           );
	OrderSetDataItem(&vMsgBodyType,"year_turnover"       , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sYearTurnover       );
	OrderSetDataItem(&vMsgBodyType,"year_gain"           , ORDERDATAFORMAT_NUMBER, sTdGrpCustMsg.sYearGain           );
	OrderSetDataItem(&vMsgBodyType,"top_repre_name"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTopRepreName       );
	OrderSetDataItem(&vMsgBodyType,"top_repre_phone"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sTopReprePhone      );
	OrderSetDataItem(&vMsgBodyType,"unit_create_day"     , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sUnitCreateDay      );
	OrderSetDataItem(&vMsgBodyType,"license_number"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sLicenseNumber      );
	OrderSetDataItem(&vMsgBodyType,"institution_type"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sInstitutionType    );
	OrderSetDataItem(&vMsgBodyType,"license_validate"    , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sLicenseValidate    );
	OrderSetDataItem(&vMsgBodyType,"ent_type"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sEntType            );
	OrderSetDataItem(&vMsgBodyType,"vpmn_flag"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sVpmnFlag           );
	OrderSetDataItem(&vMsgBodyType,"status_code"         , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sStatusCode         );
	OrderSetDataItem(&vMsgBodyType,"area_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sAreaType           );
	OrderSetDataItem(&vMsgBodyType,"province_code"       , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sProvinceCode       );
	OrderSetDataItem(&vMsgBodyType,"local_net"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sLocalNet           );
	OrderSetDataItem(&vMsgBodyType,"area_code"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sAreaCode           );
	OrderSetDataItem(&vMsgBodyType,"owner_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOwnerCode          );
	OrderSetDataItem(&vMsgBodyType,"valid_flag"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sValidFlag          );
	OrderSetDataItem(&vMsgBodyType,"create_login"        , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sCreateLogin        );
	OrderSetDataItem(&vMsgBodyType,"create_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sCreateDate         );
	OrderSetDataItem(&vMsgBodyType,"leave_date"          , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sLeaveDate          );
	OrderSetDataItem(&vMsgBodyType,"revoke_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sRevokeDate         );
	OrderSetDataItem(&vMsgBodyType,"jion_date"           , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sJionDate           );
	OrderSetDataItem(&vMsgBodyType,"group_id"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sGroupId            );
	OrderSetDataItem(&vMsgBodyType,"service_no"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sServiceNo          );
	OrderSetDataItem(&vMsgBodyType,"pay_type"            , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sPayType            );
	OrderSetDataItem(&vMsgBodyType,"come_channel_code"   , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sComeChannelCode    );
	OrderSetDataItem(&vMsgBodyType,"service_channel"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sServiceChannel     );
	OrderSetDataItem(&vMsgBodyType,"enter_pro"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sEnterPro           );
	OrderSetDataItem(&vMsgBodyType,"information_flag"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sInformationFlag    );
	OrderSetDataItem(&vMsgBodyType,"nation_unit_code"    , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sNationUnitCode     );
	OrderSetDataItem(&vMsgBodyType,"uni_pay_no"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUniPayNo           );
	OrderSetDataItem(&vMsgBodyType,"photo_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sPhotoCode          );
	OrderSetDataItem(&vMsgBodyType,"unit_photo"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUnitPhoto          );
	OrderSetDataItem(&vMsgBodyType,"boss_privilege"      , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBossPrivilege      );
	OrderSetDataItem(&vMsgBodyType,"grade_code"          , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sGradeCode          );
	OrderSetDataItem(&vMsgBodyType,"note"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sNote               );
	OrderSetDataItem(&vMsgBodyType,"update_login_no"     , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sUpdateLoginNo      );
	OrderSetDataItem(&vMsgBodyType,"update_date"         , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sUpdateDate         );
	OrderSetDataItem(&vMsgBodyType,"oprt_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOprtType           );
	OrderSetDataItem(&vMsgBodyType,"oper_type"           , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sOperType           );
	OrderSetDataItem(&vMsgBodyType,"oper_date"           , ORDERDATAFORMAT_DATE  , sTdGrpCustMsg.sOperDate           );
	OrderSetDataItem(&vMsgBodyType,"bak1"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak1               );
	OrderSetDataItem(&vMsgBodyType,"bak2"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak2               );
	OrderSetDataItem(&vMsgBodyType,"bak3"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak3               );
	OrderSetDataItem(&vMsgBodyType,"bak4"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak4               );
	OrderSetDataItem(&vMsgBodyType,"bak5"                , ORDERDATAFORMAT_STRING, sTdGrpCustMsg.sBak5               );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertDIAGWSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTDIAGWSERVOPER
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWSERVOPER	sTDIAGWSERVOPER;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTDIAGWSERVOPER.sServCode );
	Coltrim(sTDIAGWSERVOPER.sOperCode );
	Coltrim(sTDIAGWSERVOPER.sMsisdn   );
	Coltrim(sTDIAGWSERVOPER.sFee      );
	Coltrim(sTDIAGWSERVOPER.sStartTime);
	Coltrim(sTDIAGWSERVOPER.sEndTime  );
	Coltrim(sTDIAGWSERVOPER.sBillType );
	Coltrim(sTDIAGWSERVOPER.sFeeObject);

	EXEC SQL INSERT INTO DIAGWSERVOPER(SERV_CODE, OPER_CODE, MSISDN, FEE, START_TIME, END_TIME, BILL_TYPE, FEE_OBJECT)
		     VALUES(:sTDIAGWSERVOPER.sServCode,
                    :sTDIAGWSERVOPER.sOperCode,
                    :sTDIAGWSERVOPER.sMsisdn,
                    to_number(:sTDIAGWSERVOPER.sFee),
                    to_date(:sTDIAGWSERVOPER.sStartTime,'yyyymmdd hh24:mi:ss'),
                    to_date(:sTDIAGWSERVOPER.sEndTime,'yyyymmdd hh24:mi:ss'),
                    nvl(:sTDIAGWSERVOPER.sBillType,'00'),
                    nvl(:sTDIAGWSERVOPER.sFeeObject,'0'));

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DIAGWSERVOPER");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "SERV_CODE" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sServCode );
	OrderSetDataItem(&vMsgBodyType, "OPER_CODE" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sOperCode );
	OrderSetDataItem(&vMsgBodyType, "MSISDN"   , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sMsisdn   );
	OrderSetDataItem(&vMsgBodyType, "FEE"      , ORDERDATAFORMAT_NUMBER, sTDIAGWSERVOPER.sFee      );
	OrderSetDataItem(&vMsgBodyType, "START_TIME", ORDERDATAFORMAT_DATE,   sTDIAGWSERVOPER.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "END_TIME"  , ORDERDATAFORMAT_DATE,   sTDIAGWSERVOPER.sEndTime  );
	OrderSetDataItem(&vMsgBodyType, "BILL_TYPE" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sBillType );
	OrderSetDataItem(&vMsgBodyType, "FEE_OBJECT", ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sFeeObject);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteDIAGWSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWSERVOPERIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE DIAGWSERVOPER a WHERE a.SERV_CODE=rpad(:NG_Param0,21,' ') and a.OPER_CODE=rpad(:NG_Param1,10,' ') and a.MSISDN=rpad(:NG_Param2,13,' ') \
	                    and a.FEE=to_number(:NG_Param3) and START_TIME = to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DIAGWSERVOPER");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "SERV_CODE" , ORDERDATAFORMAT_STRING, oldIndex.sServCode );
	OrderSetPrimaryKey(&vMsgBodyType, "OPER_CODE" , ORDERDATAFORMAT_STRING, oldIndex.sOperCode );
	OrderSetPrimaryKey(&vMsgBodyType, "MSISDN"   , ORDERDATAFORMAT_STRING, oldIndex.sMsisdn   );
	OrderSetPrimaryKey(&vMsgBodyType, "FEE"      , ORDERDATAFORMAT_NUMBER, oldIndex.sFee      );
	OrderSetPrimaryKey(&vMsgBodyType, "START_TIME", ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateDIAGWSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWSERVOPERIndex oldIndex;
TDIAGWSERVOPERIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TDIAGWSERVOPER	sTDIAGWSERVOPER;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE DIAGWSERVOPER a SET %s WHERE a.SERV_CODE=rpad(:NG_Param0,21,' ') and a.OPER_CODE=rpad(:NG_Param1,10,' ') and a.MSISDN=rpad(:NG_Param2,13,' ') \
	                    and a.FEE=to_number(:NG_Param3) and START_TIME = to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT serv_code, oper_code, msisdn, to_char(fee), to_char(start_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'), bill_type, fee_object
			   INTO :sTDIAGWSERVOPER.sServCode  ,
                    :sTDIAGWSERVOPER.sOperCode  ,
                    :sTDIAGWSERVOPER.sMsisdn    ,
                    :sTDIAGWSERVOPER.sFee       ,
                    :sTDIAGWSERVOPER.sStartTime ,
                    :sTDIAGWSERVOPER.sEndTime   ,
                    :sTDIAGWSERVOPER.sBillType  ,
                    :sTDIAGWSERVOPER.sFeeObject
			   FROM DIAGWSERVOPER
			  WHERE serv_code=:newIndex.sServCode
			  	and oper_code=:newIndex.sOperCode
			  	and msisdn=:newIndex.sMsisdn
			  	and fee=to_number(:newIndex.sFee)
			  	and start_time=to_date(:newIndex.sStartTime,'yyyymmdd hh24:mi:ss');

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTDIAGWSERVOPER.sServCode );
	Coltrim(sTDIAGWSERVOPER.sOperCode );
	Coltrim(sTDIAGWSERVOPER.sMsisdn   );
	Coltrim(sTDIAGWSERVOPER.sFee      );
	Coltrim(sTDIAGWSERVOPER.sStartTime);
	Coltrim(sTDIAGWSERVOPER.sEndTime  );
	Coltrim(sTDIAGWSERVOPER.sBillType );
	Coltrim(sTDIAGWSERVOPER.sFeeObject);


	strcpy(v_table_name,"DIAGWSERVOPER");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "serv_code" , ORDERDATAFORMAT_STRING, oldIndex.sServCode );
	OrderSetPrimaryKey(&vMsgBodyType, "oper_code" , ORDERDATAFORMAT_STRING, oldIndex.sOperCode );
	OrderSetPrimaryKey(&vMsgBodyType, "msisdn"   ,  ORDERDATAFORMAT_STRING, oldIndex.sMsisdn   );
	OrderSetPrimaryKey(&vMsgBodyType, "fee"      ,  ORDERDATAFORMAT_NUMBER, oldIndex.sFee      );
	OrderSetPrimaryKey(&vMsgBodyType, "start_time", ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	OrderSetDataItem(&vMsgBodyType, "serv_code" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sServCode );
	OrderSetDataItem(&vMsgBodyType, "oper_code" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sOperCode );
	OrderSetDataItem(&vMsgBodyType, "msisdn"   ,  ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sMsisdn   );
	OrderSetDataItem(&vMsgBodyType, "fee"      ,  ORDERDATAFORMAT_NUMBER, sTDIAGWSERVOPER.sFee      );
	OrderSetDataItem(&vMsgBodyType, "start_time", ORDERDATAFORMAT_DATE,   sTDIAGWSERVOPER.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time"  , ORDERDATAFORMAT_DATE,   sTDIAGWSERVOPER.sEndTime  );
	OrderSetDataItem(&vMsgBodyType, "bill_type" , ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sBillType );
	OrderSetDataItem(&vMsgBodyType, "fee_object", ORDERDATAFORMAT_STRING, sTDIAGWSERVOPER.sFeeObject);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertDIAGWMOSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTDIAGWMOSERVOPER
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWMOSERVOPER	sTDIAGWMOSERVOPER;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTDIAGWMOSERVOPER.sServCode );
	Coltrim(sTDIAGWMOSERVOPER.sOperCode );
	Coltrim(sTDIAGWMOSERVOPER.sFee      );
	Coltrim(sTDIAGWMOSERVOPER.sStartTime);
	Coltrim(sTDIAGWMOSERVOPER.sEndTime  );
	Coltrim(sTDIAGWMOSERVOPER.sFeeFlag  );

	EXEC SQL INSERT INTO DIAGWMOSERVOPER(SERV_CODE, OPER_CODE, FEE, START_TIME, END_TIME, FEE_FLAG)
		     VALUES(:sTDIAGWMOSERVOPER.sServCode,
                    :sTDIAGWMOSERVOPER.sOperCode,
                    to_number(:sTDIAGWMOSERVOPER.sFee),
                    to_date(:sTDIAGWMOSERVOPER.sStartTime,'yyyymmdd hh24:mi:ss'),
                    to_date(:sTDIAGWMOSERVOPER.sEndTime,'yyyymmdd hh24:mi:ss'),
                    :sTDIAGWMOSERVOPER.sFeeFlag);

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"TDIAGWMOSERVOPER");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "serv_code" , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sServCode );
	OrderSetDataItem(&vMsgBodyType, "oper_code" , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sOperCode );
	OrderSetDataItem(&vMsgBodyType, "fee"       , ORDERDATAFORMAT_NUMBER, sTDIAGWMOSERVOPER.sFee      );
	OrderSetDataItem(&vMsgBodyType, "start_time", ORDERDATAFORMAT_DATE,   sTDIAGWMOSERVOPER.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time"  , ORDERDATAFORMAT_DATE,   sTDIAGWMOSERVOPER.sEndTime  );
	OrderSetDataItem(&vMsgBodyType, "fee_flag"  , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sFeeFlag  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteDIAGWMOSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWMOSERVOPERIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE DIAGWMOSERVOPER a WHERE a.SERV_CODE=rpad(:NG_Param0,21,' ') and a.OPER_CODE=rpad(:NG_Param1,10,' ') and START_TIME = to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DIAGWMOSERVOPER");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "SERV_CODE" , ORDERDATAFORMAT_STRING, oldIndex.sServCode );
	OrderSetPrimaryKey(&vMsgBodyType, "OPER_CODE" , ORDERDATAFORMAT_STRING, oldIndex.sOperCode );
	OrderSetPrimaryKey(&vMsgBodyType, "START_TIME", ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateDIAGWMOSERVOPER(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDIAGWMOSERVOPERIndex oldIndex;
TDIAGWMOSERVOPERIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TDIAGWMOSERVOPER	sTDIAGWMOSERVOPER;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE DIAGWMOSERVOPER a SET %s WHERE a.SERV_CODE=rpad(:NG_Param0,21,' ') and a.OPER_CODE=rpad(:NG_Param1,10,' ') and START_TIME = to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT serv_code, oper_code, to_char(fee), to_char(start_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss'), fee_flag
			   INTO :sTDIAGWMOSERVOPER.sServCode ,
                    :sTDIAGWMOSERVOPER.sOperCode ,
                    :sTDIAGWMOSERVOPER.sFee      ,
                    :sTDIAGWMOSERVOPER.sStartTime,
                    :sTDIAGWMOSERVOPER.sEndTime  ,
                    :sTDIAGWMOSERVOPER.sFeeFlag
			   FROM DIAGWMOSERVOPER
			  WHERE serv_code=:newIndex.sServCode
			  	and oper_code=:newIndex.sOperCode
			  	and start_time=to_date(:newIndex.sStartTime,'yyyymmdd hh24:mi:ss');

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTDIAGWMOSERVOPER.sServCode );
	Coltrim(sTDIAGWMOSERVOPER.sOperCode );
	Coltrim(sTDIAGWMOSERVOPER.sFee      );
	Coltrim(sTDIAGWMOSERVOPER.sStartTime);
	Coltrim(sTDIAGWMOSERVOPER.sEndTime  );
	Coltrim(sTDIAGWMOSERVOPER.sFeeFlag  );


	strcpy(v_table_name,"DIAGWMOSERVOPER");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "serv_code" , ORDERDATAFORMAT_STRING, oldIndex.sServCode );
	OrderSetPrimaryKey(&vMsgBodyType, "oper_code" , ORDERDATAFORMAT_STRING, oldIndex.sOperCode );
	OrderSetPrimaryKey(&vMsgBodyType, "start_time", ORDERDATAFORMAT_DATE,   oldIndex.sStartTime);

	OrderSetDataItem(&vMsgBodyType, "serv_code" , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sServCode );
	OrderSetDataItem(&vMsgBodyType, "oper_code" , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sOperCode );
	OrderSetDataItem(&vMsgBodyType, "fee"       , ORDERDATAFORMAT_NUMBER, sTDIAGWMOSERVOPER.sFee      );
	OrderSetDataItem(&vMsgBodyType, "start_time", ORDERDATAFORMAT_DATE,   sTDIAGWMOSERVOPER.sStartTime);
	OrderSetDataItem(&vMsgBodyType, "end_time"  , ORDERDATAFORMAT_DATE,   sTDIAGWMOSERVOPER.sEndTime  );
	OrderSetDataItem(&vMsgBodyType, "fee_flag"  , ORDERDATAFORMAT_STRING, sTDIAGWMOSERVOPER.sFeeFlag  );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertLineSwitch(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdLineSwitch
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdLineSwitch	sTdLineSwitch;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdLineSwitch.sSwitchNo     );
	Coltrim(sTdLineSwitch.sRepeatersNo  );
	Coltrim(sTdLineSwitch.sLongCode     );
	Coltrim(sTdLineSwitch.sFlag         );
	Coltrim(sTdLineSwitch.sUserId       );
	Coltrim(sTdLineSwitch.sFeeCode      );
	Coltrim(sTdLineSwitch.sCfeeDiscount );
	Coltrim(sTdLineSwitch.sLfeeDiscount );
	Coltrim(sTdLineSwitch.sStartDatetime);
	Coltrim(sTdLineSwitch.sEndDatetime  );

	EXEC SQL INSERT INTO dLineSwitch(SWITCH_NO, REPEATERS_NO, LONG_CODE, FLAG, USER_ID, FEE_CODE, CFEE_DISCOUNT, LFEE_DISCOUNT, START_DATETIME, END_DATETIME)
		     VALUES(:sTdLineSwitch.sSwitchNo     ,
                    :sTdLineSwitch.sRepeatersNo  ,
                    :sTdLineSwitch.sLongCode     ,
                    :sTdLineSwitch.sFlag         ,
                    :sTdLineSwitch.sUserId       ,
                    :sTdLineSwitch.sFeeCode      ,
                    to_number(:sTdLineSwitch.sCfeeDiscount) ,
                    to_number(:sTdLineSwitch.sLfeeDiscount) ,
                    to_date(:sTdLineSwitch.sStartDatetime,'yyyymmdd hh24:mi:ss'),
                    to_date(:sTdLineSwitch.sEndDatetime,'yyyymmdd hh24:mi:ss'));

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DLINESWITCH");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "switch_no"     , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sSwitchNo     );
	OrderSetDataItem(&vMsgBodyType, "repeaters_no"  , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sRepeatersNo  );
	OrderSetDataItem(&vMsgBodyType, "long_code"     , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sLongCode     );
	OrderSetDataItem(&vMsgBodyType, "flag"          , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sFlag         );
	OrderSetDataItem(&vMsgBodyType, "user_id"       , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sUserId       );
	OrderSetDataItem(&vMsgBodyType, "fee_code"      , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sFeeCode      );
	OrderSetDataItem(&vMsgBodyType, "cfee_discount" , ORDERDATAFORMAT_NUMBER,	sTdLineSwitch.sCfeeDiscount );
	OrderSetDataItem(&vMsgBodyType, "lfee_discount" , ORDERDATAFORMAT_NUMBER,	sTdLineSwitch.sLfeeDiscount );
	OrderSetDataItem(&vMsgBodyType, "start_datetime", ORDERDATAFORMAT_DATE,		sTdLineSwitch.sStartDatetime);
	OrderSetDataItem(&vMsgBodyType, "end_datetime"  , ORDERDATAFORMAT_DATE,		sTdLineSwitch.sEndDatetime  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteLineSwitch(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdLineSwitchIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dLineSwitch a WHERE a.switch_no=rpad(:NG_Param0,10,' ') and a.repeaters_no=rpad(:NG_Param1,16,' ') \
	                    and user_id=rpad(:NG_Param2,11,' ') and start_datetime = to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DLINESWITCH");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "switch_no"     , ORDERDATAFORMAT_STRING,	oldIndex.sSwitchNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "repeaters_no"  , ORDERDATAFORMAT_STRING,	oldIndex.sRepeatersNo  );
	OrderSetPrimaryKey(&vMsgBodyType, "user_id"       , ORDERDATAFORMAT_STRING,	oldIndex.sUserId       );
	OrderSetPrimaryKey(&vMsgBodyType, "start_datetime", ORDERDATAFORMAT_DATE,		oldIndex.sStartDatetime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateLineSwitch(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdLineSwitchIndex oldIndex;
TdLineSwitchIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdLineSwitch	sTdLineSwitch;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dLineSwitch a SET %s WHERE a.switch_no=rpad(:NG_Param0,10,' ') and a.repeaters_no=rpad(:NG_Param1,16,' ') \
	                    and user_id=rpad(:NG_Param2,11,' ') and start_datetime = to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ",i_update_sql,i_where_sql);
	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);

	if (v_ret<0)
	{
		printf("SQLCODE=%d,SQLERRMSG=%s\n",SQLCODE,SQLERRMSG);
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT switch_no, repeaters_no, long_code, flag, user_id, fee_code,
	                to_char(cfee_discount), to_char(lfee_discount),
	                to_char(start_datetime,'yyyymmdd hh24:mi:ss'),
	                to_char(end_datetime,'yyyymmdd hh24:mi:ss')
			   INTO :sTdLineSwitch.sSwitchNo     ,
                    :sTdLineSwitch.sRepeatersNo  ,
                    :sTdLineSwitch.sLongCode     ,
                    :sTdLineSwitch.sFlag         ,
                    :sTdLineSwitch.sUserId       ,
                    :sTdLineSwitch.sFeeCode      ,
                    :sTdLineSwitch.sCfeeDiscount ,
                    :sTdLineSwitch.sLfeeDiscount ,
                    :sTdLineSwitch.sStartDatetime,
                    :sTdLineSwitch.sEndDatetime
			   FROM dLineSwitch
			  WHERE switch_no=:newIndex.sSwitchNo
			  	and repeaters_no=:newIndex.sRepeatersNo
			  	and user_id=:newIndex.sUserId
			  	and start_datetime=to_date(:newIndex.sStartDatetime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE!=SQLOK)
	{
		printf("SQLCODE=%d,SQLERRMSG=%s\n",SQLCODE,SQLERRMSG);
		return -500037;
	}

	Coltrim(sTdLineSwitch.sSwitchNo     );
	Coltrim(sTdLineSwitch.sRepeatersNo  );
	Coltrim(sTdLineSwitch.sLongCode     );
	Coltrim(sTdLineSwitch.sFlag         );
	Coltrim(sTdLineSwitch.sUserId       );
	Coltrim(sTdLineSwitch.sFeeCode      );
	Coltrim(sTdLineSwitch.sCfeeDiscount );
	Coltrim(sTdLineSwitch.sLfeeDiscount );
	Coltrim(sTdLineSwitch.sStartDatetime);
	Coltrim(sTdLineSwitch.sEndDatetime  );


	strcpy(v_table_name,"DLINESWITCH");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "switch_no"     , ORDERDATAFORMAT_STRING,	oldIndex.sSwitchNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "repeaters_no"  , ORDERDATAFORMAT_STRING,	oldIndex.sRepeatersNo  );
	OrderSetPrimaryKey(&vMsgBodyType, "user_id"       , ORDERDATAFORMAT_STRING,	oldIndex.sUserId       );
	OrderSetPrimaryKey(&vMsgBodyType, "start_datetime", ORDERDATAFORMAT_DATE,		oldIndex.sStartDatetime);

	OrderSetDataItem(&vMsgBodyType, "switch_no"     , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sSwitchNo     );
	OrderSetDataItem(&vMsgBodyType, "repeaters_no"  , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sRepeatersNo  );
	OrderSetDataItem(&vMsgBodyType, "long_code"     , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sLongCode     );
	OrderSetDataItem(&vMsgBodyType, "flag"          , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sFlag         );
	OrderSetDataItem(&vMsgBodyType, "user_id"       , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sUserId       );
	OrderSetDataItem(&vMsgBodyType, "fee_code"      , ORDERDATAFORMAT_STRING,	sTdLineSwitch.sFeeCode      );
	OrderSetDataItem(&vMsgBodyType, "cfee_discount" , ORDERDATAFORMAT_NUMBER,	sTdLineSwitch.sCfeeDiscount );
	OrderSetDataItem(&vMsgBodyType, "lfee_discount" , ORDERDATAFORMAT_NUMBER,	sTdLineSwitch.sLfeeDiscount );
	OrderSetDataItem(&vMsgBodyType, "start_datetime", ORDERDATAFORMAT_DATE,		sTdLineSwitch.sStartDatetime);
	OrderSetDataItem(&vMsgBodyType, "end_datetime"  , ORDERDATAFORMAT_DATE,		sTdLineSwitch.sEndDatetime  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);
	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}
	return 0;

}

int OrderInsertWPhoneImsi(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTwPhoneImsi
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwPhoneImsi	sTwPhoneImsi;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwPhoneImsi.sIdCode   );
	Coltrim(sTwPhoneImsi.sPhoneNo  );
	Coltrim(sTwPhoneImsi.sImsiNo   );
	Coltrim(sTwPhoneImsi.sBeginTime);
	Coltrim(sTwPhoneImsi.sEndTime  );

	EXEC SQL INSERT INTO wPhoneImsi
	                    (id_code, phone_no, imsi_no, begin_time, end_time)
		     VALUES(
		            to_number(:sTwPhoneImsi.sIdCode)    ,
                    :sTwPhoneImsi.sPhoneNo   ,
                    :sTwPhoneImsi.sImsiNo    ,
                    to_date(:sTwPhoneImsi.sBeginTime,'yyyymmdd hh24:mi:ss') ,
                    to_date(:sTwPhoneImsi.sEndTime,'yyyymmdd hh24:mi:ss')
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"WPHONEIMSI");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_code"    ,ORDERDATAFORMAT_NUMBER, sTwPhoneImsi.sIdCode    );
	OrderSetDataItem(&vMsgBodyType,"phone_no"   ,ORDERDATAFORMAT_STRING, sTwPhoneImsi.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType,"imsi_no"    ,ORDERDATAFORMAT_STRING, sTwPhoneImsi.sImsiNo    );
	OrderSetDataItem(&vMsgBodyType,"begin_time" ,ORDERDATAFORMAT_DATE,   sTwPhoneImsi.sBeginTime );
	OrderSetDataItem(&vMsgBodyType,"end_time"   ,ORDERDATAFORMAT_DATE,   sTwPhoneImsi.sEndTime   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteWPhoneImsi(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_imsi_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_imsi_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE wPhoneImsi a WHERE a.imsi_no=rpad(:NG_Param0,20,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"WPHONEIMSI");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"imsi_no",ORDERDATAFORMAT_STRING,i_imsi_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

/*为删除wPhoneImsi而不记小表的特殊情况使用*/
int OrderDeleteOtherWPhoneImsi(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_imsi_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_imsi_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE wPhoneImsi a WHERE a.imsi_no=rpad(:NG_Param0,20,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"WPHONEIMSI");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"imsi_no",ORDERDATAFORMAT_STRING,i_imsi_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_OTHER);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateWPhoneImsi(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_imsi_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_imsi_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TwPhoneImsi	sTwPhoneImsi;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE wPhoneImsi a SET %s WHERE a.imsi_no=rpad(:NG_Param0,20,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_code), phone_no, imsi_no,
	                to_char(begin_time,'yyyymmdd hh24:mi:ss'),
	                to_char(end_time,'yyyymmdd hh24:mi:ss')
			INTO :sTwPhoneImsi.sIdCode   ,
                 :sTwPhoneImsi.sPhoneNo  ,
                 :sTwPhoneImsi.sImsiNo   ,
                 :sTwPhoneImsi.sBeginTime,
                 :sTwPhoneImsi.sEndTime
			FROM wPhoneImsi
			WHERE imsi_no = :i_imsi_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTwPhoneImsi.sIdCode   );
	Coltrim(sTwPhoneImsi.sPhoneNo  );
	Coltrim(sTwPhoneImsi.sImsiNo   );
	Coltrim(sTwPhoneImsi.sBeginTime);
	Coltrim(sTwPhoneImsi.sEndTime  );

	strcpy(v_table_name,"WPHONEIMSI");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"imsi_no",     ORDERDATAFORMAT_NUMBER,i_imsi_no);

	OrderSetDataItem(&vMsgBodyType,"id_code"    ,ORDERDATAFORMAT_NUMBER, sTwPhoneImsi.sIdCode    );
	OrderSetDataItem(&vMsgBodyType,"phone_no"   ,ORDERDATAFORMAT_STRING, sTwPhoneImsi.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType,"imsi_no"    ,ORDERDATAFORMAT_STRING, sTwPhoneImsi.sImsiNo    );
	OrderSetDataItem(&vMsgBodyType,"begin_time" ,ORDERDATAFORMAT_DATE,   sTwPhoneImsi.sBeginTime );
	OrderSetDataItem(&vMsgBodyType,"end_time"   ,ORDERDATAFORMAT_DATE,   sTwPhoneImsi.sEndTime   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertGprsReduce(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGprsReduce
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGprsReduce	sTdGprsReduce;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGprsReduce.sPhoneNo   );
	Coltrim(sTdGprsReduce.sTotalMonth);
	Coltrim(sTdGprsReduce.sLoginNo   );
	Coltrim(sTdGprsReduce.sOpTime    );

	EXEC SQL INSERT INTO dGprsReduce(phone_no, total_month, login_no, op_time)
		     VALUES(:sTdGprsReduce.sPhoneNo   ,
                    to_number(:sTdGprsReduce.sTotalMonth),
                    :sTdGprsReduce.sLoginNo   ,
                    to_date(:sTdGprsReduce.sOpTime,'yyyymmdd hh24:mi:ss')
                   );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DGPRSREDUCE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING,	sTdGprsReduce.sPhoneNo     );
	OrderSetDataItem(&vMsgBodyType, "total_month"  , ORDERDATAFORMAT_NUMBER,	sTdGprsReduce.sTotalMonth  );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING,	sTdGprsReduce.sLoginNo     );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE,		sTdGprsReduce.sOpTime      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteGprsReduce(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGprsReduceIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGprsReduce a WHERE a.phone_no=rpad(:NG_Param0,15,' ') and a.total_month=to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DGPRSREDUCE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "phone_no"   , ORDERDATAFORMAT_STRING,	oldIndex.sPhoneNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "total_month", ORDERDATAFORMAT_NUMBER,	oldIndex.sTotalMonth  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateGprsReduce(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGprsReduceIndex oldIndex;
TdGprsReduceIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGprsReduce	sTdGprsReduce;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGprsReduce a SET %s WHERE a.phone_no=rpad(:NG_Param0,15,' ') and a.total_month=to_number(:NG_Param1) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT phone_no, to_char(total_month), login_no, to_char(op_time,'yyyymmdd hh24:mi:ss')
			   INTO :sTdGprsReduce.sPhoneNo   ,
                    :sTdGprsReduce.sTotalMonth,
                    :sTdGprsReduce.sLoginNo   ,
                    :sTdGprsReduce.sOpTime
			   FROM dGprsReduce
			  WHERE phone_no=:newIndex.sPhoneNo
			  	and total_month=to_number(:newIndex.sTotalMonth);

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGprsReduce.sPhoneNo   );
	Coltrim(sTdGprsReduce.sTotalMonth);
	Coltrim(sTdGprsReduce.sLoginNo   );
	Coltrim(sTdGprsReduce.sOpTime    );

	strcpy(v_table_name,"DGPRSREDUCE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "phone_no"   , ORDERDATAFORMAT_STRING,	oldIndex.sPhoneNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "total_month", ORDERDATAFORMAT_NUMBER,	oldIndex.sTotalMonth  );

	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING,	sTdGprsReduce.sPhoneNo     );
	OrderSetDataItem(&vMsgBodyType, "total_month"  , ORDERDATAFORMAT_NUMBER,	sTdGprsReduce.sTotalMonth  );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING,	sTdGprsReduce.sLoginNo     );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE,		sTdGprsReduce.sOpTime      );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertCardRes(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCardRes
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCardRes	sTdCardRes;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCardRes.sRegionCode  );
	Coltrim(sTdCardRes.sDistrictCode);
	Coltrim(sTdCardRes.sTownCode    );
	Coltrim(sTdCardRes.sCardStatus  );
	Coltrim(sTdCardRes.sCartType    );
	Coltrim(sTdCardRes.sKind        );
	Coltrim(sTdCardRes.sSellunit    );
	Coltrim(sTdCardRes.sInPrice     );
	Coltrim(sTdCardRes.sOutPrice    );
	Coltrim(sTdCardRes.sSellDate    );
	Coltrim(sTdCardRes.sLoginNo     );
	Coltrim(sTdCardRes.sOrgCode     );
	Coltrim(sTdCardRes.sLoginAccept );
	Coltrim(sTdCardRes.sTotalDate   );
	Coltrim(sTdCardRes.sOpTime      );
	Coltrim(sTdCardRes.sTollNo      );
	Coltrim(sTdCardRes.sEndNo       );
	Coltrim(sTdCardRes.sBeginNo     );
	Coltrim(sTdCardRes.sGroupId     );
	Coltrim(sTdCardRes.sOrgId     );

	EXEC SQL INSERT INTO dCardRes(region_code, district_code, town_code, card_status, cart_type,
	                              kind, sellunit, in_price, out_price, sell_date, login_no,
	                              org_code, login_accept, total_date, op_time, toll_no, end_no,
	                              begin_no, group_id, org_id)
		     VALUES(
		     		:sTdCardRes.sRegionCode    ,
                    :sTdCardRes.sDistrictCode  ,
                    :sTdCardRes.sTownCode      ,
                    :sTdCardRes.sCardStatus    ,
                    :sTdCardRes.sCartType      ,
                    :sTdCardRes.sKind          ,
                    :sTdCardRes.sSellunit      ,
                    to_number(:sTdCardRes.sInPrice )      ,
                    to_number(:sTdCardRes.sOutPrice)      ,
                    :sTdCardRes.sSellDate      ,
                    :sTdCardRes.sLoginNo       ,
                    :sTdCardRes.sOrgCode       ,
                    to_number(:sTdCardRes.sLoginAccept)   ,
                    to_number(:sTdCardRes.sTotalDate  )   ,
                    to_date(:sTdCardRes.sOpTime,'yyyymmdd hh24:mi:ss') ,
                    :sTdCardRes.sTollNo        ,
                    :sTdCardRes.sEndNo         ,
                    :sTdCardRes.sBeginNo       ,
                    :sTdCardRes.sGroupId       ,
                    :sTdCardRes.sOrgId
                   );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCARDRES");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "region_code"  , ORDERDATAFORMAT_STRING,	sTdCardRes.sRegionCode     );
	OrderSetDataItem(&vMsgBodyType, "district_code", ORDERDATAFORMAT_STRING,	sTdCardRes.sDistrictCode   );
	OrderSetDataItem(&vMsgBodyType, "town_code"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sTownCode       );
	OrderSetDataItem(&vMsgBodyType, "card_status"  , ORDERDATAFORMAT_STRING,	sTdCardRes.sCardStatus     );
	OrderSetDataItem(&vMsgBodyType, "cart_type"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sCartType       );
	OrderSetDataItem(&vMsgBodyType, "kind"         , ORDERDATAFORMAT_STRING,	sTdCardRes.sKind           );
	OrderSetDataItem(&vMsgBodyType, "sellunit"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sSellunit       );
	OrderSetDataItem(&vMsgBodyType, "in_price"     , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sInPrice        );
	OrderSetDataItem(&vMsgBodyType, "out_price"    , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sOutPrice       );
	OrderSetDataItem(&vMsgBodyType, "sell_date"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sSellDate       );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sLoginNo        );
	OrderSetDataItem(&vMsgBodyType, "org_code"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sOrgCode        );
	OrderSetDataItem(&vMsgBodyType, "login_accept" , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sLoginAccept    );
	OrderSetDataItem(&vMsgBodyType, "total_date"   , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sTotalDate      );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE  ,	sTdCardRes.sOpTime         );
	OrderSetDataItem(&vMsgBodyType, "toll_no"      , ORDERDATAFORMAT_STRING,	sTdCardRes.sTollNo         );
	OrderSetDataItem(&vMsgBodyType, "end_no"       , ORDERDATAFORMAT_STRING,	sTdCardRes.sEndNo          );
	OrderSetDataItem(&vMsgBodyType, "begin_no"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sBeginNo        );
	OrderSetDataItem(&vMsgBodyType, "group_id"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sGroupId        );
	OrderSetDataItem(&vMsgBodyType, "org_id"       , ORDERDATAFORMAT_STRING,	sTdCardRes.sOrgId          );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCardRes(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCardResIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dCardRes a WHERE a.region_code=rpad(:NG_Param0,2,' ') and a.cart_type=rpad(:NG_Param1,2,' ') \
	                    and a.begin_no=:NG_Param2 and a.end_no=:NG_Param3 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCARDRES");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "region_code", ORDERDATAFORMAT_STRING,	oldIndex.sRegionCode     );
	OrderSetPrimaryKey(&vMsgBodyType, "cart_type",   ORDERDATAFORMAT_STRING,	oldIndex.sCartType  );
	OrderSetPrimaryKey(&vMsgBodyType, "begin_no"   , ORDERDATAFORMAT_STRING,	oldIndex.sBeginNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "end_no",      ORDERDATAFORMAT_STRING,	oldIndex.sEndNo  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCardRes(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCardResIndex oldIndex;
TdCardResIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCardRes	sTdCardRes;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dCardRes a SET %s WHERE a.region_code=rpad(:NG_Param0,2,' ') and a.cart_type=rpad(:NG_Param1,2,' ') \
	                    and a.begin_no=:NG_Param2 and a.end_no=:NG_Param3 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT region_code, district_code, town_code, card_status, cart_type,
	                nvl(kind,chr(0)), nvl(sellunit,chr(0)), nvl(to_char(in_price),chr(0)), nvl(to_char(out_price),chr(0)), nvl(sell_date,chr(0)), login_no,
	                org_code, to_char(login_accept), to_char(total_date), to_char(op_time,'yyyymmdd hh24:mi:ss'),
	                toll_no, end_no, begin_no, nvl(group_id,chr(0)), nvl(org_id,chr(0))
			   INTO :sTdCardRes.sRegionCode   ,
                    :sTdCardRes.sDistrictCode ,
                    :sTdCardRes.sTownCode     ,
                    :sTdCardRes.sCardStatus   ,
                    :sTdCardRes.sCartType     ,
                    :sTdCardRes.sKind         ,
                    :sTdCardRes.sSellunit     ,
                    :sTdCardRes.sInPrice      ,
                    :sTdCardRes.sOutPrice     ,
                    :sTdCardRes.sSellDate     ,
                    :sTdCardRes.sLoginNo      ,
                    :sTdCardRes.sOrgCode      ,
                    :sTdCardRes.sLoginAccept  ,
                    :sTdCardRes.sTotalDate    ,
                    :sTdCardRes.sOpTime       ,
                    :sTdCardRes.sTollNo       ,
                    :sTdCardRes.sEndNo        ,
                    :sTdCardRes.sBeginNo      ,
                    :sTdCardRes.sGroupId      ,
                    :sTdCardRes.sOrgId
			   FROM dCardRes
			  WHERE region_code=:newIndex.sRegionCode
			  	and cart_type=:newIndex.sCartType
			  	and begin_no=:newIndex.sBeginNo
			  	and end_no=:newIndex.sEndNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCardRes.sRegionCode   );
	Coltrim(sTdCardRes.sDistrictCode );
	Coltrim(sTdCardRes.sTownCode     );
	Coltrim(sTdCardRes.sCardStatus   );
	Coltrim(sTdCardRes.sCartType     );
	Coltrim(sTdCardRes.sKind         );
	Coltrim(sTdCardRes.sSellunit     );
	Coltrim(sTdCardRes.sInPrice      );
	Coltrim(sTdCardRes.sOutPrice     );
	Coltrim(sTdCardRes.sSellDate     );
	Coltrim(sTdCardRes.sLoginNo      );
	Coltrim(sTdCardRes.sOrgCode      );
	Coltrim(sTdCardRes.sLoginAccept  );
	Coltrim(sTdCardRes.sTotalDate    );
	Coltrim(sTdCardRes.sOpTime       );
	Coltrim(sTdCardRes.sTollNo       );
	Coltrim(sTdCardRes.sEndNo        );
	Coltrim(sTdCardRes.sBeginNo      );
	Coltrim(sTdCardRes.sGroupId      );
	Coltrim(sTdCardRes.sOrgId        );

	strcpy(v_table_name,"DCARDRES");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "region_code", ORDERDATAFORMAT_STRING,	oldIndex.sRegionCode     );
	OrderSetPrimaryKey(&vMsgBodyType, "cart_type",   ORDERDATAFORMAT_STRING,	oldIndex.sCartType  );
	OrderSetPrimaryKey(&vMsgBodyType, "begin_no"   , ORDERDATAFORMAT_STRING,	oldIndex.sBeginNo     );
	OrderSetPrimaryKey(&vMsgBodyType, "end_no",      ORDERDATAFORMAT_STRING,	oldIndex.sEndNo  );

	OrderSetDataItem(&vMsgBodyType, "region_code"  , ORDERDATAFORMAT_STRING,	sTdCardRes.sRegionCode     );
	OrderSetDataItem(&vMsgBodyType, "district_code", ORDERDATAFORMAT_STRING,	sTdCardRes.sDistrictCode   );
	OrderSetDataItem(&vMsgBodyType, "town_code"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sTownCode       );
	OrderSetDataItem(&vMsgBodyType, "card_status"  , ORDERDATAFORMAT_STRING,	sTdCardRes.sCardStatus     );
	OrderSetDataItem(&vMsgBodyType, "cart_type"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sCartType       );
	OrderSetDataItem(&vMsgBodyType, "kind"         , ORDERDATAFORMAT_STRING,	sTdCardRes.sKind           );
	OrderSetDataItem(&vMsgBodyType, "sellunit"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sSellunit       );
	OrderSetDataItem(&vMsgBodyType, "in_price"     , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sInPrice        );
	OrderSetDataItem(&vMsgBodyType, "out_price"    , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sOutPrice       );
	OrderSetDataItem(&vMsgBodyType, "sell_date"    , ORDERDATAFORMAT_STRING,	sTdCardRes.sSellDate       );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sLoginNo        );
	OrderSetDataItem(&vMsgBodyType, "org_code"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sOrgCode        );
	OrderSetDataItem(&vMsgBodyType, "login_accept" , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sLoginAccept    );
	OrderSetDataItem(&vMsgBodyType, "total_date"   , ORDERDATAFORMAT_NUMBER,	sTdCardRes.sTotalDate      );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE  ,	sTdCardRes.sOpTime         );
	OrderSetDataItem(&vMsgBodyType, "toll_no"      , ORDERDATAFORMAT_STRING,	sTdCardRes.sTollNo         );
	OrderSetDataItem(&vMsgBodyType, "end_no"       , ORDERDATAFORMAT_STRING,	sTdCardRes.sEndNo          );
	OrderSetDataItem(&vMsgBodyType, "begin_no"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sBeginNo        );
	OrderSetDataItem(&vMsgBodyType, "group_id"     , ORDERDATAFORMAT_STRING,	sTdCardRes.sGroupId        );
	OrderSetDataItem(&vMsgBodyType, "org_id"       , ORDERDATAFORMAT_STRING,	sTdCardRes.sOrgId          );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertRebackPoint(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTRebackPoint
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TRebackPoint	sTRebackPoint;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTRebackPoint.sOutputCode  );
	Coltrim(sTRebackPoint.sLongCode    );
	Coltrim(sTRebackPoint.sUserInfo    );
	Coltrim(sTRebackPoint.sRecType     );
	Coltrim(sTRebackPoint.sSegnum      );
	Coltrim(sTRebackPoint.sCdrType     );
	Coltrim(sTRebackPoint.sDepositType );
	Coltrim(sTRebackPoint.sChargeDn    );
	Coltrim(sTRebackPoint.sUserType    );
	Coltrim(sTRebackPoint.sUserAttr    );
	Coltrim(sTRebackPoint.sMsisdnRec   );
	Coltrim(sTRebackPoint.sOprType     );
	Coltrim(sTRebackPoint.sSrcType     );
	Coltrim(sTRebackPoint.sDevCode     );
	Coltrim(sTRebackPoint.sSpCode      );
	Coltrim(sTRebackPoint.sOperCode    );
	Coltrim(sTRebackPoint.sContentCode );
	Coltrim(sTRebackPoint.sIngressIp   );
	Coltrim(sTRebackPoint.sVisitProv   );
	Coltrim(sTRebackPoint.sStartTime   );
	Coltrim(sTRebackPoint.sStopTime    );
	Coltrim(sTRebackPoint.sDnloadDur   );
	Coltrim(sTRebackPoint.sValidTimes  );
	Coltrim(sTRebackPoint.sOnlineDur   );
	Coltrim(sTRebackPoint.sDataSize    );
	Coltrim(sTRebackPoint.sBillingType );
	Coltrim(sTRebackPoint.sInfoFee     );
	Coltrim(sTRebackPoint.sDisInfoFee  );
	Coltrim(sTRebackPoint.sDiscount    );
	Coltrim(sTRebackPoint.sCarryType   );
	Coltrim(sTRebackPoint.sStatus      );
	Coltrim(sTRebackPoint.sPriority    );
	Coltrim(sTRebackPoint.sExchangeRate);
	Coltrim(sTRebackPoint.sPointCost   );
	Coltrim(sTRebackPoint.sChannelId   );
	Coltrim(sTRebackPoint.sTranId      );
	Coltrim(sTRebackPoint.sChargeupNum );
	Coltrim(sTRebackPoint.sReserved    );
	Coltrim(sTRebackPoint.sDealDate    );
	Coltrim(sTRebackPoint.sDealFlag    );
	Coltrim(sTRebackPoint.sFileName    );
	Coltrim(sTRebackPoint.sPartitionId );
	Coltrim(sTRebackPoint.sOpTime      );
	Coltrim(sTRebackPoint.sLoginNo     );
	Coltrim(sTRebackPoint.sLoginAccept );

	EXEC SQL INSERT INTO rebackPoint
	                    (output_code, long_code, user_info, rec_type, segnum, cdr_type,
	                     deposit_type, charge_dn, user_type, user_attr, msisdn_rec,
	                     opr_type, src_type, dev_code, sp_code, oper_code, content_code,
	                     ingress_ip, visit_prov, start_time, stop_time, dnload_dur,
	                     valid_times, online_dur, data_size, billing_type, info_fee,
	                     dis_info_fee, discount, carry_type, status, priority,
	                     exchange_rate, point_cost, channel_id, tran_id, chargeup_num,
	                     reserved, deal_date, deal_flag, file_name, partition_id,
	                     op_time, login_no, login_accept)
		     VALUES(
		            :sTRebackPoint.sOutputCode     ,
                    :sTRebackPoint.sLongCode       ,
                    :sTRebackPoint.sUserInfo       ,
                    :sTRebackPoint.sRecType        ,
                    :sTRebackPoint.sSegnum         ,
                    :sTRebackPoint.sCdrType        ,
                    :sTRebackPoint.sDepositType    ,
                    :sTRebackPoint.sChargeDn       ,
                    :sTRebackPoint.sUserType       ,
                    :sTRebackPoint.sUserAttr       ,
                    :sTRebackPoint.sMsisdnRec      ,
                    :sTRebackPoint.sOprType        ,
                    :sTRebackPoint.sSrcType        ,
                    :sTRebackPoint.sDevCode        ,
                    :sTRebackPoint.sSpCode         ,
                    :sTRebackPoint.sOperCode       ,
                    :sTRebackPoint.sContentCode    ,
                    :sTRebackPoint.sIngressIp      ,
                    :sTRebackPoint.sVisitProv      ,
                    :sTRebackPoint.sStartTime      ,
                    :sTRebackPoint.sStopTime       ,
                    to_number(:sTRebackPoint.sDnloadDur  )    ,
                    to_number(:sTRebackPoint.sValidTimes )    ,
                    to_number(:sTRebackPoint.sOnlineDur  )    ,
                    to_number(:sTRebackPoint.sDataSize   )    ,
                    :sTRebackPoint.sBillingType    ,
                    to_number(:sTRebackPoint.sInfoFee    )    ,
                    to_number(:sTRebackPoint.sDisInfoFee )    ,
                    to_number(:sTRebackPoint.sDiscount   )    ,
                    :sTRebackPoint.sCarryType      ,
                    :sTRebackPoint.sStatus         ,
                    :sTRebackPoint.sPriority       ,
                    to_number(:sTRebackPoint.sExchangeRate )  ,
                    to_number(:sTRebackPoint.sPointCost    )  ,
                    :sTRebackPoint.sChannelId      ,
                    :sTRebackPoint.sTranId         ,
                    :sTRebackPoint.sChargeupNum    ,
                    :sTRebackPoint.sReserved       ,
                    :sTRebackPoint.sDealDate       ,
                    :sTRebackPoint.sDealFlag       ,
                    :sTRebackPoint.sFileName       ,
                    :sTRebackPoint.sPartitionId    ,
                    to_date(:sTRebackPoint.sOpTime,'yyyymmdd hh24:mi:ss')   ,
                    :sTRebackPoint.sLoginNo        ,
                    to_number(:sTRebackPoint.sLoginAccept)
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"REBACKPOINT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"output_code"   ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOutputCode        );
	OrderSetDataItem(&vMsgBodyType,"long_code"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sLongCode          );
	OrderSetDataItem(&vMsgBodyType,"user_info"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserInfo          );
	OrderSetDataItem(&vMsgBodyType,"rec_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sRecType           );
	OrderSetDataItem(&vMsgBodyType,"segnum"        ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSegnum            );
	OrderSetDataItem(&vMsgBodyType,"cdr_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sCdrType           );
	OrderSetDataItem(&vMsgBodyType,"deposit_type"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDepositType       );
	OrderSetDataItem(&vMsgBodyType,"charge_dn"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChargeDn          );
	OrderSetDataItem(&vMsgBodyType,"user_type"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserType          );
	OrderSetDataItem(&vMsgBodyType,"user_attr"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserAttr          );
	OrderSetDataItem(&vMsgBodyType,"msisdn_rec"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sMsisdnRec         );
	OrderSetDataItem(&vMsgBodyType,"opr_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOprType           );
	OrderSetDataItem(&vMsgBodyType,"src_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSrcType           );
	OrderSetDataItem(&vMsgBodyType,"dev_code"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDevCode           );
	OrderSetDataItem(&vMsgBodyType,"sp_code"       ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSpCode            );
	OrderSetDataItem(&vMsgBodyType,"oper_code"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOperCode          );
	OrderSetDataItem(&vMsgBodyType,"content_code"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sContentCode       );
	OrderSetDataItem(&vMsgBodyType,"ingress_ip"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sIngressIp         );
	OrderSetDataItem(&vMsgBodyType,"visit_prov"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sVisitProv         );
	OrderSetDataItem(&vMsgBodyType,"start_time"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStartTime         );
	OrderSetDataItem(&vMsgBodyType,"stop_time"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStopTime          );
	OrderSetDataItem(&vMsgBodyType,"dnload_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDnloadDur         );
	OrderSetDataItem(&vMsgBodyType,"valid_times"   ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sValidTimes        );
	OrderSetDataItem(&vMsgBodyType,"online_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sOnlineDur         );
	OrderSetDataItem(&vMsgBodyType,"data_size"     ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDataSize          );
	OrderSetDataItem(&vMsgBodyType,"billing_type"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sBillingType       );
	OrderSetDataItem(&vMsgBodyType,"info_fee"      ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sInfoFee           );
	OrderSetDataItem(&vMsgBodyType,"dis_info_fee"  ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDisInfoFee        );
	OrderSetDataItem(&vMsgBodyType,"discount"      ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDiscount          );
	OrderSetDataItem(&vMsgBodyType,"carry_type"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sCarryType         );
	OrderSetDataItem(&vMsgBodyType,"status"        ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStatus            );
	OrderSetDataItem(&vMsgBodyType,"priority"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sPriority          );
	OrderSetDataItem(&vMsgBodyType,"exchange_rate" ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sExchangeRate      );
	OrderSetDataItem(&vMsgBodyType,"point_cost"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sPointCost         );
	OrderSetDataItem(&vMsgBodyType,"channel_id"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChannelId         );
	OrderSetDataItem(&vMsgBodyType,"tran_id"       ,ORDERDATAFORMAT_STRING , sTRebackPoint.sTranId            );
	OrderSetDataItem(&vMsgBodyType,"chargeup_num"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChargeupNum       );
	OrderSetDataItem(&vMsgBodyType,"reserved"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sReserved          );
	OrderSetDataItem(&vMsgBodyType,"deal_date"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDealDate          );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDealFlag          );
	OrderSetDataItem(&vMsgBodyType,"file_name"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sFileName          );
	OrderSetDataItem(&vMsgBodyType,"partition_id"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sPartitionId       );
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE   , sTRebackPoint.sOpTime            );
	OrderSetDataItem(&vMsgBodyType,"login_no"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sLoginNo           );
	OrderSetDataItem(&vMsgBodyType,"login_accept"  ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sLoginAccept       );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteRebackPoint(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_tran_id,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_tran_id;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE rebackPoint a WHERE a.tran_id=:NG_Param0 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"REBACKPOINT");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"tran_id",ORDERDATAFORMAT_STRING,i_tran_id);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateRebackPoint(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_tran_id,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_tran_id;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TRebackPoint	sTRebackPoint;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE rebackPoint a SET %s WHERE a.tran_id=:NG_Param0 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(output_code         ,chr(0)),
                    nvl(long_code           ,chr(0)),
                    nvl(user_info           ,chr(0)),
                    nvl(rec_type            ,chr(0)),
                    nvl(segnum              ,chr(0)),
                    nvl(cdr_type            ,chr(0)),
                    nvl(deposit_type        ,chr(0)),
                    nvl(charge_dn           ,chr(0)),
                    nvl(user_type           ,chr(0)),
                    nvl(user_attr           ,chr(0)),
                    nvl(msisdn_rec          ,chr(0)),
                    nvl(opr_type            ,chr(0)),
                    nvl(src_type            ,chr(0)),
                    nvl(dev_code            ,chr(0)),
                    nvl(sp_code             ,chr(0)),
                    nvl(oper_code           ,chr(0)),
                    nvl(content_code        ,chr(0)),
                    nvl(ingress_ip          ,chr(0)),
                    nvl(visit_prov          ,chr(0)),
                    nvl(start_time          ,chr(0)),
                    nvl(stop_time           ,chr(0)),
                    nvl(to_char(dnload_dur  )        ,chr(0)),
                    nvl(to_char(valid_times )        ,chr(0)),
                    nvl(to_char(online_dur  )        ,chr(0)),
                    nvl(to_char(data_size   )        ,chr(0)),
                    nvl(billing_type        ,         chr(0)),
                    nvl(to_char(info_fee    )        ,chr(0)),
                    nvl(to_char(dis_info_fee)        ,chr(0)),
                    nvl(to_char(discount    )        ,chr(0)),
                    nvl(carry_type          ,         chr(0)),
                    nvl(status              ,         chr(0)),
                    nvl(priority            ,         chr(0)),
                    nvl(to_char(exchange_rate )      ,chr(0)),
                    nvl(to_char(point_cost    )      ,chr(0)),
                    nvl(channel_id          ,         chr(0)),
                    nvl(tran_id             ,         chr(0)),
                    nvl(chargeup_num        ,         chr(0)),
                    nvl(reserved            ,         chr(0)),
                    nvl(deal_date           ,         chr(0)),
                    nvl(deal_flag           ,         chr(0)),
                    nvl(file_name           ,         chr(0)),
                    nvl(partition_id        ,         chr(0)),
                    nvl(to_char(op_time ,'yyyymmdd hh24:mi:ss')            ,chr(0)),
                    nvl(login_no            ,chr(0)),
                    nvl(to_char(login_accept),chr(0))
			INTO :sTRebackPoint.sOutputCode       ,
                 :sTRebackPoint.sLongCode         ,
                 :sTRebackPoint.sUserInfo         ,
                 :sTRebackPoint.sRecType          ,
                 :sTRebackPoint.sSegnum           ,
                 :sTRebackPoint.sCdrType          ,
                 :sTRebackPoint.sDepositType      ,
                 :sTRebackPoint.sChargeDn         ,
                 :sTRebackPoint.sUserType         ,
                 :sTRebackPoint.sUserAttr         ,
                 :sTRebackPoint.sMsisdnRec        ,
                 :sTRebackPoint.sOprType          ,
                 :sTRebackPoint.sSrcType          ,
                 :sTRebackPoint.sDevCode          ,
                 :sTRebackPoint.sSpCode           ,
                 :sTRebackPoint.sOperCode         ,
                 :sTRebackPoint.sContentCode      ,
                 :sTRebackPoint.sIngressIp        ,
                 :sTRebackPoint.sVisitProv        ,
                 :sTRebackPoint.sStartTime        ,
                 :sTRebackPoint.sStopTime         ,
                 :sTRebackPoint.sDnloadDur        ,
                 :sTRebackPoint.sValidTimes       ,
                 :sTRebackPoint.sOnlineDur        ,
                 :sTRebackPoint.sDataSize         ,
                 :sTRebackPoint.sBillingType      ,
                 :sTRebackPoint.sInfoFee          ,
                 :sTRebackPoint.sDisInfoFee       ,
                 :sTRebackPoint.sDiscount         ,
                 :sTRebackPoint.sCarryType        ,
                 :sTRebackPoint.sStatus           ,
                 :sTRebackPoint.sPriority         ,
                 :sTRebackPoint.sExchangeRate     ,
                 :sTRebackPoint.sPointCost        ,
                 :sTRebackPoint.sChannelId        ,
                 :sTRebackPoint.sTranId           ,
                 :sTRebackPoint.sChargeupNum      ,
                 :sTRebackPoint.sReserved         ,
                 :sTRebackPoint.sDealDate         ,
                 :sTRebackPoint.sDealFlag         ,
                 :sTRebackPoint.sFileName         ,
                 :sTRebackPoint.sPartitionId      ,
                 :sTRebackPoint.sOpTime           ,
                 :sTRebackPoint.sLoginNo          ,
                 :sTRebackPoint.sLoginAccept
			FROM rebackPoint
			WHERE tran_id = :i_tran_id;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTRebackPoint.sOutputCode      );
	Coltrim(sTRebackPoint.sLongCode        );
	Coltrim(sTRebackPoint.sUserInfo        );
	Coltrim(sTRebackPoint.sRecType         );
	Coltrim(sTRebackPoint.sSegnum          );
	Coltrim(sTRebackPoint.sCdrType         );
	Coltrim(sTRebackPoint.sDepositType     );
	Coltrim(sTRebackPoint.sChargeDn        );
	Coltrim(sTRebackPoint.sUserType        );
	Coltrim(sTRebackPoint.sUserAttr        );
	Coltrim(sTRebackPoint.sMsisdnRec       );
	Coltrim(sTRebackPoint.sOprType         );
	Coltrim(sTRebackPoint.sSrcType         );
	Coltrim(sTRebackPoint.sDevCode         );
	Coltrim(sTRebackPoint.sSpCode          );
	Coltrim(sTRebackPoint.sOperCode        );
	Coltrim(sTRebackPoint.sContentCode     );
	Coltrim(sTRebackPoint.sIngressIp       );
	Coltrim(sTRebackPoint.sVisitProv       );
	Coltrim(sTRebackPoint.sStartTime       );
	Coltrim(sTRebackPoint.sStopTime        );
	Coltrim(sTRebackPoint.sDnloadDur       );
	Coltrim(sTRebackPoint.sValidTimes      );
	Coltrim(sTRebackPoint.sOnlineDur       );
	Coltrim(sTRebackPoint.sDataSize        );
	Coltrim(sTRebackPoint.sBillingType     );
	Coltrim(sTRebackPoint.sInfoFee         );
	Coltrim(sTRebackPoint.sDisInfoFee      );
	Coltrim(sTRebackPoint.sDiscount        );
	Coltrim(sTRebackPoint.sCarryType       );
	Coltrim(sTRebackPoint.sStatus          );
	Coltrim(sTRebackPoint.sPriority        );
	Coltrim(sTRebackPoint.sExchangeRate    );
	Coltrim(sTRebackPoint.sPointCost       );
	Coltrim(sTRebackPoint.sChannelId       );
	Coltrim(sTRebackPoint.sTranId          );
	Coltrim(sTRebackPoint.sChargeupNum     );
	Coltrim(sTRebackPoint.sReserved        );
	Coltrim(sTRebackPoint.sDealDate        );
	Coltrim(sTRebackPoint.sDealFlag        );
	Coltrim(sTRebackPoint.sFileName        );
	Coltrim(sTRebackPoint.sPartitionId     );
	Coltrim(sTRebackPoint.sOpTime          );
	Coltrim(sTRebackPoint.sLoginNo         );
	Coltrim(sTRebackPoint.sLoginAccept     );

	strcpy(v_table_name,"REBACKPOINT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"tran_id",     ORDERDATAFORMAT_NUMBER,i_tran_id);

	OrderSetDataItem(&vMsgBodyType,"output_code"   ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOutputCode        );
	OrderSetDataItem(&vMsgBodyType,"long_code"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sLongCode          );
	OrderSetDataItem(&vMsgBodyType,"user_info"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserInfo          );
	OrderSetDataItem(&vMsgBodyType,"rec_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sRecType           );
	OrderSetDataItem(&vMsgBodyType,"segnum"        ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSegnum            );
	OrderSetDataItem(&vMsgBodyType,"cdr_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sCdrType           );
	OrderSetDataItem(&vMsgBodyType,"deposit_type"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDepositType       );
	OrderSetDataItem(&vMsgBodyType,"charge_dn"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChargeDn          );
	OrderSetDataItem(&vMsgBodyType,"user_type"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserType          );
	OrderSetDataItem(&vMsgBodyType,"user_attr"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sUserAttr          );
	OrderSetDataItem(&vMsgBodyType,"msisdn_rec"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sMsisdnRec         );
	OrderSetDataItem(&vMsgBodyType,"opr_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOprType           );
	OrderSetDataItem(&vMsgBodyType,"src_type"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSrcType           );
	OrderSetDataItem(&vMsgBodyType,"dev_code"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDevCode           );
	OrderSetDataItem(&vMsgBodyType,"sp_code"       ,ORDERDATAFORMAT_STRING , sTRebackPoint.sSpCode            );
	OrderSetDataItem(&vMsgBodyType,"oper_code"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sOperCode          );
	OrderSetDataItem(&vMsgBodyType,"content_code"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sContentCode       );
	OrderSetDataItem(&vMsgBodyType,"ingress_ip"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sIngressIp         );
	OrderSetDataItem(&vMsgBodyType,"visit_prov"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sVisitProv         );
	OrderSetDataItem(&vMsgBodyType,"start_time"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStartTime         );
	OrderSetDataItem(&vMsgBodyType,"stop_time"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStopTime          );
	OrderSetDataItem(&vMsgBodyType,"dnload_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDnloadDur         );
	OrderSetDataItem(&vMsgBodyType,"valid_times"   ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sValidTimes        );
	OrderSetDataItem(&vMsgBodyType,"online_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sOnlineDur         );
	OrderSetDataItem(&vMsgBodyType,"data_size"     ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDataSize          );
	OrderSetDataItem(&vMsgBodyType,"billing_type"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sBillingType       );
	OrderSetDataItem(&vMsgBodyType,"info_fee"      ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sInfoFee           );
	OrderSetDataItem(&vMsgBodyType,"dis_info_fee"  ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDisInfoFee        );
	OrderSetDataItem(&vMsgBodyType,"discount"      ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sDiscount          );
	OrderSetDataItem(&vMsgBodyType,"carry_type"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sCarryType         );
	OrderSetDataItem(&vMsgBodyType,"status"        ,ORDERDATAFORMAT_STRING , sTRebackPoint.sStatus            );
	OrderSetDataItem(&vMsgBodyType,"priority"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sPriority          );
	OrderSetDataItem(&vMsgBodyType,"exchange_rate" ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sExchangeRate      );
	OrderSetDataItem(&vMsgBodyType,"point_cost"    ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sPointCost         );
	OrderSetDataItem(&vMsgBodyType,"channel_id"    ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChannelId         );
	OrderSetDataItem(&vMsgBodyType,"tran_id"       ,ORDERDATAFORMAT_STRING , sTRebackPoint.sTranId            );
	OrderSetDataItem(&vMsgBodyType,"chargeup_num"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sChargeupNum       );
	OrderSetDataItem(&vMsgBodyType,"reserved"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sReserved          );
	OrderSetDataItem(&vMsgBodyType,"deal_date"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDealDate          );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sDealFlag          );
	OrderSetDataItem(&vMsgBodyType,"file_name"     ,ORDERDATAFORMAT_STRING , sTRebackPoint.sFileName          );
	OrderSetDataItem(&vMsgBodyType,"partition_id"  ,ORDERDATAFORMAT_STRING , sTRebackPoint.sPartitionId       );
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE   , sTRebackPoint.sOpTime            );
	OrderSetDataItem(&vMsgBodyType,"login_no"      ,ORDERDATAFORMAT_STRING , sTRebackPoint.sLoginNo           );
	OrderSetDataItem(&vMsgBodyType,"login_accept"  ,ORDERDATAFORMAT_NUMBER , sTRebackPoint.sLoginAccept       );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertRebackFee(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTRebackFee
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TRebackFee	sTRebackFee;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTRebackFee.sOutputCode  );
	Coltrim(sTRebackFee.sLongCode    );
	Coltrim(sTRebackFee.sUserInfo    );
	Coltrim(sTRebackFee.sSegnum      );
	Coltrim(sTRebackFee.sCdrType     );
	Coltrim(sTRebackFee.sDepositType );
	Coltrim(sTRebackFee.sMsisdn      );
	Coltrim(sTRebackFee.sUserType    );
	Coltrim(sTRebackFee.sUserAttr    );
	Coltrim(sTRebackFee.sOtherParty  );
	Coltrim(sTRebackFee.sSrcType     );
	Coltrim(sTRebackFee.sDevCode     );
	Coltrim(sTRebackFee.sSpCode      );
	Coltrim(sTRebackFee.sOperCode    );
	Coltrim(sTRebackFee.sIngressIp   );
	Coltrim(sTRebackFee.sVisitProv   );
	Coltrim(sTRebackFee.sStartTime   );
	Coltrim(sTRebackFee.sEndDatetime );
	Coltrim(sTRebackFee.sDnloadDur   );
	Coltrim(sTRebackFee.sValidTimes  );
	Coltrim(sTRebackFee.sOnlineDur   );
	Coltrim(sTRebackFee.sDataSize    );
	Coltrim(sTRebackFee.sBillingType );
	Coltrim(sTRebackFee.sMsgFee      );
	Coltrim(sTRebackFee.sOldMsgFee   );
	Coltrim(sTRebackFee.sDiscount    );
	Coltrim(sTRebackFee.sCarryType   );
	Coltrim(sTRebackFee.sStatus      );
	Coltrim(sTRebackFee.sPriority    );
	Coltrim(sTRebackFee.sExchangeRate);
	Coltrim(sTRebackFee.sPointCost   );
	Coltrim(sTRebackFee.sChannelId   );
	Coltrim(sTRebackFee.sContentCode );
	Coltrim(sTRebackFee.sChargeupNum );
	Coltrim(sTRebackFee.sReserved    );
	Coltrim(sTRebackFee.sDealDate    );
	Coltrim(sTRebackFee.sDealFlag    );
	Coltrim(sTRebackFee.sFileName    );
	Coltrim(sTRebackFee.sPartitionId );
	Coltrim(sTRebackFee.sMonthFee    );
	Coltrim(sTRebackFee.sOpTime      );
	Coltrim(sTRebackFee.sLoginNo     );
	Coltrim(sTRebackFee.sLoginAccept );

	EXEC SQL INSERT INTO rebackFee
	                    (output_code, long_code, user_info, segnum, cdr_type, deposit_type,
	                     msisdn, user_type, user_attr, other_party, src_type, dev_code,
	                     sp_code, oper_code, ingress_ip, visit_prov, start_time,
	                     end_datetime, dnload_dur, valid_times, online_dur, data_size,
	                     billing_type, msg_fee, old_msg_fee, discount, carry_type, status,
	                     priority, exchange_rate, point_cost, channel_id, content_code,
	                     chargeup_num, reserved, deal_date, deal_flag, file_name,
	                     partition_id, month_fee, op_time, login_no, login_accept)
		     VALUES(
		            :sTRebackFee.sOutputCode    ,
                    :sTRebackFee.sLongCode      ,
                    :sTRebackFee.sUserInfo      ,
                    :sTRebackFee.sSegnum        ,
                    :sTRebackFee.sCdrType       ,
                    :sTRebackFee.sDepositType   ,
                    :sTRebackFee.sMsisdn        ,
                    :sTRebackFee.sUserType      ,
                    :sTRebackFee.sUserAttr      ,
                    :sTRebackFee.sOtherParty    ,
                    :sTRebackFee.sSrcType       ,
                    :sTRebackFee.sDevCode       ,
                    :sTRebackFee.sSpCode        ,
                    :sTRebackFee.sOperCode      ,
                    :sTRebackFee.sIngressIp     ,
                    :sTRebackFee.sVisitProv     ,
                    :sTRebackFee.sStartTime     ,
                    :sTRebackFee.sEndDatetime   ,
                    to_number(:sTRebackFee.sDnloadDur  )   ,
                    to_number(:sTRebackFee.sValidTimes )   ,
                    to_number(:sTRebackFee.sOnlineDur  )   ,
                    to_number(:sTRebackFee.sDataSize   )   ,
                    :sTRebackFee.sBillingType   ,
                    to_number(:sTRebackFee.sMsgFee     )   ,
                    to_number(:sTRebackFee.sOldMsgFee  )   ,
                    to_number(:sTRebackFee.sDiscount   )   ,
                    :sTRebackFee.sCarryType     ,
                    :sTRebackFee.sStatus        ,
                    :sTRebackFee.sPriority      ,
                    to_number(:sTRebackFee.sExchangeRate)  ,
                    to_number(:sTRebackFee.sPointCost   )  ,
                    :sTRebackFee.sChannelId     ,
                    :sTRebackFee.sContentCode   ,
                    :sTRebackFee.sChargeupNum   ,
                    :sTRebackFee.sReserved      ,
                    :sTRebackFee.sDealDate      ,
                    :sTRebackFee.sDealFlag      ,
                    :sTRebackFee.sFileName      ,
                    :sTRebackFee.sPartitionId   ,
                    to_number(:sTRebackFee.sMonthFee)      ,
                    to_date(:sTRebackFee.sOpTime,'yyyymmdd hh24:mi:ss')        ,
                    :sTRebackFee.sLoginNo       ,
                    to_number(:sTRebackFee.sLoginAccept)
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"REBACKFEE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"output_code"   ,ORDERDATAFORMAT_STRING , sTRebackFee.sOutputCode    );
	OrderSetDataItem(&vMsgBodyType,"long_code"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sLongCode      );
	OrderSetDataItem(&vMsgBodyType,"user_info"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserInfo      );
	OrderSetDataItem(&vMsgBodyType,"segnum"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sSegnum        );
	OrderSetDataItem(&vMsgBodyType,"cdr_type"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sCdrType       );
	OrderSetDataItem(&vMsgBodyType,"deposit_type"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sDepositType   );
	OrderSetDataItem(&vMsgBodyType,"msisdn"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sMsisdn        );
	OrderSetDataItem(&vMsgBodyType,"user_type"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserType      );
	OrderSetDataItem(&vMsgBodyType,"user_attr"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserAttr      );
	OrderSetDataItem(&vMsgBodyType,"other_party"   ,ORDERDATAFORMAT_STRING , sTRebackFee.sOtherParty    );
	OrderSetDataItem(&vMsgBodyType,"src_type"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sSrcType       );
	OrderSetDataItem(&vMsgBodyType,"dev_code"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sDevCode       );
	OrderSetDataItem(&vMsgBodyType,"sp_code"       ,ORDERDATAFORMAT_STRING , sTRebackFee.sSpCode        );
	OrderSetDataItem(&vMsgBodyType,"oper_code"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sOperCode      );
	OrderSetDataItem(&vMsgBodyType,"ingress_ip"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sIngressIp     );
	OrderSetDataItem(&vMsgBodyType,"visit_prov"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sVisitProv     );
	OrderSetDataItem(&vMsgBodyType,"start_time"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sStartTime     );
	OrderSetDataItem(&vMsgBodyType,"end_datetime"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sEndDatetime   );
	OrderSetDataItem(&vMsgBodyType,"dnload_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDnloadDur     );
	OrderSetDataItem(&vMsgBodyType,"valid_times"   ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sValidTimes    );
	OrderSetDataItem(&vMsgBodyType,"online_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sOnlineDur     );
	OrderSetDataItem(&vMsgBodyType,"data_size"     ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDataSize      );
	OrderSetDataItem(&vMsgBodyType,"billing_type"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sBillingType   );
	OrderSetDataItem(&vMsgBodyType,"msg_fee"       ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sMsgFee        );
	OrderSetDataItem(&vMsgBodyType,"old_msg_fee"   ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sOldMsgFee     );
	OrderSetDataItem(&vMsgBodyType,"discount"      ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDiscount      );
	OrderSetDataItem(&vMsgBodyType,"carry_type"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sCarryType     );
	OrderSetDataItem(&vMsgBodyType,"status"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sStatus        );
	OrderSetDataItem(&vMsgBodyType,"priority"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sPriority      );
	OrderSetDataItem(&vMsgBodyType,"exchange_rate" ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sExchangeRate  );
	OrderSetDataItem(&vMsgBodyType,"point_cost"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sPointCost     );
	OrderSetDataItem(&vMsgBodyType,"channel_id"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sChannelId     );
	OrderSetDataItem(&vMsgBodyType,"content_code"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sContentCode   );
	OrderSetDataItem(&vMsgBodyType,"chargeup_num"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sChargeupNum   );
	OrderSetDataItem(&vMsgBodyType,"reserved"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sReserved      );
	OrderSetDataItem(&vMsgBodyType,"deal_date"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sDealDate      );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sDealFlag      );
	OrderSetDataItem(&vMsgBodyType,"file_name"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sFileName      );
	OrderSetDataItem(&vMsgBodyType,"partition_id"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sPartitionId   );
	OrderSetDataItem(&vMsgBodyType,"month_fee"     ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sMonthFee      );
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE   , sTRebackFee.sOpTime        );
	OrderSetDataItem(&vMsgBodyType,"login_no"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType,"login_accept"  ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sLoginAccept   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteRebackFee(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_chargeup_num,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_chargeup_num;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE rebackFee a WHERE a.chargeup_num=:NG_Param0 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"REBACKFEE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"chargeup_num",ORDERDATAFORMAT_STRING,i_chargeup_num);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateRebackFee(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_chargeup_num,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_chargeup_num;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TRebackFee	sTRebackFee;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE rebackFee a SET %s WHERE a.chargeup_num=:NG_Param0 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(output_code       , chr(0)),
                    nvl(long_code         , chr(0)),
                    nvl(user_info         , chr(0)),
                    nvl(segnum            , chr(0)),
                    nvl(cdr_type          , chr(0)),
                    nvl(deposit_type      , chr(0)),
                    nvl(msisdn            , chr(0)),
                    nvl(user_type         , chr(0)),
                    nvl(user_attr         , chr(0)),
                    nvl(other_party       , chr(0)),
                    nvl(src_type          , chr(0)),
                    nvl(dev_code          , chr(0)),
                    nvl(sp_code           , chr(0)),
                    nvl(oper_code         , chr(0)),
                    nvl(ingress_ip        , chr(0)),
                    nvl(visit_prov        , chr(0)),
                    nvl(start_time        , chr(0)),
                    nvl(end_datetime      , chr(0)),
                    nvl(to_char(dnload_dur  )      , chr(0)),
                    nvl(to_char(valid_times )      , chr(0)),
                    nvl(to_char(online_dur  )      , chr(0)),
                    nvl(to_char(data_size   )      , chr(0)),
                    nvl(billing_type               , chr(0)),
                    nvl(to_char(msg_fee     )      , chr(0)),
                    nvl(to_char(old_msg_fee )      , chr(0)),
                    nvl(to_char(discount    )      , chr(0)),
                    nvl(carry_type        , chr(0)),
                    nvl(status            , chr(0)),
                    nvl(priority          , chr(0)),
                    nvl(to_char(exchange_rate)     , chr(0)),
                    nvl(to_char(point_cost   )     , chr(0)),
                    nvl(channel_id        , chr(0)),
                    nvl(content_code      , chr(0)),
                    nvl(chargeup_num      , chr(0)),
                    nvl(reserved          , chr(0)),
                    nvl(deal_date         , chr(0)),
                    nvl(deal_flag         , chr(0)),
                    nvl(file_name         , chr(0)),
                    nvl(partition_id      , chr(0)),
                    nvl(to_char(month_fee   )      , chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss')      ,chr(0)),
                    nvl(login_no          ,chr(0)),
                    nvl(to_char(login_accept),chr(0))
			INTO :sTRebackFee.sOutputCode      ,
                 :sTRebackFee.sLongCode        ,
                 :sTRebackFee.sUserInfo        ,
                 :sTRebackFee.sSegnum          ,
                 :sTRebackFee.sCdrType         ,
                 :sTRebackFee.sDepositType     ,
                 :sTRebackFee.sMsisdn          ,
                 :sTRebackFee.sUserType        ,
                 :sTRebackFee.sUserAttr        ,
                 :sTRebackFee.sOtherParty      ,
                 :sTRebackFee.sSrcType         ,
                 :sTRebackFee.sDevCode         ,
                 :sTRebackFee.sSpCode          ,
                 :sTRebackFee.sOperCode        ,
                 :sTRebackFee.sIngressIp       ,
                 :sTRebackFee.sVisitProv       ,
                 :sTRebackFee.sStartTime       ,
                 :sTRebackFee.sEndDatetime     ,
                 :sTRebackFee.sDnloadDur       ,
                 :sTRebackFee.sValidTimes      ,
                 :sTRebackFee.sOnlineDur       ,
                 :sTRebackFee.sDataSize        ,
                 :sTRebackFee.sBillingType     ,
                 :sTRebackFee.sMsgFee          ,
                 :sTRebackFee.sOldMsgFee       ,
                 :sTRebackFee.sDiscount        ,
                 :sTRebackFee.sCarryType       ,
                 :sTRebackFee.sStatus          ,
                 :sTRebackFee.sPriority        ,
                 :sTRebackFee.sExchangeRate    ,
                 :sTRebackFee.sPointCost       ,
                 :sTRebackFee.sChannelId       ,
                 :sTRebackFee.sContentCode     ,
                 :sTRebackFee.sChargeupNum     ,
                 :sTRebackFee.sReserved        ,
                 :sTRebackFee.sDealDate        ,
                 :sTRebackFee.sDealFlag        ,
                 :sTRebackFee.sFileName        ,
                 :sTRebackFee.sPartitionId     ,
                 :sTRebackFee.sMonthFee        ,
                 :sTRebackFee.sOpTime          ,
                 :sTRebackFee.sLoginNo         ,
                 :sTRebackFee.sLoginAccept
			FROM rebackFee
			WHERE chargeup_num = :i_chargeup_num;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTRebackFee.sOutputCode     );
	Coltrim(sTRebackFee.sLongCode       );
	Coltrim(sTRebackFee.sUserInfo       );
	Coltrim(sTRebackFee.sSegnum         );
	Coltrim(sTRebackFee.sCdrType        );
	Coltrim(sTRebackFee.sDepositType    );
	Coltrim(sTRebackFee.sMsisdn         );
	Coltrim(sTRebackFee.sUserType       );
	Coltrim(sTRebackFee.sUserAttr       );
	Coltrim(sTRebackFee.sOtherParty     );
	Coltrim(sTRebackFee.sSrcType        );
	Coltrim(sTRebackFee.sDevCode        );
	Coltrim(sTRebackFee.sSpCode         );
	Coltrim(sTRebackFee.sOperCode       );
	Coltrim(sTRebackFee.sIngressIp      );
	Coltrim(sTRebackFee.sVisitProv      );
	Coltrim(sTRebackFee.sStartTime      );
	Coltrim(sTRebackFee.sEndDatetime    );
	Coltrim(sTRebackFee.sDnloadDur      );
	Coltrim(sTRebackFee.sValidTimes     );
	Coltrim(sTRebackFee.sOnlineDur      );
	Coltrim(sTRebackFee.sDataSize       );
	Coltrim(sTRebackFee.sBillingType    );
	Coltrim(sTRebackFee.sMsgFee         );
	Coltrim(sTRebackFee.sOldMsgFee      );
	Coltrim(sTRebackFee.sDiscount       );
	Coltrim(sTRebackFee.sCarryType      );
	Coltrim(sTRebackFee.sStatus         );
	Coltrim(sTRebackFee.sPriority       );
	Coltrim(sTRebackFee.sExchangeRate   );
	Coltrim(sTRebackFee.sPointCost      );
	Coltrim(sTRebackFee.sChannelId      );
	Coltrim(sTRebackFee.sContentCode    );
	Coltrim(sTRebackFee.sChargeupNum    );
	Coltrim(sTRebackFee.sReserved       );
	Coltrim(sTRebackFee.sDealDate       );
	Coltrim(sTRebackFee.sDealFlag       );
	Coltrim(sTRebackFee.sFileName       );
	Coltrim(sTRebackFee.sPartitionId    );
	Coltrim(sTRebackFee.sMonthFee       );
	Coltrim(sTRebackFee.sOpTime         );
	Coltrim(sTRebackFee.sLoginNo        );
	Coltrim(sTRebackFee.sLoginAccept    );

	strcpy(v_table_name,"REBACKFEE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"chargeup_num",     ORDERDATAFORMAT_STRING,i_chargeup_num);

	OrderSetDataItem(&vMsgBodyType,"output_code"   ,ORDERDATAFORMAT_STRING , sTRebackFee.sOutputCode    );
	OrderSetDataItem(&vMsgBodyType,"long_code"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sLongCode      );
	OrderSetDataItem(&vMsgBodyType,"user_info"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserInfo      );
	OrderSetDataItem(&vMsgBodyType,"segnum"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sSegnum        );
	OrderSetDataItem(&vMsgBodyType,"cdr_type"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sCdrType       );
	OrderSetDataItem(&vMsgBodyType,"deposit_type"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sDepositType   );
	OrderSetDataItem(&vMsgBodyType,"msisdn"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sMsisdn        );
	OrderSetDataItem(&vMsgBodyType,"user_type"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserType      );
	OrderSetDataItem(&vMsgBodyType,"user_attr"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sUserAttr      );
	OrderSetDataItem(&vMsgBodyType,"other_party"   ,ORDERDATAFORMAT_STRING , sTRebackFee.sOtherParty    );
	OrderSetDataItem(&vMsgBodyType,"src_type"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sSrcType       );
	OrderSetDataItem(&vMsgBodyType,"dev_code"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sDevCode       );
	OrderSetDataItem(&vMsgBodyType,"sp_code"       ,ORDERDATAFORMAT_STRING , sTRebackFee.sSpCode        );
	OrderSetDataItem(&vMsgBodyType,"oper_code"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sOperCode      );
	OrderSetDataItem(&vMsgBodyType,"ingress_ip"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sIngressIp     );
	OrderSetDataItem(&vMsgBodyType,"visit_prov"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sVisitProv     );
	OrderSetDataItem(&vMsgBodyType,"start_time"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sStartTime     );
	OrderSetDataItem(&vMsgBodyType,"end_datetime"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sEndDatetime   );
	OrderSetDataItem(&vMsgBodyType,"dnload_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDnloadDur     );
	OrderSetDataItem(&vMsgBodyType,"valid_times"   ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sValidTimes    );
	OrderSetDataItem(&vMsgBodyType,"online_dur"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sOnlineDur     );
	OrderSetDataItem(&vMsgBodyType,"data_size"     ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDataSize      );
	OrderSetDataItem(&vMsgBodyType,"billing_type"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sBillingType   );
	OrderSetDataItem(&vMsgBodyType,"msg_fee"       ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sMsgFee        );
	OrderSetDataItem(&vMsgBodyType,"old_msg_fee"   ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sOldMsgFee     );
	OrderSetDataItem(&vMsgBodyType,"discount"      ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sDiscount      );
	OrderSetDataItem(&vMsgBodyType,"carry_type"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sCarryType     );
	OrderSetDataItem(&vMsgBodyType,"status"        ,ORDERDATAFORMAT_STRING , sTRebackFee.sStatus        );
	OrderSetDataItem(&vMsgBodyType,"priority"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sPriority      );
	OrderSetDataItem(&vMsgBodyType,"exchange_rate" ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sExchangeRate  );
	OrderSetDataItem(&vMsgBodyType,"point_cost"    ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sPointCost     );
	OrderSetDataItem(&vMsgBodyType,"channel_id"    ,ORDERDATAFORMAT_STRING , sTRebackFee.sChannelId     );
	OrderSetDataItem(&vMsgBodyType,"content_code"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sContentCode   );
	OrderSetDataItem(&vMsgBodyType,"chargeup_num"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sChargeupNum   );
	OrderSetDataItem(&vMsgBodyType,"reserved"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sReserved      );
	OrderSetDataItem(&vMsgBodyType,"deal_date"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sDealDate      );
	OrderSetDataItem(&vMsgBodyType,"deal_flag"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sDealFlag      );
	OrderSetDataItem(&vMsgBodyType,"file_name"     ,ORDERDATAFORMAT_STRING , sTRebackFee.sFileName      );
	OrderSetDataItem(&vMsgBodyType,"partition_id"  ,ORDERDATAFORMAT_STRING , sTRebackFee.sPartitionId   );
	OrderSetDataItem(&vMsgBodyType,"month_fee"     ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sMonthFee      );
	OrderSetDataItem(&vMsgBodyType,"op_time"       ,ORDERDATAFORMAT_DATE   , sTRebackFee.sOpTime        );
	OrderSetDataItem(&vMsgBodyType,"login_no"      ,ORDERDATAFORMAT_STRING , sTRebackFee.sLoginNo       );
	OrderSetDataItem(&vMsgBodyType,"login_accept"  ,ORDERDATAFORMAT_NUMBER , sTRebackFee.sLoginAccept   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertWPhonePayMark(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTwPhonePayMark
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwPhonePayMark	sTwPhonePayMark;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwPhonePayMark.sTotalDate  );
	Coltrim(sTwPhonePayMark.sLoginAccept);
	Coltrim(sTwPhonePayMark.sDealType   );
	Coltrim(sTwPhonePayMark.sOpCode     );
	Coltrim(sTwPhonePayMark.sPhoneNo    );
	Coltrim(sTwPhonePayMark.sTotalPoint );
	Coltrim(sTwPhonePayMark.sChnType    );
	Coltrim(sTwPhonePayMark.sOpTime     );
	Coltrim(sTwPhonePayMark.sBackFlag   );
	Coltrim(sTwPhonePayMark.sDealTime   );

	EXEC SQL INSERT INTO wPhonePayMark
	                    (total_date, login_accept, deal_type, op_code, phone_no,
	                     total_point, chn_type, op_time, back_flag, deal_time)
		     VALUES(
		            to_number(:sTwPhonePayMark.sTotalDate)   ,
                    to_number(:sTwPhonePayMark.sLoginAccept) ,
                    :sTwPhonePayMark.sDealType    ,
                    :sTwPhonePayMark.sOpCode      ,
                    :sTwPhonePayMark.sPhoneNo     ,
                    to_number(:sTwPhonePayMark.sTotalPoint)  ,
                    :sTwPhonePayMark.sChnType     ,
                    to_date(:sTwPhonePayMark.sOpTime,'yyyymmdd hh24:mi:ss')      ,
                    :sTwPhonePayMark.sBackFlag    ,
                    :sTwPhonePayMark.sDealTime
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"WPHONEPAYMARK");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"total_date"   ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sTotalDate   );
	OrderSetDataItem(&vMsgBodyType,"login_accept" ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sLoginAccept );
	OrderSetDataItem(&vMsgBodyType,"deal_type"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sDealType    );
	OrderSetDataItem(&vMsgBodyType,"op_code"      ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sOpCode      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"     ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sPhoneNo     );
	OrderSetDataItem(&vMsgBodyType,"total_point"  ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sTotalPoint  );
	OrderSetDataItem(&vMsgBodyType,"chn_type"     ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sChnType     );
	OrderSetDataItem(&vMsgBodyType,"op_time"      ,ORDERDATAFORMAT_DATE   , sTwPhonePayMark.sOpTime      );
	OrderSetDataItem(&vMsgBodyType,"back_flag"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sBackFlag    );
	OrderSetDataItem(&vMsgBodyType,"deal_time"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sDealTime    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteWPhonePayMark(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_login_accept,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_login_accept;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE wPhonePayMark a WHERE a.login_accept=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"WPHONEPAYMARK");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"login_accept",ORDERDATAFORMAT_STRING,i_login_accept);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateWPhonePayMark(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_login_accept,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_login_accept;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TwPhonePayMark	sTwPhonePayMark;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE wPhonePayMark a SET %s WHERE a.login_accept=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(total_date  ) ,
                    to_char(login_accept) ,
                    deal_type    ,
                    op_code      ,
                    phone_no     ,
                    to_char(total_point)  ,
                    nvl(chn_type,chr(0))     ,
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0))      ,
                    nvl(back_flag,chr(0))    ,
                    nvl(deal_time,chr(0))
			INTO :sTwPhonePayMark.sTotalDate  ,
                 :sTwPhonePayMark.sLoginAccept,
                 :sTwPhonePayMark.sDealType   ,
                 :sTwPhonePayMark.sOpCode     ,
                 :sTwPhonePayMark.sPhoneNo    ,
                 :sTwPhonePayMark.sTotalPoint ,
                 :sTwPhonePayMark.sChnType    ,
                 :sTwPhonePayMark.sOpTime     ,
                 :sTwPhonePayMark.sBackFlag   ,
                 :sTwPhonePayMark.sDealTime
			FROM wPhonePayMark
			WHERE login_accept = :i_login_accept;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTwPhonePayMark.sTotalDate   );
	Coltrim(sTwPhonePayMark.sLoginAccept );
	Coltrim(sTwPhonePayMark.sDealType    );
	Coltrim(sTwPhonePayMark.sOpCode      );
	Coltrim(sTwPhonePayMark.sPhoneNo     );
	Coltrim(sTwPhonePayMark.sTotalPoint  );
	Coltrim(sTwPhonePayMark.sChnType     );
	Coltrim(sTwPhonePayMark.sOpTime      );
	Coltrim(sTwPhonePayMark.sBackFlag    );
	Coltrim(sTwPhonePayMark.sDealTime    );

	strcpy(v_table_name,"WPHONEPAYMARK");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"login_accept",     ORDERDATAFORMAT_NUMBER,i_login_accept);

	OrderSetDataItem(&vMsgBodyType,"total_date"   ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sTotalDate   );
	OrderSetDataItem(&vMsgBodyType,"login_accept" ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sLoginAccept );
	OrderSetDataItem(&vMsgBodyType,"deal_type"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sDealType    );
	OrderSetDataItem(&vMsgBodyType,"op_code"      ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sOpCode      );
	OrderSetDataItem(&vMsgBodyType,"phone_no"     ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sPhoneNo     );
	OrderSetDataItem(&vMsgBodyType,"total_point"  ,ORDERDATAFORMAT_NUMBER , sTwPhonePayMark.sTotalPoint  );
	OrderSetDataItem(&vMsgBodyType,"chn_type"     ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sChnType     );
	OrderSetDataItem(&vMsgBodyType,"op_time"      ,ORDERDATAFORMAT_DATE   , sTwPhonePayMark.sOpTime      );
	OrderSetDataItem(&vMsgBodyType,"back_flag"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sBackFlag    );
	OrderSetDataItem(&vMsgBodyType,"deal_time"    ,ORDERDATAFORMAT_STRING , sTwPhonePayMark.sDealTime    );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertObspbizInfoMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdObspbizInfoMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdObspbizInfoMsg	sTdObspbizInfoMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdObspbizInfoMsg.sSpid        );
	Coltrim(sTdObspbizInfoMsg.sBizcode     );
	Coltrim(sTdObspbizInfoMsg.sBiztype     );
	Coltrim(sTdObspbizInfoMsg.sBizdesc     );
	Coltrim(sTdObspbizInfoMsg.sAccessmodel );
	Coltrim(sTdObspbizInfoMsg.sPrice       );
	Coltrim(sTdObspbizInfoMsg.sBillingtype );
	Coltrim(sTdObspbizInfoMsg.sBizstatus   );
	Coltrim(sTdObspbizInfoMsg.sProvaddr    );
	Coltrim(sTdObspbizInfoMsg.sProvport    );
	Coltrim(sTdObspbizInfoMsg.sUsagedesc   );
	Coltrim(sTdObspbizInfoMsg.sIntrourl    );
	Coltrim(sTdObspbizInfoMsg.sLocalcode   );
	Coltrim(sTdObspbizInfoMsg.sServattr    );
	Coltrim(sTdObspbizInfoMsg.sServtype    );
	Coltrim(sTdObspbizInfoMsg.sServname    );
	Coltrim(sTdObspbizInfoMsg.sSubmethod   );
	Coltrim(sTdObspbizInfoMsg.sIcpname     );
	Coltrim(sTdObspbizInfoMsg.sServidalias );
	Coltrim(sTdObspbizInfoMsg.sIcpshortname);
	Coltrim(sTdObspbizInfoMsg.sName        );
	Coltrim(sTdObspbizInfoMsg.sFixedline   );

	EXEC SQL INSERT INTO oboss.dObspbizInfoMsg(SPID, BIZCODE, BIZTYPE, BIZDESC, ACCESSMODEL,
	                                     PRICE, BILLINGTYPE, BIZSTATUS, PROVADDR, PROVPORT,
	                                     USAGEDESC, INTROURL, LOCALCODE, SERVATTR, SERVTYPE,
	                                     SERVNAME, SUBMETHOD, ICPNAME, SERVIDALIAS, ICPSHORTNAME,
	                                     NAME, FIXEDLINE)
		VALUES(
			:sTdObspbizInfoMsg.sSpid         ,
			:sTdObspbizInfoMsg.sBizcode      ,
			:sTdObspbizInfoMsg.sBiztype      ,
			:sTdObspbizInfoMsg.sBizdesc      ,
			:sTdObspbizInfoMsg.sAccessmodel  ,
			to_number(:sTdObspbizInfoMsg.sPrice) ,
			:sTdObspbizInfoMsg.sBillingtype  ,
			:sTdObspbizInfoMsg.sBizstatus    ,
			:sTdObspbizInfoMsg.sProvaddr     ,
			:sTdObspbizInfoMsg.sProvport     ,
			:sTdObspbizInfoMsg.sUsagedesc    ,
			:sTdObspbizInfoMsg.sIntrourl     ,
			:sTdObspbizInfoMsg.sLocalcode    ,
			:sTdObspbizInfoMsg.sServattr     ,
			:sTdObspbizInfoMsg.sServtype     ,
			:sTdObspbizInfoMsg.sServname     ,
			:sTdObspbizInfoMsg.sSubmethod    ,
			:sTdObspbizInfoMsg.sIcpname      ,
			:sTdObspbizInfoMsg.sServidalias  ,
			:sTdObspbizInfoMsg.sIcpshortname ,
			:sTdObspbizInfoMsg.sName         ,
			:sTdObspbizInfoMsg.sFixedline
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DOBSPBIZINFOMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"spid"         , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sSpid           );
	OrderSetDataItem(&vMsgBodyType,"bizcode"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizcode        );
	OrderSetDataItem(&vMsgBodyType,"biztype"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBiztype        );
	OrderSetDataItem(&vMsgBodyType,"bizdesc"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizdesc        );
	OrderSetDataItem(&vMsgBodyType,"accessmodel"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sAccessmodel    );
	OrderSetDataItem(&vMsgBodyType,"price"        , ORDERDATAFORMAT_NUMBER, sTdObspbizInfoMsg.sPrice          );
	OrderSetDataItem(&vMsgBodyType,"billingtype"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBillingtype    );
	OrderSetDataItem(&vMsgBodyType,"bizstatus"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizstatus      );
	OrderSetDataItem(&vMsgBodyType,"provaddr"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sProvaddr       );
	OrderSetDataItem(&vMsgBodyType,"provport"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sProvport       );
	OrderSetDataItem(&vMsgBodyType,"usagedesc"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sUsagedesc      );
	OrderSetDataItem(&vMsgBodyType,"introurl"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIntrourl       );
	OrderSetDataItem(&vMsgBodyType,"localcode"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sLocalcode      );
	OrderSetDataItem(&vMsgBodyType,"servattr"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServattr       );
	OrderSetDataItem(&vMsgBodyType,"servtype"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServtype       );
	OrderSetDataItem(&vMsgBodyType,"servname"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServname       );
	OrderSetDataItem(&vMsgBodyType,"submethod"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sSubmethod      );
	OrderSetDataItem(&vMsgBodyType,"icpname"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIcpname        );
	OrderSetDataItem(&vMsgBodyType,"servidalias"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServidalias    );
	OrderSetDataItem(&vMsgBodyType,"icpshortname" , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIcpshortname   );
	OrderSetDataItem(&vMsgBodyType,"name"         , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sName           );
	OrderSetDataItem(&vMsgBodyType,"fixedline"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sFixedline      );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteObspbizInfoMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdObspbizInfoMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE oboss.dObspbizInfoMsg a WHERE a.spid=:NG_Param0 \
	        and a.bizcode=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DOBSPBIZINFOMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"spid",	ORDERDATAFORMAT_STRING,oldIndex.sSpid);
	OrderSetPrimaryKey(&vMsgBodyType,"bizcode",	ORDERDATAFORMAT_STRING,oldIndex.sBizcode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateObspbizInfoMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdObspbizInfoMsgIndex oldIndex;
TdObspbizInfoMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdObspbizInfoMsg	sTdObspbizInfoMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE oboss.dObspbizInfoMsg a SET %s WHERE a.spid=:NG_Param0 and a.bizcode=:NG_Param1 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT spid,
             bizcode,
             nvl(biztype,chr(0)),
             nvl(bizdesc,chr(0)),
             nvl(accessmodel,chr(0)),
             nvl(to_char(price),chr(0)),
             nvl(billingtype,chr(0)),
             bizstatus,
             nvl(provaddr,chr(0)),
             nvl(provport,chr(0)),
             nvl(usagedesc,chr(0)),
             nvl(introurl,chr(0)),
             localcode,
             nvl(servattr,chr(0)),
             nvl(servtype,chr(0)),
             nvl(servname,chr(0)),
             nvl(submethod,chr(0)),
             nvl(icpname,chr(0)),
             nvl(servidalias,chr(0)),
             nvl(icpshortname,chr(0)),
             nvl(name,chr(0)),
             nvl(fixedline,chr(0))
			   INTO :sTdObspbizInfoMsg.sSpid        ,
                    :sTdObspbizInfoMsg.sBizcode     ,
                    :sTdObspbizInfoMsg.sBiztype     ,
                    :sTdObspbizInfoMsg.sBizdesc     ,
                    :sTdObspbizInfoMsg.sAccessmodel ,
                    :sTdObspbizInfoMsg.sPrice       ,
                    :sTdObspbizInfoMsg.sBillingtype ,
                    :sTdObspbizInfoMsg.sBizstatus   ,
                    :sTdObspbizInfoMsg.sProvaddr    ,
                    :sTdObspbizInfoMsg.sProvport    ,
                    :sTdObspbizInfoMsg.sUsagedesc   ,
                    :sTdObspbizInfoMsg.sIntrourl    ,
                    :sTdObspbizInfoMsg.sLocalcode   ,
                    :sTdObspbizInfoMsg.sServattr    ,
                    :sTdObspbizInfoMsg.sServtype    ,
                    :sTdObspbizInfoMsg.sServname    ,
                    :sTdObspbizInfoMsg.sSubmethod   ,
                    :sTdObspbizInfoMsg.sIcpname     ,
                    :sTdObspbizInfoMsg.sServidalias ,
                    :sTdObspbizInfoMsg.sIcpshortname,
                    :sTdObspbizInfoMsg.sName        ,
                    :sTdObspbizInfoMsg.sFixedline
			   FROM oboss.dObspbizInfoMsg
			  WHERE spid = :newIndex.sSpid and bizcode=:newIndex.sBizcode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdObspbizInfoMsg.sSpid        );
	Coltrim(sTdObspbizInfoMsg.sBizcode     );
	Coltrim(sTdObspbizInfoMsg.sBiztype     );
	Coltrim(sTdObspbizInfoMsg.sBizdesc     );
	Coltrim(sTdObspbizInfoMsg.sAccessmodel );
	Coltrim(sTdObspbizInfoMsg.sPrice       );
	Coltrim(sTdObspbizInfoMsg.sBillingtype );
	Coltrim(sTdObspbizInfoMsg.sBizstatus   );
	Coltrim(sTdObspbizInfoMsg.sProvaddr    );
	Coltrim(sTdObspbizInfoMsg.sProvport    );
	Coltrim(sTdObspbizInfoMsg.sUsagedesc   );
	Coltrim(sTdObspbizInfoMsg.sIntrourl    );
	Coltrim(sTdObspbizInfoMsg.sLocalcode   );
	Coltrim(sTdObspbizInfoMsg.sServattr    );
	Coltrim(sTdObspbizInfoMsg.sServtype    );
	Coltrim(sTdObspbizInfoMsg.sServname    );
	Coltrim(sTdObspbizInfoMsg.sSubmethod   );
	Coltrim(sTdObspbizInfoMsg.sIcpname     );
	Coltrim(sTdObspbizInfoMsg.sServidalias );
	Coltrim(sTdObspbizInfoMsg.sIcpshortname);
	Coltrim(sTdObspbizInfoMsg.sName        );
	Coltrim(sTdObspbizInfoMsg.sFixedline   );


	strcpy(v_table_name,"DOBSPBIZINFOMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"spid",	ORDERDATAFORMAT_STRING,oldIndex.sSpid);
	OrderSetPrimaryKey(&vMsgBodyType,"bizcode",	ORDERDATAFORMAT_STRING,oldIndex.sBizcode);

	OrderSetDataItem(&vMsgBodyType,"spid"         , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sSpid           );
	OrderSetDataItem(&vMsgBodyType,"bizcode"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizcode        );
	OrderSetDataItem(&vMsgBodyType,"biztype"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBiztype        );
	OrderSetDataItem(&vMsgBodyType,"bizdesc"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizdesc        );
	OrderSetDataItem(&vMsgBodyType,"accessmodel"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sAccessmodel    );
	OrderSetDataItem(&vMsgBodyType,"price"        , ORDERDATAFORMAT_NUMBER, sTdObspbizInfoMsg.sPrice          );
	OrderSetDataItem(&vMsgBodyType,"billingtype"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBillingtype    );
	OrderSetDataItem(&vMsgBodyType,"bizstatus"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sBizstatus      );
	OrderSetDataItem(&vMsgBodyType,"provaddr"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sProvaddr       );
	OrderSetDataItem(&vMsgBodyType,"provport"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sProvport       );
	OrderSetDataItem(&vMsgBodyType,"usagedesc"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sUsagedesc      );
	OrderSetDataItem(&vMsgBodyType,"introurl"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIntrourl       );
	OrderSetDataItem(&vMsgBodyType,"localcode"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sLocalcode      );
	OrderSetDataItem(&vMsgBodyType,"servattr"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServattr       );
	OrderSetDataItem(&vMsgBodyType,"servtype"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServtype       );
	OrderSetDataItem(&vMsgBodyType,"servname"     , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServname       );
	OrderSetDataItem(&vMsgBodyType,"submethod"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sSubmethod      );
	OrderSetDataItem(&vMsgBodyType,"icpname"      , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIcpname        );
	OrderSetDataItem(&vMsgBodyType,"servidalias"  , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sServidalias    );
	OrderSetDataItem(&vMsgBodyType,"icpshortname" , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sIcpshortname   );
	OrderSetDataItem(&vMsgBodyType,"name"         , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sName           );
	OrderSetDataItem(&vMsgBodyType,"fixedline"    , ORDERDATAFORMAT_STRING, sTdObspbizInfoMsg.sFixedline      );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertMobileInfoMsg(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tdMobileInfoMsg
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMobileInfoMsg tdMobileInfoMsg;
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];										/*表名称*/

	Coltrim(i_sendid_no);

	Coltrim(tdMobileInfoMsg.sMsisdn     );
	Coltrim(tdMobileInfoMsg.sSwitchType );
	Coltrim(tdMobileInfoMsg.sBeginTime  );
	Coltrim(tdMobileInfoMsg.sEndTime    );
	Coltrim(tdMobileInfoMsg.sIdNo       );
	Coltrim(tdMobileInfoMsg.sOpTime     );
	Coltrim(tdMobileInfoMsg.sLoginAccept);
	Coltrim(tdMobileInfoMsg.sLoginNo    );
	Coltrim(tdMobileInfoMsg.sOpNote     );

	EXEC SQL INSERT INTO dMobileInfoMsg(msisdn, switch_type, begin_time, end_time,
	                                    id_no, op_time, login_accept, login_no, op_note)
		     				  VALUES(:tdMobileInfoMsg.sMsisdn     ,
                                     :tdMobileInfoMsg.sSwitchType ,
                                     to_date(:tdMobileInfoMsg.sBeginTime,'yyyymmdd hh24:mi:ss')  ,
                                     to_date(:tdMobileInfoMsg.sEndTime  ,'yyyymmdd hh24:mi:ss')  ,
                                     to_number(:tdMobileInfoMsg.sIdNo)       ,
                                     to_date(:tdMobileInfoMsg.sOpTime ,'yyyymmdd hh24:mi:ss')    ,
                                     to_number(:tdMobileInfoMsg.sLoginAccept),
                                     :tdMobileInfoMsg.sLoginNo    ,
                                     :tdMobileInfoMsg.sOpNote
		     				  );
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DMOBILEINFOMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "msisdn"      ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sMsisdn     );
	OrderSetDataItem(&vMsgBodyType, "switch_type" ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sSwitchType );
	OrderSetDataItem(&vMsgBodyType, "begin_time"  ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sBeginTime  );
	OrderSetDataItem(&vMsgBodyType, "end_time"    ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sEndTime    );
	OrderSetDataItem(&vMsgBodyType, "id_no"       ,ORDERDATAFORMAT_NUMBER, tdMobileInfoMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "op_time"     ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_accept",ORDERDATAFORMAT_NUMBER, tdMobileInfoMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "login_no"    ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "op_note"     ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sOpNote     );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}

int OrderUpdateMobileInfoMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMobileInfoMsgIndex oldIndex;
TdMobileInfoMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	int i = 0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdMobileInfoMsg	tdMobileInfoMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dMobileInfoMsg SET %s WHERE msisdn=rpad(:NG_Param1,15,' ') \
	and switch_type=rpad(:NG_Param2,4,' ') and begin_time=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') %s ", i_update_sql, i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	printf("v_ret=%d,v_sql_buff=[%s] [%s]\n", v_ret, v_sql_buff, SQLERRMSG);

	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT msisdn        ,
                    switch_type   ,
                    to_char(begin_time,'yyyymmdd hh24:mi:ss')    ,
                    to_char(end_time  ,'yyyymmdd hh24:mi:ss')    ,
                    to_char(id_no)        ,
                    to_char(op_time  ,'yyyymmdd hh24:mi:ss')     ,
                    to_char(login_accept)  ,
                    login_no      ,
                    nvl(op_note,chr(0))
			   INTO :tdMobileInfoMsg.sMsisdn     ,
                    :tdMobileInfoMsg.sSwitchType ,
                    :tdMobileInfoMsg.sBeginTime  ,
                    :tdMobileInfoMsg.sEndTime    ,
                    :tdMobileInfoMsg.sIdNo       ,
                    :tdMobileInfoMsg.sOpTime     ,
                    :tdMobileInfoMsg.sLoginAccept,
                    :tdMobileInfoMsg.sLoginNo    ,
                    :tdMobileInfoMsg.sOpNote
			   FROM dMobileInfoMsg
			  WHERE msisdn=:newIndex.sMsisdn and switch_type=:newIndex.sSwitchType
			  	and begin_time=to_date(:newIndex.sBeginTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500137;
	}

	Coltrim(tdMobileInfoMsg.sMsisdn     );
	Coltrim(tdMobileInfoMsg.sSwitchType );
	Coltrim(tdMobileInfoMsg.sBeginTime  );
	Coltrim(tdMobileInfoMsg.sEndTime    );
	Coltrim(tdMobileInfoMsg.sIdNo       );
	Coltrim(tdMobileInfoMsg.sOpTime     );
	Coltrim(tdMobileInfoMsg.sLoginAccept);
	Coltrim(tdMobileInfoMsg.sLoginNo    );
	Coltrim(tdMobileInfoMsg.sOpNote     );

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DMOBILEINFOMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "switch_type", ORDERDATAFORMAT_STRING, oldIndex.sSwitchType);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sBeginTime);

	OrderSetDataItem(&vMsgBodyType, "msisdn"      ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sMsisdn     );
	OrderSetDataItem(&vMsgBodyType, "switch_type" ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sSwitchType );
	OrderSetDataItem(&vMsgBodyType, "begin_time"  ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sBeginTime  );
	OrderSetDataItem(&vMsgBodyType, "end_time"    ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sEndTime    );
	OrderSetDataItem(&vMsgBodyType, "id_no"       ,ORDERDATAFORMAT_NUMBER, tdMobileInfoMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "op_time"     ,ORDERDATAFORMAT_DATE  , tdMobileInfoMsg.sOpTime     );
	OrderSetDataItem(&vMsgBodyType, "login_accept",ORDERDATAFORMAT_NUMBER, tdMobileInfoMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "login_no"    ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "op_note"     ,ORDERDATAFORMAT_STRING, tdMobileInfoMsg.sOpNote     );

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

int OrderDeleteMobileInfoMsg(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMobileInfoMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char 		v_table_name[DLTABLENAME];							/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE dMobileInfoMsg a WHERE a.msisdn=rpad(:NG_Param0,15,' ') \
	and a.switch_type=rpad(:NG_Param1,4,' ') and a.begin_time=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
	%s ", i_where_sql);
	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DMOBILEINFOMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "msisdn",		 ORDERDATAFORMAT_STRING, oldIndex.sMsisdn);
	OrderSetPrimaryKey(&vMsgBodyType, "switch_type",   ORDERDATAFORMAT_STRING, oldIndex.sSwitchType);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time",	 ORDERDATAFORMAT_DATE,   oldIndex.sBeginTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}

int OrderInsertAccountIdInfo(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdAccountIdInfo
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdAccountIdInfo	sTdAccountIdInfo;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdAccountIdInfo.sMsisdn     );
	Coltrim(sTdAccountIdInfo.sServiceType);
	Coltrim(sTdAccountIdInfo.sServiceNo  );
	Coltrim(sTdAccountIdInfo.sRunCode    );
	Coltrim(sTdAccountIdInfo.sRunTime    );
	Coltrim(sTdAccountIdInfo.sInnetTime  );
	Coltrim(sTdAccountIdInfo.sNote       );

	EXEC SQL INSERT INTO dAccountIdInfo(MSISDN, SERVICE_TYPE, SERVICE_NO, RUN_CODE, RUN_TIME, INNET_TIME, NOTE)
		     VALUES(
		            :sTdAccountIdInfo.sMsisdn          ,
					:sTdAccountIdInfo.sServiceType     ,
					:sTdAccountIdInfo.sServiceNo       ,
					:sTdAccountIdInfo.sRunCode         ,
					to_date(:sTdAccountIdInfo.sRunTime,'YYYYMMDD HH24:MI:SS')          ,
					to_date(:sTdAccountIdInfo.sInnetTime,'YYYYMMDD HH24:MI:SS')       ,
					:sTdAccountIdInfo.sNote
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DACCOUNTIDINFO");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"msisdn",       ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sMsisdn);
	OrderSetDataItem(&vMsgBodyType,"service_type", ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sServiceType);
	OrderSetDataItem(&vMsgBodyType,"service_no",   ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sServiceNo);
	OrderSetDataItem(&vMsgBodyType,"run_code",     ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",     ORDERDATAFORMAT_DATE,   sTdAccountIdInfo.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"innet_time",   ORDERDATAFORMAT_DATE,   sTdAccountIdInfo.sInnetTime);
	OrderSetDataItem(&vMsgBodyType,"note"      ,   ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sNote);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteAccountIdInfo(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_msisdn,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_msisdn;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dAccountIdInfo a WHERE a.msisdn=rpad(:NG_Param0,15) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DACCOUNTIDINFO");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"msisdn",ORDERDATAFORMAT_STRING,i_msisdn);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateAccountIdInfo(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_msisdn,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_msisdn;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdAccountIdInfo	sTdAccountIdInfo;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dAccountIdInfo a SET %s WHERE a.msisdn=rpad(:NG_Param0,15) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT msisdn,
                    service_type,
                    service_no,
                    run_code,
                    to_char(run_time,'YYYYMMDD HH24:MI:SS'),
                    to_char(innet_time,'YYYYMMDD HH24:MI:SS'),
                    nvl(note,chr(0))
			INTO :sTdAccountIdInfo.sMsisdn          ,
                 :sTdAccountIdInfo.sServiceType     ,
                 :sTdAccountIdInfo.sServiceNo       ,
                 :sTdAccountIdInfo.sRunCode         ,
                 :sTdAccountIdInfo.sRunTime          ,
                 :sTdAccountIdInfo.sInnetTime       ,
                 :sTdAccountIdInfo.sNote
			FROM dAccountIdInfo
			WHERE msisdn = :i_msisdn;

	if (SQLCODE!=SQLOK)
		return -500037;

     Coltrim(sTdAccountIdInfo.sMsisdn      );
     Coltrim(sTdAccountIdInfo.sServiceType );
     Coltrim(sTdAccountIdInfo.sServiceNo   );
     Coltrim(sTdAccountIdInfo.sRunCode     );
     Coltrim(sTdAccountIdInfo.sRunTime     );
     Coltrim(sTdAccountIdInfo.sInnetTime   );
     Coltrim(sTdAccountIdInfo.sNote        );

	strcpy(v_table_name,"DACCOUNTIDINFO");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"msisdn",     ORDERDATAFORMAT_NUMBER,i_msisdn);

	OrderSetDataItem(&vMsgBodyType,"msisdn",       ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sMsisdn);
	OrderSetDataItem(&vMsgBodyType,"service_type", ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sServiceType);
	OrderSetDataItem(&vMsgBodyType,"service_no",   ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sServiceNo);
	OrderSetDataItem(&vMsgBodyType,"run_code",     ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",     ORDERDATAFORMAT_DATE,   sTdAccountIdInfo.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"innet_time",   ORDERDATAFORMAT_DATE,   sTdAccountIdInfo.sInnetTime);
	OrderSetDataItem(&vMsgBodyType,"note"      ,   ORDERDATAFORMAT_STRING, sTdAccountIdInfo.sNote);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertWPhoneImsiRent(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTwPhoneImsiRent
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwPhoneImsiRent	sTwPhoneImsiRent;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwPhoneImsiRent.sLocalImsi   );
	Coltrim(sTwPhoneImsiRent.sLocalPhone  );
	Coltrim(sTwPhoneImsiRent.sRoamPhone   );
	Coltrim(sTwPhoneImsiRent.sStartDate);
	Coltrim(sTwPhoneImsiRent.sEndDate  );
	Coltrim(sTwPhoneImsiRent.sFlag);
	Coltrim(sTwPhoneImsiRent.sOpTime  );

	EXEC SQL INSERT INTO wPhoneImsiRent
	                    (LOCAL_IMSI, LOCAL_PHONE, ROAM_PHONE, START_DATE, END_DATE, FLAG, OP_TIME)
		     VALUES(
		            :sTwPhoneImsiRent.sLocalImsi   ,
					:sTwPhoneImsiRent.sLocalPhone  ,
					:sTwPhoneImsiRent.sRoamPhone   ,
					to_date(:sTwPhoneImsiRent.sStartDate,'yyyymmdd hh24:mi:ss'),
					to_date(:sTwPhoneImsiRent.sEndDate  ,'yyyymmdd hh24:mi:ss'),
					:sTwPhoneImsiRent.sFlag,
					to_date(:sTwPhoneImsiRent.sOpTime,'yyyymmdd hh24:mi:ss')
		           );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"WPHONEIMSIRENT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"LOCAL_IMSI"    ,ORDERDATAFORMAT_STRING, sTwPhoneImsiRent.sLocalImsi   );
	OrderSetDataItem(&vMsgBodyType,"LOCAL_PHONE"   ,ORDERDATAFORMAT_STRING, sTwPhoneImsiRent.sLocalPhone  );
	OrderSetDataItem(&vMsgBodyType,"ROAM_PHONE"    ,ORDERDATAFORMAT_STRING, sTwPhoneImsiRent.sRoamPhone   );
	OrderSetDataItem(&vMsgBodyType,"START_DATE" ,ORDERDATAFORMAT_DATE,   	sTwPhoneImsiRent.sStartDate);
	OrderSetDataItem(&vMsgBodyType,"END_DATE"   ,ORDERDATAFORMAT_DATE,   	sTwPhoneImsiRent.sEndDate  );
	OrderSetDataItem(&vMsgBodyType,"FLAG" 		,ORDERDATAFORMAT_STRING,    sTwPhoneImsiRent.sFlag);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME"    ,ORDERDATAFORMAT_DATE,  	sTwPhoneImsiRent.sOpTime  );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderInsertCustBillQryReq(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustBillQryReq
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustBillQryReq	sTdCustBillQryReq;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdCustBillQryReq.sIdNo);
	Coltrim(sTdCustBillQryReq.sOpCode);
	Coltrim(sTdCustBillQryReq.sQryFlag);
	Coltrim(sTdCustBillQryReq.sQryNote);

	EXEC SQL INSERT INTO dCustBillQryReq(ID_NO, OP_CODE, QRY_FLAG, QRY_NOTE)
		     VALUES(to_number(:sTdCustBillQryReq.sIdNo),
		     	           :sTdCustBillQryReq.sOpCode,
		     	           :sTdCustBillQryReq.sQryFlag,
		     	    	  :sTdCustBillQryReq.sQryNote);

	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE != -1))
		return -500030;


	strcpy(v_table_name,"DCUSTBILLQRYREQ");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustBillQryReq.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"op_code",	ORDERDATAFORMAT_STRING,sTdCustBillQryReq.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"qry_flag",	ORDERDATAFORMAT_STRING,sTdCustBillQryReq.sQryFlag);
	OrderSetDataItem(&vMsgBodyType,"qry_note",   ORDERDATAFORMAT_STRING,  sTdCustBillQryReq.sQryNote);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}


int OrderDeleteCustBillQryReq(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustBillQryReqIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	init(v_sql_buff);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff,"DELETE DCUSTBILLQRYREQ WHERE id_no=to_number(:NG_Param0) and op_code=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTBILLQRYREQ");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"op_code",  ORDERDATAFORMAT_STRING,oldIndex.sOpCode);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateCustBillQryReq(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustBillQryReqIndex oldIndex;
TdCustBillQryReqIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustBillQryReq	sTdCustBillQryReq;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);

	Coltrim(i_sendid_no);
	Coltrim(newIndex.sIdNo);

	sprintf(v_sql_buff,"UPDATE dCustBillQryReq a SET %s WHERE a.id_no=to_number(:NG_Param0) and a.op_code=:NG_Param1 %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),OP_CODE, QRY_FLAG, QRY_NOTE
			   INTO :sTdCustBillQryReq.sIdNo,
			   	    :sTdCustBillQryReq.sOpCode,
			   	    :sTdCustBillQryReq.sQryFlag,
			   	    :sTdCustBillQryReq.sQryNote
			   FROM dCustBillQryReq
			  WHERE id_no = to_number(:newIndex.sIdNo) and op_code = :newIndex.sOpCode;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdCustBillQryReq.sIdNo);
	Coltrim(sTdCustBillQryReq.sOpCode);
	Coltrim(sTdCustBillQryReq.sQryFlag);
	Coltrim(sTdCustBillQryReq.sQryNote);


	strcpy(v_table_name,"DCUSTBILLQRYREQ");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"op_code",ORDERDATAFORMAT_STRING,oldIndex.sOpCode);

	OrderSetDataItem(&vMsgBodyType,"id_no",        ORDERDATAFORMAT_NUMBER,sTdCustBillQryReq.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"op_code",	ORDERDATAFORMAT_STRING,sTdCustBillQryReq.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"qry_flag",	ORDERDATAFORMAT_STRING,sTdCustBillQryReq.sQryFlag);
	OrderSetDataItem(&vMsgBodyType,"qry_note",   ORDERDATAFORMAT_STRING,  sTdCustBillQryReq.sQryNote);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}




/*
函数名称：OrderInsertFamilyInfo
功能描述：向dFamilyInfo插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdFamilyInfo    以表dFamilyInfo建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderInsertFamilyInfo(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdFamilyInfo)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyInfo sTdFamilyInfo;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdFamilyInfo.sFamilyId);
	Coltrim(sTdFamilyInfo.sCust_id);
	Coltrim(sTdFamilyInfo.sPhoneNo);
	Coltrim(sTdFamilyInfo.sUserNum);
	Coltrim(sTdFamilyInfo.sFamilyIncome);
	Coltrim(sTdFamilyInfo.sOtherProduct);
	Coltrim(sTdFamilyInfo.sHomePayNo);
	Coltrim(sTdFamilyInfo.sPayMoney);
	Coltrim(sTdFamilyInfo.sComputerNum);
	Coltrim(sTdFamilyInfo.sIntranet);
	Coltrim(sTdFamilyInfo.sOtherQuip);
	Coltrim(sTdFamilyInfo.sLoveService);
	Coltrim(sTdFamilyInfo.sApplyFee);
	Coltrim(sTdFamilyInfo.sApplyNum);
	Coltrim(sTdFamilyInfo.sLikeRedound);
	Coltrim(sTdFamilyInfo.sSemaphore);
	Coltrim(sTdFamilyInfo.sAverageFee);
	Coltrim(sTdFamilyInfo.sFinishFlag);
	Coltrim(sTdFamilyInfo.sBeginTime);
	Coltrim(sTdFamilyInfo.sEndTime);
	Coltrim(sTdFamilyInfo.sBak1);
	Coltrim(sTdFamilyInfo.sBak2);
	Coltrim(sTdFamilyInfo.sBak3);
	Coltrim(sTdFamilyInfo.sOpTime);
	Coltrim(sTdFamilyInfo.sLoginAccept);
	Coltrim(sTdFamilyInfo.sConFlag);

	EXEC SQL INSERT INTO dFamilyInfo(family_id,
										cust_id,
										phone_no,
										current_user_num,
										family_income,
										OTHERPRODUCT_INFO,
										HOME_PAY_NO,
										PAY_MONEY,
										COMPUTER_NUM,
										INTRANET_INFO,
										OTHEREQUIP_INFO,
										LOVE_SERVICE,
										APPLY_FEE,
										APPLY_NUM,
										MOST_LIKE_REDOUND,
										SEMAPHORE_INFO,
										AVERAGE_FEE,
										FINISH_FLAG,
										begin_time,
										end_time,
										bak1,
										bak2,
										bak3,
										op_time,
										login_accept,
										CON_FLAG)
	VALUES(to_number(:sTdFamilyInfo.sFamilyId),
			to_number(:sTdFamilyInfo.sCust_id),
			:sTdFamilyInfo.sPhoneNo,
			to_number(:sTdFamilyInfo.sUserNum),
			to_number(:sTdFamilyInfo.sFamilyIncome),
			:sTdFamilyInfo.sOtherProduct,
			to_number(:sTdFamilyInfo.sHomePayNo),
			to_number(:sTdFamilyInfo.sPayMoney),
			to_number(:sTdFamilyInfo.sComputerNum),
			:sTdFamilyInfo.sIntranet,
			:sTdFamilyInfo.sOtherQuip,
			:sTdFamilyInfo.sLoveService,
			to_number(:sTdFamilyInfo.sApplyFee),
			to_number(:sTdFamilyInfo.sApplyNum),
			:sTdFamilyInfo.sLikeRedound,
			:sTdFamilyInfo.sSemaphore,
			to_number(:sTdFamilyInfo.sAverageFee),
			:sTdFamilyInfo.sFinishFlag,
			to_date(:sTdFamilyInfo.sBeginTime,'yyyymmdd hh24:mi:ss'),
			to_date(:sTdFamilyInfo.sEndTime,'yyyymmdd hh24:mi:ss'),
			:sTdFamilyInfo.sBak1,
			:sTdFamilyInfo.sBak2,
			:sTdFamilyInfo.sBak3,
			to_date(:sTdFamilyInfo.sOpTime,'yyyymmdd hh24:mi:ss'),
			to_number(:sTdFamilyInfo.sLoginAccept),
			:sTdFamilyInfo.sConFlag);
	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"DFAMILYINFO");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"family_id",      ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sFamilyId);
	OrderSetDataItem(&vMsgBodyType,"cust_id",     ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sCust_id);
	OrderSetDataItem(&vMsgBodyType,"phone_no",     ORDERDATAFORMAT_STRING, sTdFamilyInfo.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"current_user_num",ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sUserNum);
	OrderSetDataItem(&vMsgBodyType,"family_income",    ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sFamilyIncome);
	OrderSetDataItem(&vMsgBodyType,"otherproduct_info",    ORDERDATAFORMAT_STRING, sTdFamilyInfo.sOtherProduct);
	OrderSetDataItem(&vMsgBodyType,"home_pay_no",   ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sHomePayNo);
	OrderSetDataItem(&vMsgBodyType,"pay_money",      ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sPayMoney);
	OrderSetDataItem(&vMsgBodyType,"computer_num",     ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sComputerNum);
	OrderSetDataItem(&vMsgBodyType,"intranet_info",     ORDERDATAFORMAT_STRING,   sTdFamilyInfo.sIntranet);
	OrderSetDataItem(&vMsgBodyType,"otherequip_info",ORDERDATAFORMAT_STRING, sTdFamilyInfo.sOtherQuip);
	OrderSetDataItem(&vMsgBodyType,"love_service",    ORDERDATAFORMAT_STRING, sTdFamilyInfo.sLoveService);
	OrderSetDataItem(&vMsgBodyType,"apply_fee",    ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sApplyFee);
	OrderSetDataItem(&vMsgBodyType,"apply_num",   ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sApplyNum);
	OrderSetDataItem(&vMsgBodyType,"most_like_redound",      ORDERDATAFORMAT_STRING, sTdFamilyInfo.sLikeRedound);
	OrderSetDataItem(&vMsgBodyType,"semaphore_info",     ORDERDATAFORMAT_STRING, sTdFamilyInfo.sSemaphore);
	OrderSetDataItem(&vMsgBodyType,"average_fee",      ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sAverageFee);
	OrderSetDataItem(&vMsgBodyType,"finish_flag",     ORDERDATAFORMAT_STRING, sTdFamilyInfo.sFinishFlag);
	OrderSetDataItem(&vMsgBodyType,"begin_time",     ORDERDATAFORMAT_DATE,   sTdFamilyInfo.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",     ORDERDATAFORMAT_DATE, sTdFamilyInfo.sEndTime);
	OrderSetDataItem(&vMsgBodyType,"bak1",    ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak1);
	OrderSetDataItem(&vMsgBodyType,"bak2",    ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak2);
	OrderSetDataItem(&vMsgBodyType,"bak3",   ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak3);
	OrderSetDataItem(&vMsgBodyType,"op_time",    ORDERDATAFORMAT_DATE, sTdFamilyInfo.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"login_accept",   ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sLoginAccept);
  OrderSetDataItem(&vMsgBodyType,"CON_FLAG",   ORDERDATAFORMAT_STRING, sTdFamilyInfo.sConFlag);
	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500081;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500082;
	}

	return 0;
}
/*
函数名称：OrderUpdateFamilyInfo
功能描述：向dFamilyInfo更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderUpdateFamilyInfo(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_family_id,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_family_id;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdFamilyInfo	sTdFamilyInfo;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dFamilyInfo a SET %s WHERE a.family_id=to_number(:NG_Param0) %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500083;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(family_id), to_char(cust_id), phone_no, nvl(to_char(current_user_num),chr(0)),
	        nvl(to_char(family_income),chr(0)),nvl(otherproduct_info,chr(0)), nvl(to_char(home_pay_no),chr(0)),
	        nvl(to_char(pay_money),chr(0)), nvl(to_char(computer_num),chr(0)),nvl(intranet_info,chr(0)),
	        nvl(otherequip_info,chr(0)),nvl(love_service,chr(0)), nvl(to_char(apply_fee),chr(0)),
	        nvl(to_char(apply_num),chr(0)),nvl(most_like_redound,chr(0)),nvl(semaphore_info,chr(0)),
	        nvl(to_char(average_fee),chr(0)),finish_flag,to_char(begin_time,'yyyymmdd hh24:mi:ss'),
	        to_char(end_time,'yyyymmdd hh24:mi:ss'),nvl(bak1,chr(0)),nvl(bak2,chr(0)),nvl(bak3,chr(0)),
	        to_char(op_time,'yyyymmdd hh24:mi:ss'),to_char(login_accept),nvl(con_flag,chr(0))
			   INTO :sTdFamilyInfo.sFamilyId, :sTdFamilyInfo.sCust_id, :sTdFamilyInfo.sPhoneNo, :sTdFamilyInfo.sUserNum,
			   		:sTdFamilyInfo.sFamilyIncome, :sTdFamilyInfo.sOtherProduct, :sTdFamilyInfo.sHomePayNo,
			   		:sTdFamilyInfo.sPayMoney, :sTdFamilyInfo.sComputerNum, :sTdFamilyInfo.sIntranet,
			   		:sTdFamilyInfo.sOtherQuip, :sTdFamilyInfo.sLoveService,:sTdFamilyInfo.sApplyFee,
			   		:sTdFamilyInfo.sApplyNum, :sTdFamilyInfo.sLikeRedound,:sTdFamilyInfo.sSemaphore,:sTdFamilyInfo.sAverageFee,
			   		:sTdFamilyInfo.sFinishFlag,:sTdFamilyInfo.sBeginTime,:sTdFamilyInfo.sEndTime,:sTdFamilyInfo.sBak1,
			   		:sTdFamilyInfo.sBak2,:sTdFamilyInfo.sBak3,:sTdFamilyInfo.sOpTime,:sTdFamilyInfo.sLoginAccept,
			   		:sTdFamilyInfo.sConFlag
			   FROM dFamilyInfo
			  WHERE family_id=:i_family_id;

	if (SQLCODE != SQLOK)
	{
		return -500084;
	}

	Coltrim(sTdFamilyInfo.sFamilyId);
	Coltrim(sTdFamilyInfo.sCust_id);
	Coltrim(sTdFamilyInfo.sPhoneNo);
	Coltrim(sTdFamilyInfo.sUserNum);
	Coltrim(sTdFamilyInfo.sFamilyIncome);
	Coltrim(sTdFamilyInfo.sOtherProduct);
	Coltrim(sTdFamilyInfo.sHomePayNo);
	Coltrim(sTdFamilyInfo.sPayMoney);
	Coltrim(sTdFamilyInfo.sComputerNum);
	Coltrim(sTdFamilyInfo.sIntranet);
	Coltrim(sTdFamilyInfo.sOtherQuip);
	Coltrim(sTdFamilyInfo.sLoveService);
	Coltrim(sTdFamilyInfo.sApplyFee);
	Coltrim(sTdFamilyInfo.sApplyNum);
	Coltrim(sTdFamilyInfo.sLikeRedound);
	Coltrim(sTdFamilyInfo.sSemaphore);
	Coltrim(sTdFamilyInfo.sAverageFee);
	Coltrim(sTdFamilyInfo.sFinishFlag);
	Coltrim(sTdFamilyInfo.sBeginTime);
	Coltrim(sTdFamilyInfo.sEndTime);
	Coltrim(sTdFamilyInfo.sBak1);
	Coltrim(sTdFamilyInfo.sBak2);
	Coltrim(sTdFamilyInfo.sBak3);
	Coltrim(sTdFamilyInfo.sOpTime);
	Coltrim(sTdFamilyInfo.sLoginAccept);
	Coltrim(sTdFamilyInfo.sConFlag);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DFAMILYINFO");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "family_id",		 ORDERDATAFORMAT_NUMBER, i_family_id);

	OrderSetDataItem(&vMsgBodyType, "family_id",		 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sFamilyId);
	OrderSetDataItem(&vMsgBodyType, "cust_id",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sCust_id);
	OrderSetDataItem(&vMsgBodyType, "phone_no",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "current_user_num",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sUserNum);
	OrderSetDataItem(&vMsgBodyType, "family_income",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sFamilyIncome);
	OrderSetDataItem(&vMsgBodyType, "otherproduct_info",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sOtherProduct);
	OrderSetDataItem(&vMsgBodyType, "home_pay_no",		 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sHomePayNo);
	OrderSetDataItem(&vMsgBodyType, "pay_money",		 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sPayMoney);
	OrderSetDataItem(&vMsgBodyType, "computer_num",		 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sComputerNum);
	OrderSetDataItem(&vMsgBodyType, "intranet_info",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sIntranet);
	OrderSetDataItem(&vMsgBodyType, "otherequip_info",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sOtherQuip);
	OrderSetDataItem(&vMsgBodyType, "love_service",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sLoveService);
	OrderSetDataItem(&vMsgBodyType, "apply_fee",		 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sApplyFee);
	OrderSetDataItem(&vMsgBodyType, "apply_num",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sApplyNum);
	OrderSetDataItem(&vMsgBodyType, "most_like_redound",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sLikeRedound);
	OrderSetDataItem(&vMsgBodyType, "semaphore_info",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sSemaphore);
	OrderSetDataItem(&vMsgBodyType, "average_fee",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sAverageFee);
	OrderSetDataItem(&vMsgBodyType, "finish_flag",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sFinishFlag);
	OrderSetDataItem(&vMsgBodyType, "begin_time",		 ORDERDATAFORMAT_DATE, sTdFamilyInfo.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "end_time",		 ORDERDATAFORMAT_DATE, sTdFamilyInfo.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "bak1",		 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak1);
	OrderSetDataItem(&vMsgBodyType, "bak2",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak2);
	OrderSetDataItem(&vMsgBodyType, "bak3",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sBak3);
	OrderSetDataItem(&vMsgBodyType, "op_time",	 ORDERDATAFORMAT_DATE, sTdFamilyInfo.sOpTime);
	OrderSetDataItem(&vMsgBodyType, "login_accept",	 ORDERDATAFORMAT_NUMBER, sTdFamilyInfo.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "con_flag",	 ORDERDATAFORMAT_STRING, sTdFamilyInfo.sConFlag);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500085;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500086;

	return 0;
}


/*
函数名称：OrderDeleteFamilyInfo
功能描述：向dFamilyInfo删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderDeleteFamilyInfo(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			i_family_id,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_family_id;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dFamilyInfo a WHERE  a.family_id=to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500087;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DFAMILYINFO");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"family_id",ORDERDATAFORMAT_NUMBER,i_family_id);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500088;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500089;
	}

	return 0;
}


/*
函数名称：OrderInsertFamilyProInfo
功能描述：向dFamilyProInfo插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdFamilyProInfo    以表dFamilyProInfo建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderInsertFamilyProInfo(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdFamilyProInfo)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProInfo sTdFamilyProInfo;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdFamilyProInfo.sFamilyId);
	Coltrim(sTdFamilyProInfo.sFbizCode);
	Coltrim(sTdFamilyProInfo.sModeCode);
	Coltrim(sTdFamilyProInfo.sIdNo);
	Coltrim(sTdFamilyProInfo.sPhoneNo);
	Coltrim(sTdFamilyProInfo.sDetailCode);
	Coltrim(sTdFamilyProInfo.sDetailType);
	Coltrim(sTdFamilyProInfo.sConFlag);
	Coltrim(sTdFamilyProInfo.sContractNo);
	Coltrim(sTdFamilyProInfo.sEffTime);
	Coltrim(sTdFamilyProInfo.sExpTime);
	Coltrim(sTdFamilyProInfo.sLoginNo);
	Coltrim(sTdFamilyProInfo.sLoginAccept);
	Coltrim(sTdFamilyProInfo.sTotalDate);
	Coltrim(sTdFamilyProInfo.sOpTime);
	Coltrim(sTdFamilyProInfo.sOpCode);
	Coltrim(sTdFamilyProInfo.sPayFlag);
	Coltrim(sTdFamilyProInfo.sBak2);
	Coltrim(sTdFamilyProInfo.sBak3);

	EXEC SQL INSERT INTO dFamilyProInfo(
										FAMILY_ID,
										FBIZ_CODE,
										MODE_CODE,
										ID_NO,
										PHONE_NO,
										DETAIL_CODE,
										DETAIL_TYPE,
										CON_FLAG,
										CONTRACT_NO,
										EFF_TIME,
										EXP_TIME,
										LOGIN_NO,
										LOGIN_ACCEPT,
										TOTAL_DATE,
										OP_TIME,
										OP_CODE,
										PAY_FLAG,
										BAK2,
										BAK3)
	VALUES(to_number(:sTdFamilyProInfo.sFamilyId),
			:sTdFamilyProInfo.sFbizCode,
			:sTdFamilyProInfo.sModeCode,
			to_number(:sTdFamilyProInfo.sIdNo),
			:sTdFamilyProInfo.sPhoneNo,
			:sTdFamilyProInfo.sDetailCode,
			:sTdFamilyProInfo.sDetailType,
			:sTdFamilyProInfo.sConFlag,
			to_number(:sTdFamilyProInfo.sContractNo),
			to_date(:sTdFamilyProInfo.sEffTime,'yyyymmdd hh24:mi:ss'),
			to_date(:sTdFamilyProInfo.sExpTime,'yyyymmdd hh24:mi:ss'),
			:sTdFamilyProInfo.sLoginNo,
			to_number(:sTdFamilyProInfo.sLoginAccept),
			to_number(:sTdFamilyProInfo.sTotalDate),
			to_date(:sTdFamilyProInfo.sOpTime,'yyyymmdd hh24:mi:ss'),
			:sTdFamilyProInfo.sOpCode,
			:sTdFamilyProInfo.sPayFlag,
			:sTdFamilyProInfo.sBak2,
			:sTdFamilyProInfo.sBak3);

	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500090;
	}
	strcpy(v_table_name,"DFAMILYPROINFO");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"family_id",      ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sFamilyId);
	OrderSetDataItem(&vMsgBodyType,"FBIZ_CODE",     ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sFbizCode);
	OrderSetDataItem(&vMsgBodyType,"MODE_CODE",     ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sModeCode);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",		ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",    ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"DETAIL_CODE",    ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sDetailCode);
	OrderSetDataItem(&vMsgBodyType,"DETAIL_TYPE",   ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sDetailType);
	OrderSetDataItem(&vMsgBodyType,"CON_FLAG",      ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sConFlag);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",     ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"EFF_TIME",     ORDERDATAFORMAT_DATE,   sTdFamilyProInfo.sEffTime);
	OrderSetDataItem(&vMsgBodyType,"EXP_TIME",		ORDERDATAFORMAT_DATE, sTdFamilyProInfo.sExpTime);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_NO",    ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"TOTAL_DATE",   ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sTotalDate);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME",      ORDERDATAFORMAT_DATE, sTdFamilyProInfo.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"OP_CODE",     ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"PAY_FLAG",      ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sPayFlag);
	OrderSetDataItem(&vMsgBodyType,"BAK2",     ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sBak2);
	OrderSetDataItem(&vMsgBodyType,"BAK3",     ORDERDATAFORMAT_STRING,  sTdFamilyProInfo.sBak3);


	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500091;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500092;
	}

	return 0;
}
/*
函数名称：OrderUpdateFamilyProInfo
功能描述：向dFamilyProInfo更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderUpdateFamilyProInfo(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProInfoIndex oldIndex;
TdFamilyProInfoIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdFamilyProInfo sTdFamilyProInfo;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dFamilyProInfo a SET %s WHERE a.family_id=to_number(:NG_Param0) \
	and a.FBIZ_CODE=:NG_Param1 and a.MODE_CODE=:NG_Param2 and a.ID_NO=to_number(:NG_Param3) and a.DETAIL_CODE=:NG_Param4 \
	and a.DETAIL_TYPE=:NG_Param5 and a.EFF_TIME=to_date(:NG_Param6,'yyyymmdd hh24:mi:ss') \
	and a.EXP_TIME=to_date(:NG_Param7,'yyyymmdd hh24:mi:ss') %s ",
			 i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500093;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(family_id), FBIZ_CODE, MODE_CODE, to_char(ID_NO), PHONE_NO,DETAIL_CODE,DETAIL_TYPE,
	        nvl(CON_FLAG,chr(0)), nvl(to_char(CONTRACT_NO),chr(0)), to_char(EFF_TIME,'yyyymmdd hh24:mi:ss'),
	        to_char(EXP_TIME,'yyyymmdd hh24:mi:ss'),LOGIN_NO, to_char(LOGIN_ACCEPT),
	        to_char(TOTAL_DATE),to_char(OP_TIME,'yyyymmdd hh24:mi:ss'),OP_CODE,nvl(PAY_FLAG,chr(0)),
	        nvl(BAK2,chr(0)),nvl(BAK3,chr(0))
			   INTO :sTdFamilyProInfo.sFamilyId, :sTdFamilyProInfo.sFbizCode, :sTdFamilyProInfo.sModeCode, :sTdFamilyProInfo.sIdNo,
			   		:sTdFamilyProInfo.sPhoneNo, :sTdFamilyProInfo.sDetailCode, :sTdFamilyProInfo.sDetailType,
			   		:sTdFamilyProInfo.sConFlag, :sTdFamilyProInfo.sContractNo, :sTdFamilyProInfo.sEffTime,
			   		:sTdFamilyProInfo.sExpTime, :sTdFamilyProInfo.sLoginNo,:sTdFamilyProInfo.sLoginAccept,:sTdFamilyProInfo.sTotalDate,
			   		:sTdFamilyProInfo.sOpTime, :sTdFamilyProInfo.sOpCode,:sTdFamilyProInfo.sPayFlag,:sTdFamilyProInfo.sBak2,
			   		:sTdFamilyProInfo.sBak3
			   FROM dFamilyProInfo
			  WHERE family_id=to_number(:newIndex.sFamilyId) and FBIZ_CODE=:newIndex.sFbizCode and MODE_CODE=:newIndex.sModeCode
			  	    and ID_NO=to_number(:newIndex.sIdNo) and DETAIL_CODE=:newIndex.sDetailCode and DETAIL_TYPE=:newIndex.sDetailType
			  	    and EFF_TIME=to_date(:newIndex.sEffTime,'yyyymmdd hh24:mi:ss') and EXP_TIME=to_date(:newIndex.sExpTime,'yyyymmdd hh24:mi:ss');

	if (SQLCODE != SQLOK)
	{
		return -500094;
	}

	Coltrim(sTdFamilyProInfo.sFamilyId);
	Coltrim(sTdFamilyProInfo.sFbizCode);
	Coltrim(sTdFamilyProInfo.sModeCode);
	Coltrim(sTdFamilyProInfo.sIdNo);
	Coltrim(sTdFamilyProInfo.sPhoneNo);
	Coltrim(sTdFamilyProInfo.sDetailCode);
	Coltrim(sTdFamilyProInfo.sDetailType);
	Coltrim(sTdFamilyProInfo.sConFlag);
	Coltrim(sTdFamilyProInfo.sContractNo);
	Coltrim(sTdFamilyProInfo.sEffTime);
	Coltrim(sTdFamilyProInfo.sExpTime);
	Coltrim(sTdFamilyProInfo.sLoginNo);
	Coltrim(sTdFamilyProInfo.sLoginAccept);
	Coltrim(sTdFamilyProInfo.sTotalDate);
	Coltrim(sTdFamilyProInfo.sOpTime);
	Coltrim(sTdFamilyProInfo.sOpCode);
	Coltrim(sTdFamilyProInfo.sPayFlag);
	Coltrim(sTdFamilyProInfo.sBak2);
	Coltrim(sTdFamilyProInfo.sBak3);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DFAMILYPROINFO");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "MODE_CODE",		 ORDERDATAFORMAT_STRING, oldIndex.sModeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO", ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_CODE",		 ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_TYPE", ORDERDATAFORMAT_STRING, oldIndex.sDetailType);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME",		 ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME", ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	OrderSetDataItem(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sFamilyId);
	OrderSetDataItem(&vMsgBodyType, "FBIZ_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sFbizCode);
	OrderSetDataItem(&vMsgBodyType, "MODE_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sModeCode);
	OrderSetDataItem(&vMsgBodyType, "ID_NO",	 ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "PHONE_NO",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "DETAIL_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "DETAIL_TYPE",		 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sDetailType);
	OrderSetDataItem(&vMsgBodyType, "CON_FLAG",		 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sConFlag);
	OrderSetDataItem(&vMsgBodyType, "CONTRACT_NO",		 ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "EFF_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyProInfo.sEffTime);
	OrderSetDataItem(&vMsgBodyType, "EXP_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyProInfo.sExpTime);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_NO",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sLoginNo);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_ACCEPT",		 ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "TOTAL_DATE",	 ORDERDATAFORMAT_NUMBER, sTdFamilyProInfo.sTotalDate);
	OrderSetDataItem(&vMsgBodyType, "OP_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyProInfo.sOpTime);
	OrderSetDataItem(&vMsgBodyType, "OP_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sOpCode);
	OrderSetDataItem(&vMsgBodyType, "PAY_FLAG",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sPayFlag);
	OrderSetDataItem(&vMsgBodyType, "BAK2",	 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sBak2);
	OrderSetDataItem(&vMsgBodyType, "BAK3",		 ORDERDATAFORMAT_STRING, sTdFamilyProInfo.sBak3);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500095;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500096;

	return 0;
}


/*
函数名称：OrderDeleteFamilyProInfo
功能描述：向dFamilyProInfo删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderDeleteFamilyProInfo(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			oldIndex,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProInfoIndex oldIndex;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dFamilyProInfo a WHERE a.family_id=to_number(:NG_Param0) \
	and a.FBIZ_CODE=:NG_Param1 and a.MODE_CODE=:NG_Param2 and a.ID_NO=to_number(:NG_Param3) and a.DETAIL_CODE=:NG_Param4 \
	and a.DETAIL_TYPE=:NG_Param5 and EFF_TIME=to_date(:NG_Param6,'yyyymmdd hh24:mi:ss') and EXP_TIME=to_date(:NG_Param7,'yyyymmdd hh24:mi:ss') %s "
	,i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500097;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DFAMILYPROINFO");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "MODE_CODE",		 ORDERDATAFORMAT_STRING, oldIndex.sModeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO", ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_CODE",		 ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_TYPE", ORDERDATAFORMAT_STRING, oldIndex.sDetailType);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME",		 ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME", ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500098;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500099;
	}

	return 0;
}



/*
函数名称：OrderInsertFamilyProMember
功能描述：向dFamilyProMember插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdFamilyProMember    以表dFamilyProMember建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderInsertFamilyProMember(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdFamilyProMember)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProMember sTdFamilyProMember;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdFamilyProMember.sFamilyId);
	Coltrim(sTdFamilyProMember.sFbizCode);
	Coltrim(sTdFamilyProMember.sMebOrder);
	Coltrim(sTdFamilyProMember.sIdNo);
	Coltrim(sTdFamilyProMember.sPhoneNo);
	Coltrim(sTdFamilyProMember.sMebType);
	Coltrim(sTdFamilyProMember.sMainFlag);
	Coltrim(sTdFamilyProMember.sEffTime);
	Coltrim(sTdFamilyProMember.sExpTime);
	Coltrim(sTdFamilyProMember.sLoginAccept);
	Coltrim(sTdFamilyProMember.sBak1);
	Coltrim(sTdFamilyProMember.sBak2);
	Coltrim(sTdFamilyProMember.sBak3);
  Coltrim(sTdFamilyProMember.sPointFLag);
	EXEC SQL INSERT INTO dFamilyProMember(
										FAMILY_ID,
										FBIZ_CODE,
										MEB_ORDER,
										ID_NO,
										PHONE_NO,
										MEB_TYPE,
										MAIN_FLAG,
										EFF_TIME,
										EXP_TIME,
										LOGIN_ACCEPT,
										BAK1,
										BAK2,
										BAK3,
										POINTPUBLIC_FLAG)
	VALUES(to_number(:sTdFamilyProMember.sFamilyId),
			:sTdFamilyProMember.sFbizCode,
			to_number(:sTdFamilyProMember.sMebOrder),
			to_number(:sTdFamilyProMember.sIdNo),
			:sTdFamilyProMember.sPhoneNo,
			:sTdFamilyProMember.sMebType,
			:sTdFamilyProMember.sMainFlag,
			to_date(:sTdFamilyProMember.sEffTime,'yyyymmdd hh24:mi:ss'),
			to_date(:sTdFamilyProMember.sExpTime,'yyyymmdd hh24:mi:ss'),
			to_number(:sTdFamilyProMember.sLoginAccept),
			:sTdFamilyProMember.sBak1,
			:sTdFamilyProMember.sBak2,
			:sTdFamilyProMember.sBak3,
			:sTdFamilyProMember.sPointFLag);
	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500060;
	}
	strcpy(v_table_name,"DFAMILYPROMEMBER");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"FAMILY_ID",      ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sFamilyId);
	OrderSetDataItem(&vMsgBodyType,"FBIZ_CODE",     ORDERDATAFORMAT_STRING, sTdFamilyProMember.sFbizCode);
	OrderSetDataItem(&vMsgBodyType,"MEB_ORDER",     ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sMebOrder);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",		ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",    ORDERDATAFORMAT_STRING, sTdFamilyProMember.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"MEB_TYPE",    ORDERDATAFORMAT_STRING, sTdFamilyProMember.sMebType);
	OrderSetDataItem(&vMsgBodyType,"MAIN_FLAG",   ORDERDATAFORMAT_STRING, sTdFamilyProMember.sMainFlag);
	OrderSetDataItem(&vMsgBodyType,"EFF_TIME",     ORDERDATAFORMAT_DATE,   sTdFamilyProMember.sEffTime);
	OrderSetDataItem(&vMsgBodyType,"EXP_TIME",		ORDERDATAFORMAT_DATE, sTdFamilyProMember.sExpTime);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"BAK1",      ORDERDATAFORMAT_STRING, sTdFamilyProMember.sBak1);
	OrderSetDataItem(&vMsgBodyType,"BAK2",     ORDERDATAFORMAT_STRING, sTdFamilyProMember.sBak2);
	OrderSetDataItem(&vMsgBodyType,"BAK3",     ORDERDATAFORMAT_STRING,  sTdFamilyProMember.sBak3);
	OrderSetDataItem(&vMsgBodyType,"POINTPUBLIC_FLAG",     ORDERDATAFORMAT_STRING,  sTdFamilyProMember.sPointFLag);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500061;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500062;
	}

	return 0;
}
/*
函数名称：OrderUpdateFamilyProMember
功能描述：向dFamilyProMember更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderUpdateFamilyProMember(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProMemberIndex oldIndex;
TdFamilyProMemberIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdFamilyProMember sTdFamilyProMember;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dFamilyProMember a SET %s WHERE a.family_id=to_number(:NG_Param0) \
			and a.FBIZ_CODE=:NG_Param1 and a.ID_NO=to_number(:NG_Param2) and a.EFF_TIME=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') \
			and a.EXP_TIME=to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') %s ",
			i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500063;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(family_id), FBIZ_CODE, to_char(MEB_ORDER), to_char(ID_NO), PHONE_NO,MEB_TYPE,MAIN_FLAG,
	        to_char(EFF_TIME,'yyyymmdd hh24:mi:ss'),to_char(EXP_TIME,'yyyymmdd hh24:mi:ss'),nvl(to_char(LOGIN_ACCEPT),chr(0)),nvl(BAK1,chr(0)),
	        nvl(BAK2,chr(0)),nvl(BAK3,chr(0)),nvl(POINTPUBLIC_FLAG,chr(0))
			   INTO :sTdFamilyProMember.sFamilyId, :sTdFamilyProMember.sFbizCode, :sTdFamilyProMember.sMebOrder,
			   	  :sTdFamilyProMember.sIdNo,:sTdFamilyProMember.sPhoneNo, :sTdFamilyProMember.sMebType,
			   	  :sTdFamilyProMember.sMainFlag,:sTdFamilyProMember.sEffTime,:sTdFamilyProMember.sExpTime,
			   	  :sTdFamilyProMember.sLoginAccept,:sTdFamilyProMember.sBak1,:sTdFamilyProMember.sBak2,:sTdFamilyProMember.sBak3,
			   	  :sTdFamilyProMember.sPointFLag
			   FROM dFamilyProMember
			  WHERE family_id=to_number(:newIndex.sFamilyId) and FBIZ_CODE=:newIndex.sFbizCode and ID_NO=to_number(:newIndex.sIdNo)
        	and EFF_TIME=to_date(:newIndex.sEffTime,'yyyymmdd hh24:mi:ss') and EXP_TIME=to_date(:newIndex.sExpTime,'yyyymmdd hh24:mi:ss');
	if (SQLCODE != SQLOK)
	{
		return -500064;
	}

	Coltrim(sTdFamilyProMember.sFamilyId);
	Coltrim(sTdFamilyProMember.sFbizCode);
	Coltrim(sTdFamilyProMember.sMebOrder);
	Coltrim(sTdFamilyProMember.sIdNo);
	Coltrim(sTdFamilyProMember.sPhoneNo);
	Coltrim(sTdFamilyProMember.sMebType);
	Coltrim(sTdFamilyProMember.sMainFlag);
	Coltrim(sTdFamilyProMember.sEffTime);
	Coltrim(sTdFamilyProMember.sExpTime);
	Coltrim(sTdFamilyProMember.sLoginAccept);
	Coltrim(sTdFamilyProMember.sBak1);
	Coltrim(sTdFamilyProMember.sBak2);
	Coltrim(sTdFamilyProMember.sBak3);
  Coltrim(sTdFamilyProMember.sPointFLag);
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DFAMILYPROMEMBER");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO", ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME",	 ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME",	 ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	OrderSetDataItem(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sFamilyId);
	OrderSetDataItem(&vMsgBodyType, "FBIZ_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sFbizCode);
	OrderSetDataItem(&vMsgBodyType, "MEB_ORDER",	 ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sMebOrder);
	OrderSetDataItem(&vMsgBodyType, "ID_NO",	 ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "PHONE_NO",	 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "MEB_TYPE",	 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sMebType);
	OrderSetDataItem(&vMsgBodyType, "MAIN_FLAG",		 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sMainFlag);
	OrderSetDataItem(&vMsgBodyType, "EFF_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyProMember.sEffTime);
	OrderSetDataItem(&vMsgBodyType, "EXP_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyProMember.sExpTime);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_ACCEPT",		 ORDERDATAFORMAT_NUMBER, sTdFamilyProMember.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "BAK1",	 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sBak1);
	OrderSetDataItem(&vMsgBodyType, "BAK2",	 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sBak2);
	OrderSetDataItem(&vMsgBodyType, "BAK3",		 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sBak3);
	OrderSetDataItem(&vMsgBodyType, "POINTPUBLIC_FLAG",		 ORDERDATAFORMAT_STRING, sTdFamilyProMember.sPointFLag);
	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500065;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500066;

	return 0;
}


/*
函数名称：OrderDeleteFamilyProMember
功能描述：向dFamilyMebShaMod删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderDeleteFamilyProMember(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			oldIndex,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyProMemberIndex oldIndex;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dFamilyProMember a WHERE a.family_id=to_number(:NG_Param0) \
	and a.FBIZ_CODE=:NG_Param1 and a.ID_NO=to_number(:NG_Param2) and a.EFF_TIME=to_date(:NG_Param3,'yyyymmdd hh24:mi:ss') \
			and a.EXP_TIME=to_date(:NG_Param4,'yyyymmdd hh24:mi:ss') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500067;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DFAMILYPROMEMBER");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID", ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO", 		 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME",	 ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME",	 ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500068;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500069;
	}

	return 0;
}



/*
函数名称：OrderInsertFamilyMebShaMod
功能描述：向dFamilyMebShaMod插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdFamilyMebShaMod    以表dFamilyMebShaMod建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderInsertFamilyMebShaMod(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdFamilyMebShaMod)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyMebShaMod sTdFamilyMebShaMod;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdFamilyMebShaMod.sFamilyId);
	Coltrim(sTdFamilyMebShaMod.sFbizCode);
	Coltrim(sTdFamilyMebShaMod.sIdNo);
	Coltrim(sTdFamilyMebShaMod.sPhoneNo);
	Coltrim(sTdFamilyMebShaMod.sModeCode);
	Coltrim(sTdFamilyMebShaMod.sDetailCode);
	Coltrim(sTdFamilyMebShaMod.sDetailType);
	Coltrim(sTdFamilyMebShaMod.sMainFlag);
	Coltrim(sTdFamilyMebShaMod.sEffTime);
	Coltrim(sTdFamilyMebShaMod.sExpTime);
	Coltrim(sTdFamilyMebShaMod.sOpFlag);
	Coltrim(sTdFamilyMebShaMod.sRegionCode);
	Coltrim(sTdFamilyMebShaMod.sLoginNo);
	Coltrim(sTdFamilyMebShaMod.sLoginAccept);
	Coltrim(sTdFamilyMebShaMod.sTotalDate);
	Coltrim(sTdFamilyMebShaMod.sDealTime);
	Coltrim(sTdFamilyMebShaMod.sOpCode);
	Coltrim(sTdFamilyMebShaMod.sBak1);
	Coltrim(sTdFamilyMebShaMod.sBak2);
	Coltrim(sTdFamilyMebShaMod.sBak3);
	Coltrim(sTdFamilyMebShaMod.sShareFlag);

	EXEC SQL INSERT INTO dFamilyMebShaMod(
										FAMILY_ID,
										FBIZ_CODE,
										ID_NO,
										PHONE_NO,
										MODE_CODE,
										DETAIL_CODE,
										DETAIL_TYPE,
										MAIN_FLAG,
										EFF_TIME,
										EXP_TIME,
										OP_FLAG,
										REGION_CODE,
										LOGIN_NO,
										LOGIN_ACCEPT,
										TOTAL_DATE,
										DEAL_TIME,
										OP_CODE,
										BAK1,
										BAK2,
										BAK3,
										SHARE_FLAG)
	VALUES(to_number(:sTdFamilyMebShaMod.sFamilyId),
			:sTdFamilyMebShaMod.sFbizCode,
			to_number(:sTdFamilyMebShaMod.sIdNo),
			:sTdFamilyMebShaMod.sPhoneNo,
			:sTdFamilyMebShaMod.sModeCode,
			:sTdFamilyMebShaMod.sDetailCode,
			:sTdFamilyMebShaMod.sDetailType,
			:sTdFamilyMebShaMod.sMainFlag,
			to_date(:sTdFamilyMebShaMod.sEffTime,'yyyymmdd hh24:mi:ss'),
			to_date(:sTdFamilyMebShaMod.sExpTime,'yyyymmdd hh24:mi:ss'),
			:sTdFamilyMebShaMod.sOpFlag,
			:sTdFamilyMebShaMod.sRegionCode,
			:sTdFamilyMebShaMod.sLoginNo,
			to_number(:sTdFamilyMebShaMod.sLoginAccept),
			to_number(:sTdFamilyMebShaMod.sTotalDate),
			to_date(:sTdFamilyMebShaMod.sDealTime,'yyyymmdd hh24:mi:ss'),
			:sTdFamilyMebShaMod.sOpCode,
			:sTdFamilyMebShaMod.sBak1,
			:sTdFamilyMebShaMod.sBak2,
			:sTdFamilyMebShaMod.sBak3,
			:sTdFamilyMebShaMod.sShareFlag);

	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500050;
	}
	strcpy(v_table_name,"DFAMILYMEBSHAMOD");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"FAMILY_ID",      ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sFamilyId);
	OrderSetDataItem(&vMsgBodyType,"FBIZ_CODE",     ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sFbizCode);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",		ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",    ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"MODE_CODE",    ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sModeCode);
	OrderSetDataItem(&vMsgBodyType,"DETAIL_CODE",   ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sDetailCode);
	OrderSetDataItem(&vMsgBodyType,"DETAIL_TYPE",    ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sDetailType);
	OrderSetDataItem(&vMsgBodyType,"MAIN_FLAG",   ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sMainFlag);
	OrderSetDataItem(&vMsgBodyType,"EFF_TIME",     ORDERDATAFORMAT_DATE,   sTdFamilyMebShaMod.sEffTime);
	OrderSetDataItem(&vMsgBodyType,"EXP_TIME",		ORDERDATAFORMAT_DATE, sTdFamilyMebShaMod.sExpTime);
	OrderSetDataItem(&vMsgBodyType,"OP_FLAG",     ORDERDATAFORMAT_STRING,   sTdFamilyMebShaMod.sOpFlag);
	OrderSetDataItem(&vMsgBodyType,"REGION_CODE",		ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sRegionCode);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_NO",     ORDERDATAFORMAT_STRING,   sTdFamilyMebShaMod.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"TOTAL_DATE",		ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sTotalDate);
	OrderSetDataItem(&vMsgBodyType,"DEAL_TIME",     ORDERDATAFORMAT_DATE,   sTdFamilyMebShaMod.sDealTime);
	OrderSetDataItem(&vMsgBodyType,"OP_CODE",     ORDERDATAFORMAT_STRING,   sTdFamilyMebShaMod.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"BAK1",      ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sBak1);
	OrderSetDataItem(&vMsgBodyType,"BAK2",     ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sBak2);
	OrderSetDataItem(&vMsgBodyType,"BAK3",     ORDERDATAFORMAT_STRING,  sTdFamilyMebShaMod.sBak3);
	OrderSetDataItem(&vMsgBodyType,"SHARE_FLAG",     ORDERDATAFORMAT_STRING,  sTdFamilyMebShaMod.sShareFlag);


	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500051;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500052;
	}

	return 0;
}
/*
函数名称：OrderUpdateFamilyMebShaMod
功能描述：向dFamilyMebShaMod更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderUpdateFamilyMebShaMod(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyMebShaModIndex oldIndex;
TdFamilyMebShaModIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdFamilyMebShaMod sTdFamilyMebShaMod;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dFamilyMebShaMod a SET %s WHERE a.family_id=to_number(:NG_Param0) \
			and a.FBIZ_CODE=:NG_Param1 and a.MODE_CODE=:NG_Param2 and a.DETAIL_CODE=:NG_Param3 and a.DETAIL_TYPE=:NG_Param4 \
			and a.EFF_TIME=to_date(:NG_Param5,'yyyymmdd hh24:mi:ss') and a.EXP_TIME=to_date(:NG_Param6,'yyyymmdd hh24:mi:ss') %s ",
			i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500053;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(family_id), FBIZ_CODE, to_char(ID_NO), PHONE_NO,MODE_CODE,DETAIL_CODE,DETAIL_TYPE,
	  			MAIN_FLAG,to_char(EFF_TIME,'yyyymmdd hh24:mi:ss'),to_char(EXP_TIME,'yyyymmdd hh24:mi:ss'),OP_FLAG,REGION_CODE,nvl(LOGIN_NO,chr(0)),
	  			nvl(to_char(LOGIN_ACCEPT),chr(0)),nvl(to_char(TOTAL_DATE),chr(0)),nvl(to_char(DEAL_TIME,'yyyymmdd hh24:mi:ss'),chr(0)),
	  			nvl(OP_CODE,chr(0)),nvl(BAK1,chr(0)),nvl(BAK2,chr(0)),nvl(BAK3,chr(0)),nvl(SHARE_FLAG,chr(0))
			   INTO :sTdFamilyMebShaMod.sFamilyId, :sTdFamilyMebShaMod.sFbizCode, :sTdFamilyMebShaMod.sIdNo,
			   	  :sTdFamilyMebShaMod.sPhoneNo,:sTdFamilyMebShaMod.sModeCode, :sTdFamilyMebShaMod.sDetailCode,
			   	  :sTdFamilyMebShaMod.sDetailType,:sTdFamilyMebShaMod.sMainFlag,:sTdFamilyMebShaMod.sEffTime,
			   	  :sTdFamilyMebShaMod.sExpTime,:sTdFamilyMebShaMod.sOpFlag,:sTdFamilyMebShaMod.sRegionCode,
			   	  :sTdFamilyMebShaMod.sLoginNo,:sTdFamilyMebShaMod.sLoginAccept,:sTdFamilyMebShaMod.sTotalDate,
			   	  :sTdFamilyMebShaMod.sDealTime,:sTdFamilyMebShaMod.sOpCode,:sTdFamilyMebShaMod.sBak1,
			   	  :sTdFamilyMebShaMod.sBak2,:sTdFamilyMebShaMod.sBak3,:sTdFamilyMebShaMod.sShareFlag
			   FROM dFamilyMebShaMod
			  WHERE family_id=to_number(:newIndex.sFamilyId) and FBIZ_CODE=:newIndex.sFbizCode and MODE_CODE=:newIndex.sModeCode
			      	and DETAIL_CODE=:newIndex.sDetailCode and DETAIL_TYPE=:newIndex.sDetailType
			      	and EFF_TIME=to_date(:newIndex.sEffTime,'yyyymmdd hh24:mi:ss') and EXP_TIME=to_date(:newIndex.sExpTime,'yyyymmdd hh24:mi:ss');

	if (SQLCODE != SQLOK)
	{
		return -500054;
	}

	Coltrim(sTdFamilyMebShaMod.sFamilyId);
	Coltrim(sTdFamilyMebShaMod.sFbizCode);
	Coltrim(sTdFamilyMebShaMod.sIdNo);
	Coltrim(sTdFamilyMebShaMod.sPhoneNo);
	Coltrim(sTdFamilyMebShaMod.sModeCode);
	Coltrim(sTdFamilyMebShaMod.sDetailCode);
	Coltrim(sTdFamilyMebShaMod.sDetailType);
	Coltrim(sTdFamilyMebShaMod.sMainFlag);
	Coltrim(sTdFamilyMebShaMod.sEffTime);
	Coltrim(sTdFamilyMebShaMod.sExpTime);
	Coltrim(sTdFamilyMebShaMod.sOpFlag);
	Coltrim(sTdFamilyMebShaMod.sRegionCode);
	Coltrim(sTdFamilyMebShaMod.sLoginNo);
	Coltrim(sTdFamilyMebShaMod.sLoginAccept);
	Coltrim(sTdFamilyMebShaMod.sTotalDate);
	Coltrim(sTdFamilyMebShaMod.sDealTime);
	Coltrim(sTdFamilyMebShaMod.sOpCode);
	Coltrim(sTdFamilyMebShaMod.sBak1);
	Coltrim(sTdFamilyMebShaMod.sBak2);
	Coltrim(sTdFamilyMebShaMod.sBak3);
	Coltrim(sTdFamilyMebShaMod.sShareFlag);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DFAMILYMEBSHAMOD");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "MODE_CODE", ORDERDATAFORMAT_STRING, oldIndex.sModeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_CODE",		 ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_TYPE", ORDERDATAFORMAT_STRING, oldIndex.sDetailType);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME", ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME", ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	OrderSetDataItem(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sFamilyId);
	OrderSetDataItem(&vMsgBodyType, "FBIZ_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sFbizCode);
	OrderSetDataItem(&vMsgBodyType, "ID_NO",	 ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "PHONE_NO",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "MODE_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sModeCode);
	OrderSetDataItem(&vMsgBodyType, "DETAIL_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sDetailCode);
	OrderSetDataItem(&vMsgBodyType, "DETAIL_TYPE",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sDetailType);
	OrderSetDataItem(&vMsgBodyType, "MAIN_FLAG",		 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sMainFlag);
	OrderSetDataItem(&vMsgBodyType, "EFF_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyMebShaMod.sEffTime);
	OrderSetDataItem(&vMsgBodyType, "EXP_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyMebShaMod.sExpTime);
	OrderSetDataItem(&vMsgBodyType, "OP_FLAG",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sOpFlag);
	OrderSetDataItem(&vMsgBodyType, "REGION_CODE",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_NO",		 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sLoginNo);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_ACCEPT",		 ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "TOTAL_DATE",	 ORDERDATAFORMAT_NUMBER, sTdFamilyMebShaMod.sTotalDate);
	OrderSetDataItem(&vMsgBodyType, "DEAL_TIME",	 ORDERDATAFORMAT_DATE, sTdFamilyMebShaMod.sDealTime);
	OrderSetDataItem(&vMsgBodyType, "OP_CODE",		 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sOpCode);
	OrderSetDataItem(&vMsgBodyType, "BAK1",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sBak1);
	OrderSetDataItem(&vMsgBodyType, "BAK2",	 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sBak2);
	OrderSetDataItem(&vMsgBodyType, "BAK3",		 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sBak3);
	OrderSetDataItem(&vMsgBodyType, "SHARE_FLAG",		 ORDERDATAFORMAT_STRING, sTdFamilyMebShaMod.sShareFlag);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500055;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500056;

	return 0;
}


/*
函数名称：OrderDeleteFamilyMebShaMod
功能描述：向dFamilyMebShaMod删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100409
修改：
*/
int OrderDeleteFamilyMebShaMod(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			oldIndex,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdFamilyMebShaModIndex oldIndex;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dFamilyMebShaMod a WHERE a.family_id=to_number(:NG_Param0) \
			and a.FBIZ_CODE=:NG_Param1 and a.MODE_CODE=:NG_Param2 and a.DETAIL_CODE=:NG_Param3 and a.DETAIL_TYPE=:NG_Param4 \
			and EFF_TIME=to_date(:NG_Param5,'yyyymmdd hh24:mi:ss') and EXP_TIME=to_date(:NG_Param6,'yyyymmdd hh24:mi:ss') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500057;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DFAMILYMEBSHAMOD");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "FAMILY_ID",		 ORDERDATAFORMAT_NUMBER, oldIndex.sFamilyId);
	OrderSetPrimaryKey(&vMsgBodyType, "FBIZ_CODE", ORDERDATAFORMAT_STRING, oldIndex.sFbizCode);
	OrderSetPrimaryKey(&vMsgBodyType, "MODE_CODE", ORDERDATAFORMAT_STRING, oldIndex.sModeCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_CODE", ORDERDATAFORMAT_STRING, oldIndex.sDetailCode);
	OrderSetPrimaryKey(&vMsgBodyType, "DETAIL_TYPE", ORDERDATAFORMAT_STRING, oldIndex.sDetailType);
	OrderSetPrimaryKey(&vMsgBodyType, "EFF_TIME", ORDERDATAFORMAT_DATE, oldIndex.sEffTime);
	OrderSetPrimaryKey(&vMsgBodyType, "EXP_TIME", ORDERDATAFORMAT_DATE, oldIndex.sExpTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500058;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500059;
	}

	return 0;
}


int OrderInsertConFund(i_sendid_type,i_sendid_no,i_order_right,
						    i_op_code,i_op_accept,i_op_login,i_op_note,
						    sTdConFund
					       )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConFund	sTdConFund;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdConFund.sContractNo);
	Coltrim(sTdConFund.sInitFund);
	Coltrim(sTdConFund.sCurrentFund);
	Coltrim(sTdConFund.sCurrentTime);
	Coltrim(sTdConFund.sMonthFund);
	Coltrim(sTdConFund.sYearFund);
	Coltrim(sTdConFund.sAddFund);
	Coltrim(sTdConFund.sMonthUsed);
	Coltrim(sTdConFund.sYearUsed);
	Coltrim(sTdConFund.sTotalUsed);
	Coltrim(sTdConFund.sMinYm);
	Coltrim(sTdConFund.sContractStatus);
	Coltrim(sTdConFund.sStatusTime);
	Coltrim(sTdConFund.sOpTime);
	Coltrim(sTdConFund.sChgFlag);

	EXEC SQL INSERT INTO dConFund(
	                              contract_no,
                                  init_fund,
                                  current_fund,
                                  current_time,
                                  month_fund,
                                  year_fund,
                                  add_fund,
                                  month_used,
                                  year_used,
                                  total_used,
                                  min_ym,
                                  contract_status,
                                  op_time,
                                  status_time,
                                  chg_flag)
		     VALUES(
		            to_number(:sTdConFund.sContractNo),
                    to_number(:sTdConFund.sInitFund),
                    to_number(:sTdConFund.sCurrentFund),
                    to_date(:sTdConFund.sCurrentTime,'yyyymmdd hh24:mi:ss'),
                    to_number(:sTdConFund.sMonthFund),
                    to_number(:sTdConFund.sYearFund),
                    to_number(:sTdConFund.sAddFund),
                    to_number(:sTdConFund.sMonthUsed),
                    to_number(:sTdConFund.sYearUsed),
                    to_number(:sTdConFund.sTotalUsed),
                    to_number(:sTdConFund.sMinYm),
                    to_number(:sTdConFund.sContractStatus),
                    to_date(:sTdConFund.sOpTime,'yyyymmdd hh24:mi:ss'),
                    to_date(:sTdConFund.sStatusTime,'yyyymmdd hh24:mi:ss'),
                    :sTdConFund.sChgFlag
		     );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCONFUND");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"contract_no",       ORDERDATAFORMAT_NUMBER , sTdConFund.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"init_fund",        ORDERDATAFORMAT_NUMBER , sTdConFund.sInitFund);
	OrderSetDataItem(&vMsgBodyType,"current_fund",     ORDERDATAFORMAT_NUMBER , sTdConFund.sCurrentFund);
	OrderSetDataItem(&vMsgBodyType,"current_time",      ORDERDATAFORMAT_DATE   , sTdConFund.sCurrentTime);
	OrderSetDataItem(&vMsgBodyType,"month_fund",       ORDERDATAFORMAT_NUMBER , sTdConFund.sMonthFund);
	OrderSetDataItem(&vMsgBodyType,"year_fund",        ORDERDATAFORMAT_NUMBER , sTdConFund.sYearFund);
	OrderSetDataItem(&vMsgBodyType,"add_fund",         ORDERDATAFORMAT_NUMBER , sTdConFund.sAddFund);
	OrderSetDataItem(&vMsgBodyType,"month_used",        ORDERDATAFORMAT_NUMBER , sTdConFund.sMonthUsed);
	OrderSetDataItem(&vMsgBodyType,"year_used",         ORDERDATAFORMAT_NUMBER , sTdConFund.sYearUsed);
	OrderSetDataItem(&vMsgBodyType,"total_used",        ORDERDATAFORMAT_NUMBER , sTdConFund.sTotalUsed);
	OrderSetDataItem(&vMsgBodyType,"min_ym",            ORDERDATAFORMAT_NUMBER , sTdConFund.sMinYm);
	OrderSetDataItem(&vMsgBodyType,"contract_status",   ORDERDATAFORMAT_NUMBER , sTdConFund.sContractStatus);
	OrderSetDataItem(&vMsgBodyType,"status_time",       ORDERDATAFORMAT_DATE   , sTdConFund.sStatusTime);
	OrderSetDataItem(&vMsgBodyType,"op_time",       	ORDERDATAFORMAT_DATE   , sTdConFund.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"chg_flag",          ORDERDATAFORMAT_STRING , sTdConFund.sChgFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}
int OrderDeleteConFund(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_contract_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dConFund a WHERE a.contract_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCONFUND");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",ORDERDATAFORMAT_NUMBER,i_contract_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

int OrderUpdateConFund(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_contract_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_contract_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdConFund	sTdConFund;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);
	Coltrim(i_contract_no);

	init(v_sql_buff);
	memset(&sTdConFund,0,sizeof(sTdConFund));

	sprintf(v_sql_buff,"UPDATE dConFund a SET %s WHERE a.contract_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		printf("+++++++++++OrderMultiParaDML,v_ret=%d\n",v_ret);
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(contract_no),
					to_char(init_fund),
					to_char(current_fund),
					nvl(to_char(current_time,'yyyymmdd hh24:mi:ss'),chr(0)),
					to_char(month_fund),
					to_char(year_fund),
					to_char(add_fund),
					to_char(month_used),
					to_char(year_used),
					to_char(total_used),
					to_char(min_ym),
					to_char(contract_status),
					to_char(status_time,'yyyymmdd hh24:mi:ss'),
					to_char(op_time,'yyyymmdd hh24:mi:ss'),
					nvl(chg_flag,chr(0))
			INTO :sTdConFund.sContractNo,
				 :sTdConFund.sInitFund,
				 :sTdConFund.sCurrentFund,
				 :sTdConFund.sCurrentTime,
				 :sTdConFund.sMonthFund,
				 :sTdConFund.sYearFund,
				 :sTdConFund.sAddFund,
				 :sTdConFund.sMonthUsed,
				 :sTdConFund.sYearUsed,
				 :sTdConFund.sTotalUsed,
				 :sTdConFund.sMinYm,
				 :sTdConFund.sContractStatus,
				 :sTdConFund.sStatusTime,
				 :sTdConFund.sOpTime,
				 :sTdConFund.sChgFlag
			FROM dConFund
			WHERE contract_no = to_number(:i_contract_no);

	if (SQLCODE!=SQLOK)
	{
		printf("++++++++++OrderUpdateConFund,SQLCODE=%d\n",SQLCODE);
		return -500037;
	}

    	Coltrim(sTdConFund.sContractNo);
	Coltrim(sTdConFund.sInitFund);
	Coltrim(sTdConFund.sCurrentFund);
	Coltrim(sTdConFund.sCurrentTime);
	Coltrim(sTdConFund.sMonthFund);
	Coltrim(sTdConFund.sYearFund);
	Coltrim(sTdConFund.sAddFund);
	Coltrim(sTdConFund.sMonthUsed);
	Coltrim(sTdConFund.sYearUsed);
	Coltrim(sTdConFund.sTotalUsed);
	Coltrim(sTdConFund.sMinYm);
	Coltrim(sTdConFund.sContractStatus);
	Coltrim(sTdConFund.sStatusTime);
	Coltrim(sTdConFund.sOpTime);
	Coltrim(sTdConFund.sChgFlag);

	strcpy(v_table_name,"DCONFUND");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",     ORDERDATAFORMAT_NUMBER,i_contract_no);

	OrderSetDataItem(&vMsgBodyType,"contract_no",       ORDERDATAFORMAT_NUMBER , sTdConFund.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"init_fund",        ORDERDATAFORMAT_NUMBER , sTdConFund.sInitFund);
	OrderSetDataItem(&vMsgBodyType,"current_fund",     ORDERDATAFORMAT_NUMBER , sTdConFund.sCurrentFund);
	OrderSetDataItem(&vMsgBodyType,"current_time",      ORDERDATAFORMAT_DATE   , sTdConFund.sCurrentTime);
	OrderSetDataItem(&vMsgBodyType,"month_fund",       ORDERDATAFORMAT_NUMBER , sTdConFund.sMonthFund);
	OrderSetDataItem(&vMsgBodyType,"year_fund",        ORDERDATAFORMAT_NUMBER , sTdConFund.sYearFund);
	OrderSetDataItem(&vMsgBodyType,"add_fund",         ORDERDATAFORMAT_NUMBER , sTdConFund.sAddFund);
	OrderSetDataItem(&vMsgBodyType,"month_used",        ORDERDATAFORMAT_NUMBER , sTdConFund.sMonthUsed);
	OrderSetDataItem(&vMsgBodyType,"year_used",         ORDERDATAFORMAT_NUMBER , sTdConFund.sYearUsed);
	OrderSetDataItem(&vMsgBodyType,"total_used",        ORDERDATAFORMAT_NUMBER , sTdConFund.sTotalUsed);
	OrderSetDataItem(&vMsgBodyType,"min_ym",            ORDERDATAFORMAT_NUMBER , sTdConFund.sMinYm);
	OrderSetDataItem(&vMsgBodyType,"contract_status",   ORDERDATAFORMAT_NUMBER , sTdConFund.sContractStatus);
	OrderSetDataItem(&vMsgBodyType,"status_time",       ORDERDATAFORMAT_DATE   , sTdConFund.sStatusTime);
	OrderSetDataItem(&vMsgBodyType,"op_time",       	ORDERDATAFORMAT_DATE   , sTdConFund.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"chg_flag",          ORDERDATAFORMAT_STRING , sTdConFund.sChgFlag);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++++++++++++OrderInserSendCrm,v_ret=%d\n",v_ret);
		return -500039;
	}

	return 0;

}

/*
函数名称：OrderInsertWideLoginMsg
功能描述：向dWideLoginMsg插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdWideLoginMsg    以表dWideLoginMsg建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100929
修改：
*/
int OrderInsertWideLoginMsg(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdWideLoginMsg)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdWideLoginMsg sTdWideLoginMsg;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

  Coltrim(sTdWideLoginMsg.sIdNo);
	Coltrim(sTdWideLoginMsg.sPhoneNo);
	Coltrim(sTdWideLoginMsg.sCfmLogin);
	Coltrim(sTdWideLoginMsg.sBeginTime);
	Coltrim(sTdWideLoginMsg.sEndTime);

	EXEC SQL INSERT INTO dWideLoginMsg(
										ID_NO,
										PHONE_NO,
										CFM_LOGIN,
										BEGIN_TIME,
										END_TIME)
	VALUES(to_number(:sTdWideLoginMsg.sIdNo),
			:sTdWideLoginMsg.sPhoneNo,
			:sTdWideLoginMsg.sCfmLogin,
			to_date(:sTdWideLoginMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),
			to_date(:sTdWideLoginMsg.sEndTime,'yyyymmdd hh24:mi:ss'));

	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"DWIDELOGINMSG");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

  OrderSetDataItem(&vMsgBodyType,"ID_NO",      ORDERDATAFORMAT_NUMBER, sTdWideLoginMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",      ORDERDATAFORMAT_STRING, sTdWideLoginMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"CFM_LOGIN",     ORDERDATAFORMAT_STRING, sTdWideLoginMsg.sCfmLogin);
	OrderSetDataItem(&vMsgBodyType,"BEGIN_TIME",     ORDERDATAFORMAT_DATE, sTdWideLoginMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"END_TIME",		ORDERDATAFORMAT_DATE, sTdWideLoginMsg.sEndTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500091;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500092;
	}

	return 0;
}
/*
函数名称：OrderUpdateWideLoginMsg
功能描述：向dWideLoginMsg更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20100929
修改：
*/
int OrderUpdateWideLoginMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdWideLoginMsgIndex oldIndex;
TdWideLoginMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdWideLoginMsg sTdWideLoginMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dWideLoginMsg a SET %s WHERE a.ID_NO=to_number(:NG_Param0) \
	and a.CFM_LOGIN=:NG_Param1 and a.BEGIN_TIME=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss')　%s ",i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500093;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(ID_NO), CFM_LOGIN, to_char(BEGIN_TIME,'yyyymmdd hh24:mi:ss'),
				to_char(END_TIME,'yyyymmdd hh24:mi:ss'),to_char(phone_no)
		INTO :sTdWideLoginMsg.sIdNo, :sTdWideLoginMsg.sCfmLogin,:sTdWideLoginMsg.sBeginTime, :sTdWideLoginMsg.sEndTime,
		:sTdWideLoginMsg.sPhoneNo
	FROM dWideLoginMsg
		WHERE ID_NO=to_number(:newIndex.sIdNo) and CFM_LOGIN=:newIndex.sCfmLogin
			  and BEGIN_TIME=to_date(:newIndex.sBeginTime,'yyyymmdd hh24:mi:ss');

	if (SQLCODE != SQLOK)
	{
		return -500094;
	}

	Coltrim(sTdWideLoginMsg.sIdNo);
	Coltrim(sTdWideLoginMsg.sPhoneNo);
	Coltrim(sTdWideLoginMsg.sCfmLogin);
	Coltrim(sTdWideLoginMsg.sBeginTime);
	Coltrim(sTdWideLoginMsg.sEndTime);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DWIDELOGINMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO",	 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "CFM_LOGIN", ORDERDATAFORMAT_STRING, oldIndex.sCfmLogin);
	OrderSetPrimaryKey(&vMsgBodyType, "BEGIN_TIME",ORDERDATAFORMAT_DATE, oldIndex.sBeginTime);

	OrderSetDataItem(&vMsgBodyType,"ID_NO",	 ORDERDATAFORMAT_NUMBER, sTdWideLoginMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO", ORDERDATAFORMAT_STRING, sTdWideLoginMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"CFM_LOGIN", ORDERDATAFORMAT_STRING, sTdWideLoginMsg.sCfmLogin);
	OrderSetDataItem(&vMsgBodyType,"BEGIN_TIME",ORDERDATAFORMAT_DATE, sTdWideLoginMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"END_TIME",  ORDERDATAFORMAT_DATE, sTdWideLoginMsg.sEndTime);




	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500095;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500096;

	return 0;
}

/*
函数名称：OrderDeleteWideLoginMsg
功能描述：向dWideLoginMsg删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20101209
修改：
*/
int OrderDeleteWideLoginMsg(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			oldIndex,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdWideLoginMsgIndex oldIndex;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dWideLoginMsg a WHERE a.ID_NO=to_number(:NG_Param0) \
	and a.CFM_LOGIN=:NG_Param1 and a.BEGIN_TIME=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss')  %s ",i_where_sql);



	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500097;
	}
	if (v_ret>0)
		return 1;


	strcpy(v_table_name,"DWIDELOGINMSG");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO",	 ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "CFM_LOGIN", ORDERDATAFORMAT_STRING, oldIndex.sCfmLogin);
	OrderSetPrimaryKey(&vMsgBodyType, "BEGIN_TIME",ORDERDATAFORMAT_DATE, oldIndex.sBeginTime);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500098;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500099;
	}

	return 0;
}


/*dbillquerylimit账单查询限制的表。用来限制过户后的号码，不能查询过户前的账单*/
int OrderInsertBillLimit(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdBillLimit
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillLimit	sTdBillLimit;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdBillLimit.sIdNo);
	Coltrim(sTdBillLimit.sPhoneNo);
	Coltrim(sTdBillLimit.sContractNo);
	Coltrim(sTdBillLimit.sOpTime);

	EXEC SQL INSERT INTO dbillquerylimit
					(phone_no,id_no,contract_no,op_time)
		VALUES(:sTdBillLimit.sPhoneNo,
               :sTdBillLimit.sIdNo,
               :sTdBillLimit.sContractNo,
               :sTdBillLimit.sOpTime
		      );
	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE!=-1))
		return -500030;

	strcpy(v_table_name,"DBILLQUERYLIMIT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "phone_no"  	,     ORDERDATAFORMAT_STRING , sTdBillLimit.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType, "id_no" 		,     ORDERDATAFORMAT_NUMBER , sTdBillLimit.sIdNo );
	OrderSetDataItem(&vMsgBodyType, "contract_no" 	,     ORDERDATAFORMAT_NUMBER , sTdBillLimit.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "op_time"		,     ORDERDATAFORMAT_DATE	 , sTdBillLimit.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteBillLimit(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillLimitIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dbillquerylimit a WHERE phone_no=rpad(:NG_Param0,15,' ')  \
	         and a.contract_no=to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DBILLQUERYLIMIT");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"phone_no",     ORDERDATAFORMAT_STRING,oldIndex.sPhoneNo);
	OrderSetPrimaryKey(&vMsgBodyType,"contract_no",  ORDERDATAFORMAT_NUMBER,oldIndex.sContractNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


int OrderUpdateBillLimit(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBillLimitIndex oldIndex;
TdBillLimitIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdBillLimit	sTdBillLimit;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dbillquerylimit a SET %s WHERE a.phone_no=rpad(:NG_Param0,15,' ') and a.contract_no=to_number(:NG_Param1) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)),
					nvl(phone_no,chr(0)),
                    nvl(to_char(contract_no),chr(0)),
                    nvl(to_char(op_time,'yyyymmdd hh24:mi:ss'),chr(0))
			   INTO :sTdBillLimit.sIdNo    ,
			   		:sTdBillLimit.sPhoneNo ,
                    :sTdBillLimit.sContractNo ,
                    :sTdBillLimit.sOpTime
			   FROM dBillQueryLimit
			  WHERE phone_no = :newIndex.sPhoneNo and contract_no=:newIndex.sContractNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTdBillLimit.sIdNo   );
	Coltrim( sTdBillLimit.sPhoneNo );
	Coltrim( sTdBillLimit.sContractNo);
	Coltrim( sTdBillLimit.sOpTime);


	strcpy(v_table_name,"DBILLQUERYLIMIT");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",      ORDERDATAFORMAT_NUMBER,sTdBillLimit.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"phone_no",   ORDERDATAFORMAT_STRING,sTdBillLimit.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "contract_no", ORDERDATAFORMAT_NUMBER,sTdBillLimit.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "op_time" ,    ORDERDATAFORMAT_STRING,sTdBillLimit.sOpTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}
/*
函数名称：OrderInsertDApnMsg
功能描述：向dApnMsg插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdApnMsg    以表dApnMsg建立的结构体
输出参数：
版本号：
编码作者：liujj
编码时间：20110104
修改：
*/
int OrderInsertdApnMsg(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdApnMsg)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdApnMsg sTdApnMsg;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

  Coltrim(sTdApnMsg.sLoginAccept);
	Coltrim(sTdApnMsg.sIdNo);
	Coltrim(sTdApnMsg.sPhoneNo);
	Coltrim(sTdApnMsg.sTotalDate);
	Coltrim(sTdApnMsg.sLoginNo);
	Coltrim(sTdApnMsg.sOrgCode);
	Coltrim(sTdApnMsg.sOpType);
	Coltrim(sTdApnMsg.sOpTime);
	Coltrim(sTdApnMsg.sPdpModel);
	Coltrim(sTdApnMsg.sApnCode);
	Coltrim(sTdApnMsg.sApnName);
	Coltrim(sTdApnMsg.sHlrCode);
	Coltrim(sTdApnMsg.sCommandCode);
	Coltrim(sTdApnMsg.sApnIp);
	Coltrim(sTdApnMsg.sNote);
	Coltrim(sTdApnMsg.sOrgId);

	EXEC SQL INSERT INTO dApnMsg(
													LOGIN_ACCEPT,
													ID_NO,
													PHONE_NO,
													TOTAL_DATE,
													LOGIN_NO,
													ORG_CODE,
													OP_TYPE,
													OP_TIME,
													PDPMODEL,
													APN_CODE,
													APN_NAME,
													HLR_CODE,
													COMMAND_CODE,
													APN_IP,
													NOTE,
													ORG_ID)
	VALUES(	:sTdApnMsg.sLoginAccept,
					:sTdApnMsg.sIdNo,
					:sTdApnMsg.sPhoneNo,
					:sTdApnMsg.sTotalDate,
					:sTdApnMsg.sLoginNo,
					:sTdApnMsg.sOrgCode,
					:sTdApnMsg.sOpType,
					:sTdApnMsg.sOpTime,
					:sTdApnMsg.sPdpModel,
					:sTdApnMsg.sApnCode,
					:sTdApnMsg.sApnName,
					:sTdApnMsg.sHlrCode,
					:sTdApnMsg.sCommandCode,
					:sTdApnMsg.sApnIp,
					:sTdApnMsg.sNote,
					:sTdApnMsg.sOrgId);

	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"DAPNMSG");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

  OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",	ORDERDATAFORMAT_NUMBER, sTdApnMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",    			ORDERDATAFORMAT_NUMBER, sTdApnMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",			ORDERDATAFORMAT_STRING, sTdApnMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"TOTAL_DATE",		ORDERDATAFORMAT_STRING, sTdApnMsg.sTotalDate);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_NO",			ORDERDATAFORMAT_STRING, sTdApnMsg.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"ORG_CODE",			ORDERDATAFORMAT_STRING, sTdApnMsg.sOrgCode);
	OrderSetDataItem(&vMsgBodyType,"OP_TYPE",				ORDERDATAFORMAT_STRING, sTdApnMsg.sOpType);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME",				ORDERDATAFORMAT_DATE, sTdApnMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"PDPMODEL",			ORDERDATAFORMAT_STRING, sTdApnMsg.sPdpModel);
	OrderSetDataItem(&vMsgBodyType,"APN_CODE",			ORDERDATAFORMAT_STRING, sTdApnMsg.sApnCode);
	OrderSetDataItem(&vMsgBodyType,"APN_NAME",			ORDERDATAFORMAT_STRING, sTdApnMsg.sApnName);
	OrderSetDataItem(&vMsgBodyType,"HLR_CODE",			ORDERDATAFORMAT_STRING, sTdApnMsg.sHlrCode);
	OrderSetDataItem(&vMsgBodyType,"COMMAND_CODE",	ORDERDATAFORMAT_STRING, sTdApnMsg.sCommandCode);
	OrderSetDataItem(&vMsgBodyType,"APN_IP",     		ORDERDATAFORMAT_STRING, sTdApnMsg.sApnIp);
	OrderSetDataItem(&vMsgBodyType,"NOTE",					ORDERDATAFORMAT_STRING, sTdApnMsg.sNote);
  OrderSetDataItem(&vMsgBodyType,"ORG_ID",				ORDERDATAFORMAT_STRING, sTdApnMsg.sOrgId);





	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500091;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("v_ret = [%d]\n",v_ret);
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500092;
	}

	return 0;
}


/*
函数名称：OrderDeleteDApnMsg
功能描述：向dApnMsg删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：liujj
编码时间：20110117
修改：
*/
int OrderDeleteDApnMsg(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			oldIndex,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdApnMsgIndex oldIndex;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dApnMsg a WHERE a.PHONE_NO=to_number(:NG_Param0) \
	and a.PDPMODEL=:NG_Param1 %s ",i_where_sql);



	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500097;
	}
	if (v_ret>0)
		return 1;


	strcpy(v_table_name,"DAPNMSG");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "PHONE_NO",	 ORDERDATAFORMAT_NUMBER, oldIndex.sPhoneNo);
	OrderSetPrimaryKey(&vMsgBodyType, "PDPMODEL", ORDERDATAFORMAT_STRING, oldIndex.sPdpModel);


	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500098;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500099;
	}

	return 0;
}

/*
函数名称：OrderInsertGrpProdStop
功能描述：向dGrpProdStop插入记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注

TdGrpProdStop    以表dGrpProdStop建立的结构体
输出参数：
版本号：
编码作者：zhaohx
编码时间：20111013
修改：
*/
int OrderInsertGrpProdStop(
		i_sendid_type,i_sendid_no,i_order_right,
		i_op_code,i_op_accept,i_op_login,i_op_note,
		sTdGrpProdStop)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpProdStop sTdGrpProdStop;

{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdGrpProdStop.sIdNo);
	Coltrim(sTdGrpProdStop.sAccountId);
	Coltrim(sTdGrpProdStop.sProductCode);
	Coltrim(sTdGrpProdStop.sRunCode);
	Coltrim(sTdGrpProdStop.sRunTime);
	Coltrim(sTdGrpProdStop.sLoginAccept);


	EXEC SQL INSERT INTO dGrpProdStop(id_no,
										account_id,
										product_code,
										run_code,
										run_time,
										login_accept)
	VALUES(to_number(:sTdGrpProdStop.sIdNo),
			to_number(:sTdGrpProdStop.sAccountId),
			:sTdGrpProdStop.sProductCode,
			:sTdGrpProdStop.sRunCode,
			to_date(:sTdGrpProdStop.sRunTime,'yyyymmdd hh24:mi:ss'),
		    to_number(:sTdGrpProdStop.sLoginAccept)
			);
	if( SQLCODE != SQLOK) {
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"DGRPPRODSTOP");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"id_no",      ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"account_id",     ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sAccountId);
	OrderSetDataItem(&vMsgBodyType,"product_code",     ORDERDATAFORMAT_STRING, sTdGrpProdStop.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"run_code",ORDERDATAFORMAT_STRING, sTdGrpProdStop.sRunCode);
	OrderSetDataItem(&vMsgBodyType,"run_time",    ORDERDATAFORMAT_DATE, sTdGrpProdStop.sRunTime);
	OrderSetDataItem(&vMsgBodyType,"login_accept",    ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sLoginAccept);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500081;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);
    printf("order_tpye[%s]id_tpye[%s]id_no[%s]busi_code[%s]order_right[%d]\n",v_order_data.order_type,v_order_data.id_type,v_order_data.id_no,v_order_data.busi_code,v_order_data.order_right);
	printf("op_type[%s]op_code[%s]op_accept[%ld]\n",v_order_data.op_type,v_order_data.op_code,v_order_data.op_login);
	printf("op_note[%s]data_format[%s]\n",v_order_data.op_note,v_order_data.data_format);
	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0) {
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500082;
	}

	return 0;
}
/*
函数名称：OrderUpdateGrpProdStop
功能描述：向dGrpProdStop更新记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20111013
修改：
*/
int OrderUpdateGrpProdStop(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_id_no,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpProdStop	sTdGrpProdStop;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dGrpProdStop a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500083;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT to_char(id_no), to_char(account_id), product_code, run_code,
			to_char(run_time,'yyyymmdd hh24:mi:ss'),to_char(login_accept)
	    INTO :sTdGrpProdStop.sIdNo, :sTdGrpProdStop.sAccountId, :sTdGrpProdStop.sProductCode,
			 :sTdGrpProdStop.sRunCode, :sTdGrpProdStop.sRunTime,:sTdGrpProdStop.sLoginAccept
		FROM dGrpProdStop
		WHERE id_no=:i_id_no;

	if (SQLCODE != SQLOK)
	{
		return -500084;
	}

	Coltrim(sTdGrpProdStop.sIdNo);
	Coltrim(sTdGrpProdStop.sAccountId);
	Coltrim(sTdGrpProdStop.sProductCode);
	Coltrim(sTdGrpProdStop.sRunCode);
	Coltrim(sTdGrpProdStop.sRunTime);
	Coltrim(sTdGrpProdStop.sLoginAccept);


	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DGRPPRODSTOP");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, i_id_no);

	OrderSetDataItem(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "accoount_id",	 ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sAccountId);
	OrderSetDataItem(&vMsgBodyType, "product_code",	 ORDERDATAFORMAT_STRING, sTdGrpProdStop.sProductCode);
	OrderSetDataItem(&vMsgBodyType, "run_code",	     ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sRunCode);
	OrderSetDataItem(&vMsgBodyType, "run_time",		 ORDERDATAFORMAT_DATE, sTdGrpProdStop.sRunTime);
	OrderSetDataItem(&vMsgBodyType, "login_accept",	 ORDERDATAFORMAT_NUMBER, sTdGrpProdStop.sLoginAccept);


	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500085;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500086;

	return 0;
}


/*
函数名称：OrderDeleteGrpProdStop
功能描述：向dGrpProdStop删除记录
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id		客户id
whereSql		sql语句
parameter_array	sql语句参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20111013
修改：
*/
int OrderDeleteGrpProdStop(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			i_id_no,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dGrpProdStop a WHERE  a.id_no=to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500087;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"DGRPPRODSTOP");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500088;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500089;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2011/09/27
**
**函数名称: OrderInsertBankPayCon
**功能描述: 向dBankPayCon插入数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			i_tdBankPayCon
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderInsertBankPayCon(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdBankPayCon)
char			*i_sendid_type;
char			*i_sendid_no;
int				i_order_right;

char			*i_op_code;
long			i_op_accept;
char			*i_op_login;
char			*i_op_note;

TdBankPayCon	sTdBankPayCon;
{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdBankPayCon.sBankEngName);
	Coltrim(sTdBankPayCon.sBankName);
	Coltrim(sTdBankPayCon.sIdNo);
	Coltrim(sTdBankPayCon.sPhoneNo);
	Coltrim(sTdBankPayCon.sOpCode);
	Coltrim(sTdBankPayCon.sOpTime);
	Coltrim(sTdBankPayCon.sTotalDate);
	Coltrim(sTdBankPayCon.sLoginNo);
	Coltrim(sTdBankPayCon.sOrgId);
	Coltrim(sTdBankPayCon.sLoginAccept);

	EXEC SQL INSERT
		INTO dBankPayCon
		(
			BANK_ENG_NAME,
			BANK_NAME,
			ID_NO,
			PHONE_NO,
			OP_CODE,
			OP_TIME,
			TOTAL_DATE,
			LOGIN_NO,
			ORG_ID,
			LOGIN_ACCEPT
		)
		VALUES
		(
			:sTdBankPayCon.sBankEngName,
			:sTdBankPayCon.sBankName,
			:sTdBankPayCon.sIdNo,
			:sTdBankPayCon.sPhoneNo,
			:sTdBankPayCon.sOpCode,
			:sTdBankPayCon.sOpTime,
			:sTdBankPayCon.sTotalDate,
			:sTdBankPayCon.sLoginNo,
			:sTdBankPayCon.sOrgId,
			:sTdBankPayCon.sLoginAccept
		);
	if(SQLCODE != SQLOK)
	{
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"DBANKPAYCON");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"BANK_ENG_NAME", 	ORDERDATAFORMAT_STRING, sTdBankPayCon.sBankEngName);
	OrderSetDataItem(&vMsgBodyType,"BANK_NAME",		ORDERDATAFORMAT_STRING, sTdBankPayCon.sBankName);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",			ORDERDATAFORMAT_NUMBER, sTdBankPayCon.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO", 		ORDERDATAFORMAT_STRING, sTdBankPayCon.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"OP_CODE", 		ORDERDATAFORMAT_STRING, sTdBankPayCon.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME", 		ORDERDATAFORMAT_DATE, 	sTdBankPayCon.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"TOTAL_DATE", 	ORDERDATAFORMAT_NUMBER, sTdBankPayCon.sTotalDate);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_NO", 		ORDERDATAFORMAT_STRING, sTdBankPayCon.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"ORG_ID", 		ORDERDATAFORMAT_STRING, sTdBankPayCon.sOrgId);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT", 	ORDERDATAFORMAT_NUMBER, sTdBankPayCon.sLoginAccept);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500091;
	}
	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);

	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("v_ret = [%d]\n",v_ret);
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500092;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2011/09/27
**
**函数名称: OrderDeleteBankPayCon
**功能描述: 从dBankPayCon删除数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			oldIndex
**			i_where_sql,i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderDeleteBankPayCon(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char				*i_sendid_type;
char				*i_sendid_no;
int					i_order_right;

char				*i_op_code;
long				i_op_accept;
char				*i_op_login;
char				*i_op_note;

TdBankPayConIndex	oldIndex;

char				*i_where_sql;
char				i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dBankPayCon a WHERE a.bank_eng_name=:NG_Param0 and a.id_no = to_number(:NG_Param1) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1)
	{
		return -600000;
	}

	if (v_ret < 0)
	{
		return -500033;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
	{
		return 1;
	}

	strcpy(v_table_name,"DBANKPAYCON");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"bank_eng_name", ORDERDATAFORMAT_STRING,oldIndex.sBankEngName);
	OrderSetPrimaryKey(&vMsgBodyType,"id_no", ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
	{
		return -500034;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2011/09/27
**
**函数名称: OrderUpdateBankPayCon
**功能描述: 更新dBankPayCon中数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			oldIndex,newIndex
**			i_update_sql,i_where_sql,i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderUpdateBankPayCon(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdBankPayConIndex oldIndex;
TdBankPayConIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdBankPayCon	sTdBankPayCon;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dBankPayCon a SET %s WHERE a.bank_eng_name=:NG_Param0 and a.id_no = to_number(:NG_Param1) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT bank_eng_name, bank_name, id_no,
					phone_no, op_code,
					op_time, total_date, login_no, org_id,
					login_accept
			INTO :sTdBankPayCon.sBankEngName, :sTdBankPayCon.sBankName, :sTdBankPayCon.sIdNo,
				:sTdBankPayCon.sPhoneNo, :sTdBankPayCon.sOpCode,
				:sTdBankPayCon.sOpTime, :sTdBankPayCon.sTotalDate, :sTdBankPayCon.sLoginNo, :sTdBankPayCon.sOrgId,
				:sTdBankPayCon.sLoginAccept
			FROM dBankPayCon
			WHERE bank_eng_name= :newIndex.sBankEngName
			AND id_no = to_number(:newIndex.sIdNo);
	if (SQLCODE!=SQLOK)
	{
		return -500037;
	}

	Coltrim(sTdBankPayCon.sBankEngName);
	Coltrim(sTdBankPayCon.sBankName);
	Coltrim(sTdBankPayCon.sIdNo);
	Coltrim(sTdBankPayCon.sPhoneNo);
	Coltrim(sTdBankPayCon.sOpCode);
	Coltrim(sTdBankPayCon.sOpTime);
	Coltrim(sTdBankPayCon.sTotalDate);
	Coltrim(sTdBankPayCon.sLoginNo);
	Coltrim(sTdBankPayCon.sOrgId);
	Coltrim(sTdBankPayCon.sLoginAccept);

	strcpy(v_table_name,"DBANKPAYCON");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "bank_eng_name", ORDERDATAFORMAT_STRING,sTdBankPayCon.sBankEngName);
	OrderSetDataItem(&vMsgBodyType, "bank_name", ORDERDATAFORMAT_STRING,sTdBankPayCon.sBankName);
	OrderSetPrimaryKey(&vMsgBodyType, "id_no", ORDERDATAFORMAT_NUMBER,sTdBankPayCon.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "phone_no", ORDERDATAFORMAT_STRING,sTdBankPayCon.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "op_code", ORDERDATAFORMAT_STRING,sTdBankPayCon.sOpCode);
	OrderSetDataItem(&vMsgBodyType, "op_time", ORDERDATAFORMAT_DATE,sTdBankPayCon.sOpTime);
	OrderSetDataItem(&vMsgBodyType, "total_date", ORDERDATAFORMAT_NUMBER,sTdBankPayCon.sTotalDate);
	OrderSetDataItem(&vMsgBodyType, "login_no", ORDERDATAFORMAT_STRING,sTdBankPayCon.sLoginNo);
	OrderSetDataItem(&vMsgBodyType, "org_id", ORDERDATAFORMAT_STRING,sTdBankPayCon.sOrgId);
	OrderSetDataItem(&vMsgBodyType, "login_accept", ORDERDATAFORMAT_NUMBER,sTdBankPayCon.sLoginAccept);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500038;
	}
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;
}

int OrderUpdateUmPayMsg(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	oldIndex,newIndex,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdUmPayMsgIndex oldIndex;
TdUmPayMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdUmPayMsg		tdUmPayMsg;
	EXEC SQL END DECLARE SECTION;

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	Coltrim(i_sendid_no);

	sprintf(v_sql_buff, "UPDATE dUmPayMsg a SET %s where a.phone_no=rpad(:NG_Param0,15,' ')  %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (v_ret < 0)
	{
		return -500136;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	EXEC SQL SELECT phone_no, cust_name, region_name,
					city_name, pay_name,pay_addr,
					iccid_id, bank_id, is_have,
					login_no, to_char(op_time,'yyyymmdd hh24:mi:ss') ,nvl(op_note,chr(0)),
					decode(limit_fee,null,chr(0),limit_fee), isregister
			   INTO :tdUmPayMsg.sPhoneNo, :tdUmPayMsg.sCustName, :tdUmPayMsg.sRegionName,
			   	    :tdUmPayMsg.sCityName, :tdUmPayMsg.sPayName, :tdUmPayMsg.sPayAddr,
			   	    :tdUmPayMsg.sIccidId,:tdUmPayMsg.sBankId, :tdUmPayMsg.sIsHave,
			   	    :tdUmPayMsg.sLoginNo, :tdUmPayMsg.sOpTime, :tdUmPayMsg.sOpNote,
			   	    :tdUmPayMsg.sLimitFee,:tdUmPayMsg.sIsRegister
			   FROM dUmPayMsg
			  WHERE phone_no=:newIndex.sPhoneNo;
	if (SQLCODE != SQLOK)
	{
		printf("[%d]\n",SQLCODE);
		return -500137;
	}

	Coltrim(tdUmPayMsg.sPhoneNo);
	Coltrim(tdUmPayMsg.sCustName);
	Coltrim(tdUmPayMsg.sRegionName);
	Coltrim(tdUmPayMsg.sCityName);
	Coltrim(tdUmPayMsg.sPayName);
	Coltrim(tdUmPayMsg.sPayAddr);
	Coltrim(tdUmPayMsg.sIccidId);
	Coltrim(tdUmPayMsg.sBankId);
	Coltrim(tdUmPayMsg.sIsHave);
	Coltrim(tdUmPayMsg.sLoginNo);
	Coltrim(tdUmPayMsg.sOpTime);
	printf("1[%s]\n",tdUmPayMsg.sOpNote);
	Coltrim(tdUmPayMsg.sOpNote);
	printf("2[%s]\n",tdUmPayMsg.sOpNote);
	Coltrim(tdUmPayMsg.sLimitFee);
	Coltrim(tdUmPayMsg.sIsRegister);

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DUMPAYMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "phone_no",		 ORDERDATAFORMAT_STRING, oldIndex.sPhoneNo);

	OrderSetDataItem(&vMsgBodyType, "phone_no",	    ORDERDATAFORMAT_STRING, tdUmPayMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "cust_name",	ORDERDATAFORMAT_STRING, tdUmPayMsg.sCustName);
	OrderSetDataItem(&vMsgBodyType, "region_name",	ORDERDATAFORMAT_STRING, tdUmPayMsg.sRegionName);
	OrderSetDataItem(&vMsgBodyType, "city_name",	ORDERDATAFORMAT_STRING, tdUmPayMsg.sCityName);
	OrderSetDataItem(&vMsgBodyType, "pay_name",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sPayName);
	OrderSetDataItem(&vMsgBodyType, "pay_addr",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sPayAddr);
	OrderSetDataItem(&vMsgBodyType, "iccid_id",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sIccidId);
	OrderSetDataItem(&vMsgBodyType, "bank_id",	    ORDERDATAFORMAT_STRING, tdUmPayMsg.sBankId);
	OrderSetDataItem(&vMsgBodyType, "is_have",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sIsHave);
	OrderSetDataItem(&vMsgBodyType, "login_no",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sLoginNo);
	OrderSetDataItem(&vMsgBodyType, "op_time",		ORDERDATAFORMAT_DATE,   tdUmPayMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType, "op_note",		ORDERDATAFORMAT_STRING, tdUmPayMsg.sOpNote);
	OrderSetDataItem(&vMsgBodyType, "limit_fee",	ORDERDATAFORMAT_NUMBER, tdUmPayMsg.sLimitFee);
	OrderSetDataItem(&vMsgBodyType, "isregister",	ORDERDATAFORMAT_STRING, tdUmPayMsg.sIsRegister);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500138;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500139;

	return 0;
}

/*
**Created: liujj
**Date:    2012.02.16
**
**函数名称: OrderInsertMobilePayCon
**功能描述: 向dMobilePayCon插入数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			i_tdBankPayCon
**输出参数：v_ret
**版本号：
**编码作者：liujj
**编码时间：2012.02.16
**修改：
*/

int OrderInsertMobilePayCon(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdMobilePayCon)
char			*i_sendid_type;
char			*i_sendid_no;
int				i_order_right;

char			*i_op_code;
long			i_op_accept;
char			*i_op_login;
char			*i_op_note;

TdMobilePayCon	sTdMobilePayCon;
{
	int v_ret = 0;
	char ret_msg[128+1];
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	char v_table_name[DLTABLENAME];
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	init(ret_msg);
	strcpy(ret_msg,"insert has been executed successfully!!!");
	Coltrim(i_sendid_no);

	Coltrim(sTdMobilePayCon.sIdNo);
	Coltrim(sTdMobilePayCon.sContractNo);
	Coltrim(sTdMobilePayCon.sPhoneNo);
	Coltrim(sTdMobilePayCon.sPayFlag);
	Coltrim(sTdMobilePayCon.sLimitFee);
	Coltrim(sTdMobilePayCon.sUserType);
	Coltrim(sTdMobilePayCon.sPayFee);

	EXEC SQL INSERT
		INTO dMobilePayCon
		(
			ID_NO,
			CONTRACT_NO,
			PHONE_NO,
			PAY_FLAG,
			LIMIT_FEE,
			USER_TYPE,
			PAY_FEE
		)
		VALUES
		(
			:sTdMobilePayCon.sIdNo,
			:sTdMobilePayCon.sContractNo,
			:sTdMobilePayCon.sPhoneNo,
			:sTdMobilePayCon.sPayFlag,
			:sTdMobilePayCon.sLimitFee,
			:sTdMobilePayCon.sUserType,
			:sTdMobilePayCon.sPayFee
		);
	if(SQLCODE != SQLOK)
	{
		sprintf(ret_msg,"insert failed");
		printf("[%s]\n",ret_msg);
		return -500080;
	}
	strcpy(v_table_name,"dMobilePayCon");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"ID_NO", 		ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",	ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",		ORDERDATAFORMAT_STRING, sTdMobilePayCon.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"PAY_FLAG", 		ORDERDATAFORMAT_STRING, sTdMobilePayCon.sPayFlag);
	OrderSetDataItem(&vMsgBodyType,"LIMIT_FEE", 	ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sLimitFee);
	OrderSetDataItem(&vMsgBodyType,"USER_TYPE", 	ORDERDATAFORMAT_STRING, sTdMobilePayCon.sUserType);
	OrderSetDataItem(&vMsgBodyType,"PAY_FEE", 		ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sPayFee);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500091;
	}
	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);

	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("v_ret = [%d]\n",v_ret);
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500092;
	}

	return 0;
}

/*
**Created: liujj
**Date:    2012.02.16
**
**函数名称: OrderDeleteMobilePayCon
**功能描述: 从dMobilePayCon删除数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			oldIndex
**			i_where_sql,i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderDeleteMobilePayCon(
			i_sendid_type,i_sendid_no,i_order_right,
			i_op_code,i_op_accept,i_op_login,i_op_note,
			i_id_no,
			i_where_sql, i_parameter_array)

char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char* i_where_sql;
char  i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	int v_ret = 0;
	char ret_msg[128+1] = {"delete execute sucessfully!!!"};
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dMobilePayCon a WHERE  a.id_no=to_number(:NG_Param1) ");

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
		if (v_ret<0) {
		sprintf(ret_msg,"delete execute error!!");
		printf("[%s]\n",ret_msg);
		return -500087;
	}
	if (v_ret>0)
		return 1;
	strcpy(v_table_name,"dMobilePayCon");

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500088;

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
	{
		printf("[%d][%s]\n",SQLCODE,SQLERRMSG);
		return -500089;
	}

	return 0;
}

/*
函数名称：OrderUpdateMobilePayCon
功能描述：
输入参数：
i_sendid_type  	工单类型
i_sendid_no		工单编码
i_order_right	处理权重
i_op_code		操作代码
i_op_accept		操作流水
i_op_login		工号
i_op_note		系统备注


i_cust_id			客户id
i_update_sql		sql语句
i_where_sql			sql语句
i_parameter_array	sql语句的参数列表
输出参数：
版本号：
编码作者：zhaohx
编码时间：20111013
修改：
*/
int OrderUpdateMobilePayCon(
	i_sendid_type,i_sendid_no,i_order_right,
	i_op_code,i_op_accept,i_op_login,i_op_note,
	i_id_no,
	i_update_sql, i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType	vMsgBodyType;
	char 		vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];						/*表名称*/

	EXEC SQL BEGIN DECLARE SECTION;
		char 			v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdMobilePayCon	sTdMobilePayCon;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "UPDATE dMobilePayCon a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ", i_update_sql, i_where_sql);
	printf("%s\n", v_sql_buff);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);

	if (v_ret < 0)
	{
		return -500083;
	}

	if (v_ret > 0)
	{
		return 1;
	}


	EXEC SQL SELECT id_no, contract_no, phone_no, pay_flag, nvl(limit_fee,0),user_type,nvl(pay_fee,0)
	    INTO :sTdMobilePayCon.sIdNo, :sTdMobilePayCon.sContractNo, :sTdMobilePayCon.sPhoneNo,
			 :sTdMobilePayCon.sPayFlag, :sTdMobilePayCon.sLimitFee, :sTdMobilePayCon.sUserType, :sTdMobilePayCon.sPayFee
		FROM dMobilePayCon
		WHERE id_no=:i_id_no;

	if (SQLCODE != SQLOK)
	{
		return -500084;
	}

	Coltrim(sTdMobilePayCon.sIdNo);
	Coltrim(sTdMobilePayCon.sContractNo);
	Coltrim(sTdMobilePayCon.sPhoneNo);
	Coltrim(sTdMobilePayCon.sPayFlag);
	Coltrim(sTdMobilePayCon.sLimitFee);
	Coltrim(sTdMobilePayCon.sUserType);
	Coltrim(sTdMobilePayCon.sPayFee);


	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "dMobilePayCon");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		 ORDERDATAFORMAT_NUMBER, i_id_no);

	OrderSetDataItem(&vMsgBodyType,"ID_NO", 		ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",	ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"PHONE_NO",		ORDERDATAFORMAT_STRING, sTdMobilePayCon.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"PAY_FLAG", 		ORDERDATAFORMAT_STRING, sTdMobilePayCon.sPayFlag);
	OrderSetDataItem(&vMsgBodyType,"LIMIT_FEE", 	ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sLimitFee);
	OrderSetDataItem(&vMsgBodyType,"USER_TYPE", 	ORDERDATAFORMAT_STRING, sTdMobilePayCon.sUserType);
	OrderSetDataItem(&vMsgBodyType,"PAY_FEE", 	ORDERDATAFORMAT_NUMBER, sTdMobilePayCon.sPayFee);

	v_ret=OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500085;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret!=0)
		return -500086;

	return 0;
}

int OrderInsertdApprovalOpr(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdApprovalOpr
						)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdApprovalOpr	sTdApprovalOpr;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdApprovalOpr.sLoginAccept);
	Coltrim(sTdApprovalOpr.sCustId);
	Coltrim(sTdApprovalOpr.sIdNo);
	Coltrim(sTdApprovalOpr.sContractNo);
	Coltrim(sTdApprovalOpr.sProductCode);
	Coltrim(sTdApprovalOpr.sMinYM);
	Coltrim(sTdApprovalOpr.sOweFee);
	Coltrim(sTdApprovalOpr.sOpType);
	Coltrim(sTdApprovalOpr.sTypeOrder);
	Coltrim(sTdApprovalOpr.sApplyLogin);
	Coltrim(sTdApprovalOpr.sApprovalLogin);
	Coltrim(sTdApprovalOpr.sOpTime);

	EXEC SQL INSERT INTO dApprovalOpr(LOGIN_ACCEPT, CUST_ID, ID_NO, CONTRACT_NO,PRODUCT_CODE,
																		MIN_YM,OWE_FEE,OP_TYPE,TYPE_ORDER,APPLY_LOGIN,APPROVAL_LOGIN,OP_TIME)
					VALUES(to_number(:sTdApprovalOpr.sLoginAccept),to_number(:sTdApprovalOpr.sCustId),
								to_number(:sTdApprovalOpr.sIdNo),to_number(:sTdApprovalOpr.sContractNo),:sTdApprovalOpr.sProductCode,
								to_number(:sTdApprovalOpr.sMinYM),to_number(:sTdApprovalOpr.sOweFee),
								to_number(:sTdApprovalOpr.sOpType),to_number(:sTdApprovalOpr.sTypeOrder),:sTdApprovalOpr.sApplyLogin,
								:sTdApprovalOpr.sApprovalLogin,to_date(:sTdApprovalOpr.sOpTime,'yyyymmdd hh24:mi:ss'));

	if (SQLCODE != SQLOK)
	{
		return -500030;
	}
	strcpy(v_table_name,"dApprovalOpr");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"CUST_ID",ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sCustId);
	OrderSetDataItem(&vMsgBodyType,"ID_NO", ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",   ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"PRODUCT_CODE",    ORDERDATAFORMAT_STRING,sTdApprovalOpr.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"MIN_YM",ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sMinYM);
	OrderSetDataItem(&vMsgBodyType,"OWE_FEE", ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sOweFee);
	OrderSetDataItem(&vMsgBodyType,"OP_TYPE",   ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sOpType);
	OrderSetDataItem(&vMsgBodyType,"TYPE_ORDER",    ORDERDATAFORMAT_NUMBER,sTdApprovalOpr.sTypeOrder);
	OrderSetDataItem(&vMsgBodyType,"APPLY_LOGIN",ORDERDATAFORMAT_STRING,sTdApprovalOpr.sApplyLogin);
	OrderSetDataItem(&vMsgBodyType,"APPROVAL_LOGIN", ORDERDATAFORMAT_STRING,sTdApprovalOpr.sApprovalLogin);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME",   ORDERDATAFORMAT_DATE,sTdApprovalOpr.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderInsertdApprovalOprhis(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdApprovalOprhis
						)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdApprovalOprhis	sTdApprovalOprhis;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdApprovalOprhis.sLoginAccept);
	Coltrim(sTdApprovalOprhis.sCustId);
	Coltrim(sTdApprovalOprhis.sIdNo);
	Coltrim(sTdApprovalOprhis.sContractNo);
	Coltrim(sTdApprovalOprhis.sProductCode);
	Coltrim(sTdApprovalOprhis.sMinYM);
	Coltrim(sTdApprovalOprhis.sOweFee);
	Coltrim(sTdApprovalOprhis.sOpType);
	Coltrim(sTdApprovalOprhis.sTypeOrder);
	Coltrim(sTdApprovalOprhis.sApplyFlag);
	Coltrim(sTdApprovalOprhis.sApplyLogin);
	Coltrim(sTdApprovalOprhis.sApprovalLogin);
	Coltrim(sTdApprovalOprhis.sOpTime);
	Coltrim(sTdApprovalOprhis.sInsetTime);


	EXEC SQL INSERT INTO dApprovalOprhis(LOGIN_ACCEPT, CUST_ID, ID_NO, CONTRACT_NO,PRODUCT_CODE,
																		MIN_YM,OWE_FEE,OP_TYPE,TYPE_ORDER,APPLY_FLAG,APPLY_LOGIN,APPROVAL_LOGIN,OP_TIME,INSET_TIME)
					VALUES(to_number(:sTdApprovalOprhis.sLoginAccept),to_number(:sTdApprovalOprhis.sCustId),
								to_number(:sTdApprovalOprhis.sIdNo),to_number(:sTdApprovalOprhis.sContractNo),:sTdApprovalOprhis.sProductCode,
								to_number(:sTdApprovalOprhis.sMinYM),to_number(:sTdApprovalOprhis.sOweFee),
								to_number(:sTdApprovalOprhis.sOpType),to_number(:sTdApprovalOprhis.sTypeOrder),:sTdApprovalOprhis.sApplyFlag,
								:sTdApprovalOprhis.sApplyLogin,:sTdApprovalOprhis.sApprovalLogin,
								to_date(:sTdApprovalOprhis.sOpTime,'yyyymmdd hh24:mi:ss'),
								to_date(:sTdApprovalOprhis.sInsetTime,'yyyymmdd hh24:mi:ss'));

	if (SQLCODE != SQLOK)
	{
		return -500030;
	}
	strcpy(v_table_name,"dApprovalOprhis");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"CUST_ID",ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sCustId);
	OrderSetDataItem(&vMsgBodyType,"ID_NO", ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"CONTRACT_NO",   ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sContractNo);
	OrderSetDataItem(&vMsgBodyType,"PRODUCT_CODE",    ORDERDATAFORMAT_STRING,sTdApprovalOprhis.sProductCode);
	OrderSetDataItem(&vMsgBodyType,"MIN_YM",ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sMinYM);
	OrderSetDataItem(&vMsgBodyType,"OWE_FEE", ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sOweFee);
	OrderSetDataItem(&vMsgBodyType,"OP_TYPE",   ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sOpType);
	OrderSetDataItem(&vMsgBodyType,"TYPE_ORDER",    ORDERDATAFORMAT_NUMBER,sTdApprovalOprhis.sTypeOrder);
	OrderSetDataItem(&vMsgBodyType,"APPLY_FLAG",   ORDERDATAFORMAT_STRING,sTdApprovalOprhis.sApplyFlag);
	OrderSetDataItem(&vMsgBodyType,"APPLY_LOGIN",ORDERDATAFORMAT_STRING,sTdApprovalOprhis.sApplyLogin);
	OrderSetDataItem(&vMsgBodyType,"APPROVAL_LOGIN", ORDERDATAFORMAT_STRING,sTdApprovalOprhis.sApprovalLogin);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME",   ORDERDATAFORMAT_DATE,sTdApprovalOprhis.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"INSET_TIME",   ORDERDATAFORMAT_DATE,sTdApprovalOprhis.sInsetTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeletedApprovalOpr(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dApprovalOpr a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"dApprovalOpr");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500035;
	}

	return 0;
}

int OrderInsertdGrpCustAwoke(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdGrpCustAwoke
						)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdGrpCustAwoke	sTdGrpCustAwoke;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdGrpCustAwoke.sCustID);
	Coltrim(sTdGrpCustAwoke.sIdNo);
	Coltrim(sTdGrpCustAwoke.sAwokeType);
	Coltrim(sTdGrpCustAwoke.sAwokeFeeFz);
	Coltrim(sTdGrpCustAwoke.sReAwokeDay);
	Coltrim(sTdGrpCustAwoke.sTimeFlag);
	Coltrim(sTdGrpCustAwoke.sWeekDay);
	Coltrim(sTdGrpCustAwoke.sMonthDay);
	Coltrim(sTdGrpCustAwoke.sLoginAccept);
	Coltrim(sTdGrpCustAwoke.sNote);
	Coltrim(sTdGrpCustAwoke.sSendPhone);
	Coltrim(sTdGrpCustAwoke.sOpTime);

	EXEC SQL INSERT INTO dGrpCustAwoke(CUST_ID, ID_NO, AWOKE_TYPE, AWOKE_FEE_FZ,REAWOKE_DAY,
																		TIME_FLAG,WEEK_DAY,MONTH_DAY,LOGIN_ACCEPT,NOTE,SEND_PHONE,OP_TIME)
					VALUES(to_number(:sTdGrpCustAwoke.sCustID),to_number(:sTdGrpCustAwoke.sIdNo),
								:sTdGrpCustAwoke.sAwokeType,to_number(:sTdGrpCustAwoke.sAwokeFeeFz),to_number(:sTdGrpCustAwoke.sReAwokeDay),
								:sTdGrpCustAwoke.sTimeFlag,:sTdGrpCustAwoke.sWeekDay,:sTdGrpCustAwoke.sMonthDay,
								to_number(:sTdGrpCustAwoke.sLoginAccept),:sTdGrpCustAwoke.sNote,:sTdGrpCustAwoke.sSendPhone,
								to_date(:sTdGrpCustAwoke.sOpTime,'yyyymmdd hh24:mi:ss'));

	if (SQLCODE != SQLOK)
	{
		return -500030;
	}
	strcpy(v_table_name,"dGrpCustAwoke");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"CUST_ID",    ORDERDATAFORMAT_NUMBER,sTdGrpCustAwoke.sCustID);
	OrderSetDataItem(&vMsgBodyType,"ID_NO",ORDERDATAFORMAT_NUMBER,sTdGrpCustAwoke.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"AWOKE_TYPE", ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sAwokeType);
	OrderSetDataItem(&vMsgBodyType,"AWOKE_FEE_FZ",   ORDERDATAFORMAT_NUMBER,sTdGrpCustAwoke.sAwokeFeeFz);
	OrderSetDataItem(&vMsgBodyType,"REAWOKE_DAY",    ORDERDATAFORMAT_NUMBER,sTdGrpCustAwoke.sReAwokeDay);
	OrderSetDataItem(&vMsgBodyType,"TIME_FLAG",ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sTimeFlag);
	OrderSetDataItem(&vMsgBodyType,"WEEK_DAY", ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sWeekDay);
	OrderSetDataItem(&vMsgBodyType,"MONTH_DAY",   ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sMonthDay);
	OrderSetDataItem(&vMsgBodyType,"LOGIN_ACCEPT",    ORDERDATAFORMAT_NUMBER,sTdGrpCustAwoke.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"NOTE",   ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sNote);
	OrderSetDataItem(&vMsgBodyType,"SEND_PHONE", ORDERDATAFORMAT_STRING,sTdGrpCustAwoke.sSendPhone);
	OrderSetDataItem(&vMsgBodyType,"OP_TIME",   ORDERDATAFORMAT_DATE,sTdGrpCustAwoke.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderUpdatedGrpCustAwoke(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdGrpCustAwoke	sTdGrpCustAwoke;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dGrpCustAwoke a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(AWOKE_FEE_FZ),NOTE,SEND_PHONE
			INTO :sTdGrpCustAwoke.sAwokeFeeFz,:sTdGrpCustAwoke.sNote,:sTdGrpCustAwoke.sSendPhone
			FROM dGrpCustAwoke
			WHERE id_no = :i_id_no;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdGrpCustAwoke.sAwokeFeeFz);
	Coltrim(sTdGrpCustAwoke.sNote);
	Coltrim(sTdGrpCustAwoke.sSendPhone);

	strcpy(v_table_name,"dGrpCustAwoke");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	OrderSetDataItem(&vMsgBodyType,"AWOKE_FEE_FZ",		ORDERDATAFORMAT_NUMBER, sTdGrpCustAwoke.sAwokeFeeFz);
	OrderSetDataItem(&vMsgBodyType,"NOTE",	ORDERDATAFORMAT_STRING, sTdGrpCustAwoke.sNote);
	OrderSetDataItem(&vMsgBodyType,"SEND_PHONE",	ORDERDATAFORMAT_STRING, sTdGrpCustAwoke.sSendPhone);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertdApprovalRelmsg(i_sendid_type,i_login_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdApprovalRelmsg
						)
char *i_sendid_type;
char *i_login_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdApprovalRelmsg	sTdApprovalRelmsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_login_no);

	Coltrim(sTdApprovalRelmsg.sApplyLogin);
	Coltrim(sTdApprovalRelmsg.sApplyPhone);
	Coltrim(sTdApprovalRelmsg.sApprovalLogin);
	Coltrim(sTdApprovalRelmsg.sApprovalPhone);
	Coltrim(sTdApprovalRelmsg.sApplyOrder);
	Coltrim(sTdApprovalRelmsg.sApprovalOrder);
	Coltrim(sTdApprovalRelmsg.sEffDate);
	Coltrim(sTdApprovalRelmsg.sExpDate);

	EXEC SQL INSERT INTO dApprovalRelmsg(APPLY_LOGIN, APPLY_PHONE, APPROVAL_LOGIN, APPROVAL_PHONE,APPLY_ORDER,
																		APPROVAL_ORDER,EFF_DATE,EXP_DATE)
					VALUES(:sTdApprovalRelmsg.sApplyLogin,:sTdApprovalRelmsg.sApplyPhone,
								:sTdApprovalRelmsg.sApprovalLogin,:sTdApprovalRelmsg.sApprovalPhone,to_number(:sTdApprovalRelmsg.sApplyOrder),
								to_number(:sTdApprovalRelmsg.sApprovalOrder),
								to_date(:sTdApprovalRelmsg.sEffDate,'yyyymmdd'),
								to_date(:sTdApprovalRelmsg.sExpDate,'yyyymmdd'));

	if (SQLCODE != SQLOK)
	{
		return -500030;
	}
	strcpy(v_table_name,"dApprovalRelmsg");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"APPLY_LOGIN",    ORDERDATAFORMAT_STRING,sTdApprovalRelmsg.sApplyLogin);
	OrderSetDataItem(&vMsgBodyType,"APPLY_PHONE",   ORDERDATAFORMAT_STRING,sTdApprovalRelmsg.sApplyPhone);
	OrderSetDataItem(&vMsgBodyType,"APPROVAL_LOGIN", ORDERDATAFORMAT_STRING,sTdApprovalRelmsg.sApprovalLogin);
	OrderSetDataItem(&vMsgBodyType,"APPROVAL_PHONE",   ORDERDATAFORMAT_STRING,sTdApprovalRelmsg.sApprovalPhone);
	OrderSetDataItem(&vMsgBodyType,"APPLY_ORDER",    ORDERDATAFORMAT_NUMBER,sTdApprovalRelmsg.sApplyOrder);
	OrderSetDataItem(&vMsgBodyType,"APPROVAL_ORDER",  ORDERDATAFORMAT_NUMBER,sTdApprovalRelmsg.sApprovalOrder);
	OrderSetDataItem(&vMsgBodyType,"EFF_DATE", ORDERDATAFORMAT_DATE,sTdApprovalRelmsg.sEffDate);
	OrderSetDataItem(&vMsgBodyType,"EXP_DATE",   ORDERDATAFORMAT_DATE,sTdApprovalRelmsg.sExpDate);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_login_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderUpdatedApprovalOprhis(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_login_accept,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_login_accept;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdApprovalOprhis	sTdApprovalOprhis;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dApprovalOprhis a SET %s WHERE a.login_accept=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		printf("-------%d\n",v_ret);
		return -500036;
	}
	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT APPLY_FLAG
			INTO :sTdApprovalOprhis.sApplyFlag
			FROM dApprovalOprhis
			WHERE login_accept = :i_login_accept;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdApprovalOprhis.sApplyFlag);

	strcpy(v_table_name,"dApprovalOprhis");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"login_accept",ORDERDATAFORMAT_NUMBER,i_login_accept);
	OrderSetDataItem(&vMsgBodyType,"apply_flag",	ORDERDATAFORMAT_STRING, sTdApprovalOprhis.sApplyFlag);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertConsumeAwakeMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdConsumeAwakeMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConsumeAwakeMsg	sTdConsumeAwakeMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdConsumeAwakeMsg.sAcceptNo   );
	Coltrim(sTdConsumeAwakeMsg.sIdNo       );
	Coltrim(sTdConsumeAwakeMsg.sPhoneNo    );
	Coltrim(sTdConsumeAwakeMsg.sAwakeType );
	Coltrim(sTdConsumeAwakeMsg.sOpCode     );
	Coltrim(sTdConsumeAwakeMsg.sLoginNo    );
	Coltrim(sTdConsumeAwakeMsg.sTotalDate  );
	Coltrim(sTdConsumeAwakeMsg.sOpTime     );

	EXEC SQL INSERT INTO dConsumeAwakeMsg(ACCEPT_NO,ID_NO, PHONE_NO, AWAKE_TYPE,
						OP_CODE,LOGIN_NO,TOTAL_DATE, OP_TIME)
		VALUES(
				to_number(:sTdConsumeAwakeMsg.sAcceptNo)   ,
				to_number(:sTdConsumeAwakeMsg.sIdNo)       ,
				:sTdConsumeAwakeMsg.sPhoneNo    ,
				:sTdConsumeAwakeMsg.sAwakeType,
				:sTdConsumeAwakeMsg.sOpCode,
				:sTdConsumeAwakeMsg.sLoginNo    ,
				to_number(:sTdConsumeAwakeMsg.sTotalDate)  ,
				to_date(:sTdConsumeAwakeMsg.sOpTime,'yyyymmdd hh24:mi:ss')
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DCONSUMEAWAKEMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "accept_no"    , ORDERDATAFORMAT_NUMBER , sTdConsumeAwakeMsg.sAcceptNo   );
	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdConsumeAwakeMsg.sIdNo       );
	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING , sTdConsumeAwakeMsg.sPhoneNo    );
	OrderSetDataItem(&vMsgBodyType, "awake_type"   , ORDERDATAFORMAT_STRING , sTdConsumeAwakeMsg.sAwakeType  );
	OrderSetDataItem(&vMsgBodyType, "op_code"      , ORDERDATAFORMAT_STRING , sTdConsumeAwakeMsg.sOpCode     );
	OrderSetDataItem(&vMsgBodyType, "login_no"     , ORDERDATAFORMAT_STRING , sTdConsumeAwakeMsg.sLoginNo    );
	OrderSetDataItem(&vMsgBodyType, "total_date"   , ORDERDATAFORMAT_NUMBER , sTdConsumeAwakeMsg.sTotalDate  );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdConsumeAwakeMsg.sOpTime     );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}
int OrderDeleteConsumeAwakeMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdConsumeAwakeMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dConsumeAwakeMsg a WHERE a.id_no=to_number(:NG_Param0) \
	        and a.awake_type=:NG_Param1  %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCONSUMEAWAKEMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType,"awake_type",	ORDERDATAFORMAT_STRING,oldIndex.sAwakeType);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2012/04/25
**
**函数名称: OrderInsertOneWapUserLogon
**功能描述: 向dOneWapUserLogon插入数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			i_tdOneWapUserLogon
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2012/04/25
**修改：
*/

int OrderInsertOneWapUserLogon(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdOneWapUserLogon)
char			*i_sendid_type;
char			*i_sendid_no;
int				i_order_right;

char			*i_op_code;
long			i_op_accept;
char			*i_op_login;
char			*i_op_note;

TdOneWapUserLogon	sTdOneWapUserLogon;
{
	int					v_ret = 0;
	char				ret_msg[128+1];
	MsgBodyType			vMsgBodyType;
	char				vXmlString[DLINTERFACEARRAY * DLINTERFACEDATA];
	OrderTable			v_order_data;
	char				v_table_name[DLTABLENAME];
	OrderDetTable		v_orderdet_data[DLINTERFACEARRAY];

	init(ret_msg);
	strcpy(ret_msg, "insert has been executed successfully!!!");

	Coltrim(i_sendid_no);

	Coltrim(sTdOneWapUserLogon.sIdentCode);
	Coltrim(sTdOneWapUserLogon.sIdentEfft);
	Coltrim(sTdOneWapUserLogon.sIdentUnefft);
	Coltrim(sTdOneWapUserLogon.sAuthGrade);
	Coltrim(sTdOneWapUserLogon.sIdType);
	Coltrim(sTdOneWapUserLogon.sIdItemRange);
	Coltrim(sTdOneWapUserLogon.sWapSessionId);
	Coltrim(sTdOneWapUserLogon.sOprNumb);

	EXEC SQL INSERT
		INTO dOneWapUserLogon
		(
			identcode,
			ident_efft,
			ident_unefft,
			authgrade,
			idtype,
			iditemrange,
			wap_session_id,
			oprnumb
		)
		VALUES
		(
			:sTdOneWapUserLogon.sIdentCode,
			to_date(:sTdOneWapUserLogon.sIdentEfft, 'yyyy/mm/dd hh24:mi:ss'),
			to_date(:sTdOneWapUserLogon.sIdentUnefft, 'yyyy/mm/dd hh24:mi:ss'),
			:sTdOneWapUserLogon.sAuthGrade,
			:sTdOneWapUserLogon.sIdType,
			:sTdOneWapUserLogon.sIdItemRange,
			:sTdOneWapUserLogon.sWapSessionId,
			:sTdOneWapUserLogon.sOprNumb
		);
	if(SQLCODE != SQLOK)
	{
		sprintf(ret_msg, "insert failed [SQLCODE=%d]", SQLCODE);
		printf("[%s]\n", ret_msg);
		return -500080;
	}
	strcpy(v_table_name, "DONEWAPUSERLOGON");
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "IDENTCODE",		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdentCode);
	OrderSetDataItem(&vMsgBodyType, "IDENT_EFFT",		ORDERDATAFORMAT_DATE, sTdOneWapUserLogon.sIdentEfft);
	OrderSetDataItem(&vMsgBodyType, "IDENT_UNEFFT",		ORDERDATAFORMAT_DATE, sTdOneWapUserLogon.sIdentUnefft);
	OrderSetDataItem(&vMsgBodyType, "AUTHGRADE", 		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sAuthGrade);
	OrderSetDataItem(&vMsgBodyType, "IDTYPE",			ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdType);
	OrderSetDataItem(&vMsgBodyType, "IDITEMRANGE",		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdItemRange);
	OrderSetDataItem(&vMsgBodyType, "WAP_SESSION_ID",	ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sWapSessionId);
	OrderSetDataItem(&vMsgBodyType, "OPRNUMB", 			ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sOprNumb);

	v_ret = OrderGenXml(&vMsgBodyType, vXmlString);
	if(v_ret < 0)
	{
		return -500091;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	OrderInitStructOrder(&v_order_data);

	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret = OrderInserSendCrm(&v_order_data, vXmlString);
	if(v_ret != 0)
	{
		/*sprintf(ret_msg,"function execute error!!");*/
		printf("v_ret = [%d]\n", v_ret);
		printf("[%d][%s]\n", SQLCODE, SQLERRMSG);
		return -500092;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2012/04/25
**
**函数名称: OrderDeleteOneWapUserLogon
**功能描述: 从dOneWapUserLogon删除数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			oldIndex
**			i_where_sql,i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderDeleteOneWapUserLogon(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char				*i_sendid_type;
char				*i_sendid_no;
int					i_order_right;

char				*i_op_code;
long				i_op_accept;
char				*i_op_login;
char				*i_op_note;

TdOneWapUserLogonIndex	oldIndex;

char				*i_where_sql;
char				i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char				v_sql_buff[DLMAXITEMS * DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int					v_ret;
	MsgBodyType			vMsgBodyType;
	char				vXmlString[DLINTERFACEARRAY * DLINTERFACEDATA];
	OrderTable			v_order_data;
	OrderDetTable		v_orderdet_data[DLINTERFACEARRAY];
	char				v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff, "DELETE dOneWapUserLogon a WHERE a.idtype=:NG_Param0 and a.iditemrange=:NG_Param1 %s ", i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if(v_ret < 0)
	{
		return -500033;
	}

	/*没有更新到数据，可以不做后续处理*/
	if(v_ret > 0)
	{
		return 1;
	}

	strcpy(v_table_name, "DONEWAPUSERLOGON");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "idtype", ORDERDATAFORMAT_STRING, oldIndex.sIdType);
	OrderSetPrimaryKey(&vMsgBodyType, "iditemrange", ORDERDATAFORMAT_STRING, oldIndex.sIdItemRange);

	v_ret = OrderGenXml(&vMsgBodyType, vXmlString);
	if(v_ret < 0)
	{
		return -500034;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type, ORDERTYPEDATA);
	strcpy(v_order_data.id_type, i_sendid_type);
	strcpy(v_order_data.id_no, i_sendid_no);
	strcpy(v_order_data.busi_code, v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type, ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code, i_op_code);
	v_order_data.op_accept = i_op_accept;
	strcpy(v_order_data.op_login, i_op_login);
	strcpy(v_order_data.op_note, i_op_note);
	strcpy(v_order_data.data_format, ORDERDATAFORMAT_XML);

	v_ret = OrderInserSendCrm(&v_order_data, vXmlString);
	if(v_ret != 0)
	{
		printf("delete_v_ret = %d\n", v_ret);
		return -500035;
	}

	return 0;
}

/*
**Created: WHL
**Date:    2012/04/25
**
**函数名称: OrderUpdateOneWapUserLogon
**功能描述: 更新dOneWapUserLogon中数据
**输入参数：i_op_code
**			i_sendid_type,i_sendid_no,i_order_right,分表关键字及工单处理权重
**			i_op_code,i_op_accept,i_op_login,i_op_note,操作类数据
**			oldIndex,newIndex
**			i_update_sql,i_where_sql,i_parameter_array
**输出参数：v_ret
**版本号：
**编码作者：WHL
**编码时间：2011/09/27
**修改：
*/

int OrderUpdateOneWapUserLogon(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char			*i_sendid_type;
char			*i_sendid_no;
int				i_order_right;

char			*i_op_code;
long			i_op_accept;
char			*i_op_login;
char			*i_op_note;

TdOneWapUserLogonIndex 		oldIndex;
TdOneWapUserLogonIndex 		newIndex;

char			*i_update_sql;
char			*i_where_sql;
char			i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int					v_ret;
	MsgBodyType			vMsgBodyType;
	char				vXmlString[DLINTERFACEARRAY * DLINTERFACEDATA];
	OrderTable			v_order_data;
	OrderDetTable		v_orderdet_data[DLINTERFACEARRAY];
	char				v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char					v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdOneWapUserLogon		sTdOneWapUserLogon;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff, "UPDATE dOneWapUserLogon a SET %s WHERE a.idtype=:NG_Param0 and a.iditemrange=:NG_Param1 %s and sysdate between ident_efft and ident_unefft", i_update_sql, i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if(v_ret < 0)
	{
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if(v_ret > 0 )
	{
		return 1;
	}

	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT identcode, to_char(ident_efft, 'yyyymmddhh24miss'), to_char(ident_unefft, 'yyyymmddhh24miss'), authgrade,
					idtype, iditemrange, wap_session_id, oprnumb
			INTO :sTdOneWapUserLogon.sIdentCode, :sTdOneWapUserLogon.sIdentEfft, :sTdOneWapUserLogon.sIdentUnefft, :sTdOneWapUserLogon.sAuthGrade,
				:sTdOneWapUserLogon.sIdType, :sTdOneWapUserLogon.sIdItemRange, :sTdOneWapUserLogon.sWapSessionId, :sTdOneWapUserLogon.sOprNumb
			FROM dOneWapUserLogon
			WHERE idType = :newIndex.sIdType
			AND iditemrange = :newIndex.sIdItemRange
			AND identcode = :newIndex.sIdentCode
			AND sysdate between ident_efft and ident_unefft;
	if(SQLCODE != SQLOK)
	{
		return -500037;
	}

	Coltrim(sTdOneWapUserLogon.sIdentCode);
	Coltrim(sTdOneWapUserLogon.sIdentEfft);
	Coltrim(sTdOneWapUserLogon.sIdentUnefft);
	Coltrim(sTdOneWapUserLogon.sAuthGrade);
	Coltrim(sTdOneWapUserLogon.sIdType);
	Coltrim(sTdOneWapUserLogon.sIdItemRange);
	Coltrim(sTdOneWapUserLogon.sWapSessionId);
	Coltrim(sTdOneWapUserLogon.sOprNumb);

	strcpy(v_table_name, "DONEWAPUSERLOGON");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "idtype",	 ORDERDATAFORMAT_STRING, newIndex.sIdType);
	OrderSetPrimaryKey(&vMsgBodyType, "iditemrange", ORDERDATAFORMAT_STRING, newIndex.sIdItemRange);
	OrderSetPrimaryKey(&vMsgBodyType, "identcode", ORDERDATAFORMAT_STRING, newIndex.sIdentCode);

	OrderSetDataItem(&vMsgBodyType, "identcode",		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdentCode);
	OrderSetDataItem(&vMsgBodyType, "ident_efft",		ORDERDATAFORMAT_DATE, sTdOneWapUserLogon.sIdentEfft);
	OrderSetDataItem(&vMsgBodyType, "ident_unefft",		ORDERDATAFORMAT_DATE, sTdOneWapUserLogon.sIdentUnefft);
	OrderSetDataItem(&vMsgBodyType, "authgrade",		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sAuthGrade);
	OrderSetDataItem(&vMsgBodyType, "idtype",			ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdType);
	OrderSetDataItem(&vMsgBodyType, "iditemrange",		ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sIdItemRange);
	OrderSetDataItem(&vMsgBodyType, "wap_session_id",	ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sWapSessionId);
	OrderSetDataItem(&vMsgBodyType, "oprnumb",			ORDERDATAFORMAT_STRING, sTdOneWapUserLogon.sOprNumb);

	v_ret = OrderGenXml(&vMsgBodyType, vXmlString);
	if(v_ret < 0)
	{
		return -500038;
	}
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret = OrderInserSendCrm(&v_order_data, vXmlString);
	if(v_ret != 0)
	{
		return -500039;
	}

	return 0;
}
int OrderInsertMifiAwakeMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdMifiAwakeMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdMifiAwakeMsg	sTdMifiAwakeMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdMifiAwakeMsg.sIdNo      );
	Coltrim(sTdMifiAwakeMsg.sPhoneNo   );
	Coltrim(sTdMifiAwakeMsg.sCustId    );
	Coltrim(sTdMifiAwakeMsg.sGprsPhone );
	Coltrim(sTdMifiAwakeMsg.sModeCode  );
	Coltrim(sTdMifiAwakeMsg.sOpTime    );
	Coltrim(sTdMifiAwakeMsg.sBeginTime );
	Coltrim(sTdMifiAwakeMsg.sEndTime   );

	EXEC SQL INSERT INTO dMifiAwakeMsg(ID_NO,PHONE_NO,CUST_ID,GPRS_PHONE,
						MODE_CODE,OP_TIME,BEGIN_TIME,END_TIME)
		VALUES(
				to_number(:sTdMifiAwakeMsg.sIdNo),
				:sTdMifiAwakeMsg.sPhoneNo    ,
				to_number(:sTdMifiAwakeMsg.sCustId),
				:sTdMifiAwakeMsg.sGprsPhone,
				:sTdMifiAwakeMsg.sModeCode,
				to_date(:sTdMifiAwakeMsg.sOpTime,'yyyymmdd hh24:mi:ss'),
				to_date(:sTdMifiAwakeMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),
				to_date(:sTdMifiAwakeMsg.sEndTime,'yyyymmdd hh24:mi:ss')
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DMIFIAWAKEMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"        , ORDERDATAFORMAT_NUMBER , sTdMifiAwakeMsg.sIdNo      );
	OrderSetDataItem(&vMsgBodyType, "phone_no"     , ORDERDATAFORMAT_STRING , sTdMifiAwakeMsg.sPhoneNo   );
	OrderSetDataItem(&vMsgBodyType, "cust_id"      , ORDERDATAFORMAT_NUMBER , sTdMifiAwakeMsg.sCustId    );
	OrderSetDataItem(&vMsgBodyType, "gprs_phone"   , ORDERDATAFORMAT_STRING , sTdMifiAwakeMsg.sGprsPhone );
	OrderSetDataItem(&vMsgBodyType, "mode_code"    , ORDERDATAFORMAT_STRING , sTdMifiAwakeMsg.sModeCode  );
	OrderSetDataItem(&vMsgBodyType, "op_time"      , ORDERDATAFORMAT_DATE   , sTdMifiAwakeMsg.sOpTime    );
	OrderSetDataItem(&vMsgBodyType, "begin_time"   , ORDERDATAFORMAT_DATE   , sTdMifiAwakeMsg.sBeginTime );
	OrderSetDataItem(&vMsgBodyType, "end_time"     , ORDERDATAFORMAT_DATE   , sTdMifiAwakeMsg.sEndTime   );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}
int OrderUpdateMifiAwake(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   i_id_no,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdMifiAwakeMsg	sTdMifiAwakeMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);
	Coltrim(i_id_no);

	init(v_sql_buff);
	memset(&sTdMifiAwakeMsg,0,sizeof(sTdMifiAwakeMsg));

	sprintf(v_sql_buff,"UPDATE dMifiAwakeMsg a SET %s WHERE a.id_no=to_number(:NG_Param0) %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
	{
		printf("+++++++++++OrderMultiParaDML,v_ret=%d\n",v_ret);
		return -500036;
	}

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(id_no),
					phone_no,
					to_char(cust_id),
					gprs_phone,
					mode_code,
					to_char(op_time,'yyyymmdd hh24:mi:ss'),
					to_char(begin_time,'yyyymmdd hh24:mi:ss'),
					to_char(end_time,'yyyymmdd hh24:mi:ss')
			INTO :sTdMifiAwakeMsg.sIdNo,
				 :sTdMifiAwakeMsg.sPhoneNo,
				 :sTdMifiAwakeMsg.sCustId,
				 :sTdMifiAwakeMsg.sGprsPhone,
				 :sTdMifiAwakeMsg.sModeCode,
				 :sTdMifiAwakeMsg.sOpTime,
				 :sTdMifiAwakeMsg.sBeginTime,
				 :sTdMifiAwakeMsg.sEndTime
			FROM dMifiAwakeMsg
			WHERE id_no = to_number(:i_id_no);

	if (SQLCODE!=SQLOK)
	{
		printf("++++++++++OrderUpdateMifiAwake,SQLCODE=%d\n",SQLCODE);
		return -500037;
	}

    Coltrim(sTdMifiAwakeMsg.sIdNo);
	Coltrim(sTdMifiAwakeMsg.sPhoneNo);
	Coltrim(sTdMifiAwakeMsg.sCustId);
	Coltrim(sTdMifiAwakeMsg.sGprsPhone);
	Coltrim(sTdMifiAwakeMsg.sModeCode);
	Coltrim(sTdMifiAwakeMsg.sOpTime);
	Coltrim(sTdMifiAwakeMsg.sBeginTime);
	Coltrim(sTdMifiAwakeMsg.sEndTime);

	strcpy(v_table_name,"DMIFIAWAKEMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",		ORDERDATAFORMAT_NUMBER,i_id_no);


	OrderSetDataItem(&vMsgBodyType,"id_no",			ORDERDATAFORMAT_NUMBER,	sTdMifiAwakeMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"phone_no",		ORDERDATAFORMAT_STRING, sTdMifiAwakeMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"cust_id",		ORDERDATAFORMAT_NUMBER, sTdMifiAwakeMsg.sCustId);
	OrderSetDataItem(&vMsgBodyType,"gprs_phone",	ORDERDATAFORMAT_STRING, sTdMifiAwakeMsg.sGprsPhone);
	OrderSetDataItem(&vMsgBodyType,"mode_code",		ORDERDATAFORMAT_STRING, sTdMifiAwakeMsg.sModeCode);
	OrderSetDataItem(&vMsgBodyType,"op_time",		ORDERDATAFORMAT_DATE,	sTdMifiAwakeMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"begin_time",	ORDERDATAFORMAT_DATE,	sTdMifiAwakeMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType,"end_time",		ORDERDATAFORMAT_DATE,	sTdMifiAwakeMsg.sEndTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("++++++++++++++OrderInserSendCrm,v_ret=%d\n",v_ret);
		return -500039;
	}

	return 0;

}
int OrderDeleteMifiAwake(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dMifiAwakeMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DMIFIAWAKEMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}


/*
*	函数描述：多账期接口表函数
*	wanghao
*	2011-06-21 17:03:02
*
*/

int OrderInsertDcustacctcycle(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdCustAcctCycle
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustAcctCycle	sTdCustAcctCycle;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);
	Coltrim(sTdCustAcctCycle.sIdNo);
	Coltrim(sTdCustAcctCycle.sContractNo);
	Coltrim(sTdCustAcctCycle.sPhoneNo);
	Coltrim(sTdCustAcctCycle.sBeginTime);
	Coltrim(sTdCustAcctCycle.sEndTime);
	Coltrim(sTdCustAcctCycle.sAcctCycleType);
	Coltrim(sTdCustAcctCycle.sCycleBeginDay);
	Coltrim(sTdCustAcctCycle.sRegionCode);
	Coltrim(sTdCustAcctCycle.sOpNo);
	Coltrim(sTdCustAcctCycle.sOpTime);
	printf("%s\n", sTdCustAcctCycle.sIdNo);
	printf("%s\n", sTdCustAcctCycle.sContractNo);
	printf("%s\n", sTdCustAcctCycle.sPhoneNo);
	printf("%s\n", sTdCustAcctCycle.sBeginTime);
	printf("%s\n", sTdCustAcctCycle.sEndTime);
	printf("%s\n", sTdCustAcctCycle.sAcctCycleType);
	printf("%s\n", sTdCustAcctCycle.sCycleBeginDay);
	printf("%s\n", sTdCustAcctCycle.sRegionCode);
	printf("%s\n", sTdCustAcctCycle.sOpNo);
	printf("%s\n", sTdCustAcctCycle.sOpTime);

	EXEC SQL INSERT INTO dcustacctcycle
					(ID_NO, CONTRACT_NO, PHONE_NO, BEGIN_TIME, END_TIME,
					ACCT_CYCLE_TYPE, CYCLE_BEGIN_DAY, REGION_CODE, OP_NO, OP_TIME)
	VALUES( to_number(:sTdCustAcctCycle.sIdNo),
			to_number(:sTdCustAcctCycle.sContractNo),
			:sTdCustAcctCycle.sPhoneNo,
			:sTdCustAcctCycle.sBeginTime,
			:sTdCustAcctCycle.sEndTime,
			:sTdCustAcctCycle.sAcctCycleType,
			to_number(:sTdCustAcctCycle.sCycleBeginDay),
			:sTdCustAcctCycle.sRegionCode,
			to_number(:sTdCustAcctCycle.sOpNo),
			to_date(:sTdCustAcctCycle.sOpTime,'YYYYMMDD HH24:MI:SS')
			);

	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE!=-1))
		return -500030;

	strcpy(v_table_name,"DCUSTACCTCYCLE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "id_no"             ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "contract_no"       ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "phone_no"          ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sPhoneNo );
	OrderSetDataItem(&vMsgBodyType, "begin_time"        ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "end_time"          ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "acct_cycle_type"   ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sAcctCycleType);
	OrderSetDataItem(&vMsgBodyType, "cycle_begin_day"   ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sCycleBeginDay);
	OrderSetDataItem(&vMsgBodyType, "region_code"       ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "op_no"             ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sOpNo);
	OrderSetDataItem(&vMsgBodyType, "op_time"           ,     ORDERDATAFORMAT_DATE   , sTdCustAcctCycle.sOpTime);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;

}



int OrderDeleteDcustacctcycle(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustAcctCycleIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dcustacctcycle a WHERE id_no=to_number(:NG_Param0)  \
	         and a.Phone_NO=rpad(:NG_Param1,15,' ') and Begin_Time=rpad(:NG_Param2,14,' ') %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DCUSTACCTCYCLE");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no"        ,  ORDERDATAFORMAT_NUMBER,  oldIndex.sIdNo      );
	OrderSetPrimaryKey(&vMsgBodyType,"phone_no"     ,  ORDERDATAFORMAT_STRING,  oldIndex.sPhoneNo   );
	OrderSetPrimaryKey(&vMsgBodyType,"begin_time"   ,  ORDERDATAFORMAT_STRING,  oldIndex.sBeginTime );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}



int OrderUpdateDcustacctcycle(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdCustAcctCycleIndex oldIndex;
TdCustAcctCycleIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdCustAcctCycle	sTdCustAcctCycle;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dcustacctcycle a SET %s WHERE  id_no=to_number(:NG_Param0)  \
	         and a.Phone_NO=rpad(:NG_Param1,15,' ') and Begin_Time=rpad(:NG_Param2,14,' ') \
	          %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(to_char(id_no),chr(0)),
					nvl(to_char(CONTRACT_NO),chr(0)),
					nvl(Phone_NO,chr(0)),
					nvl(Begin_Time,chr(0)),
					nvl(End_Time,chr(0)),
					nvl(Acct_cycle_type,chr(0)),
					nvl(to_char(Cycle_Begin_day),chr(0)),
					nvl(Region_Code,chr(0)),
					nvl(to_char(OP_NO),chr(0)),
					nvl(to_char(OP_TIME,'yyyymmdd hh24:mi:ss'),chr(0))
				INTO  :sTdCustAcctCycle.sIdNo,
					:sTdCustAcctCycle.sContractNo,
					:sTdCustAcctCycle.sPhoneNo,
					:sTdCustAcctCycle.sBeginTime,
					:sTdCustAcctCycle.sEndTime,
					:sTdCustAcctCycle.sAcctCycleType,
					:sTdCustAcctCycle.sCycleBeginDay,
					:sTdCustAcctCycle.sRegionCode,
					:sTdCustAcctCycle.sOpNo,
					:sTdCustAcctCycle.sOpTime
				FROM dCustAcctCycle
				WHERE id_no = :newIndex.sIdNo
					and Phone_NO=:newIndex.sPhoneNo
					and Begin_Time =:newIndex.sBeginTime;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTdCustAcctCycle.sIdNo       );
	Coltrim( sTdCustAcctCycle.sContractNo );
	Coltrim( sTdCustAcctCycle.sPhoneNo    );
	Coltrim( sTdCustAcctCycle.sBeginTime  );
	Coltrim( sTdCustAcctCycle.sEndTime    );
	Coltrim( sTdCustAcctCycle.sAcctCycleType);
	Coltrim( sTdCustAcctCycle.sCycleBeginDay);
	Coltrim( sTdCustAcctCycle.sRegionCode );
	Coltrim( sTdCustAcctCycle.sOpNo       );
	Coltrim( sTdCustAcctCycle.sOpTime     );



	strcpy(v_table_name,"DCUSTACCTCYCLE");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no"           ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sIdNo   );
	OrderSetPrimaryKey(&vMsgBodyType, "phone_no"        ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sPhoneNo );
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time"      ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "contract_no"       ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sContractNo);
	OrderSetDataItem(&vMsgBodyType, "end_time"          ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sEndTime);
	OrderSetDataItem(&vMsgBodyType, "acct_cycle_type"   ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sAcctCycleType);
	OrderSetDataItem(&vMsgBodyType, "cycle_begin_day"   ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sCycleBeginDay);
	OrderSetDataItem(&vMsgBodyType, "region_code"       ,     ORDERDATAFORMAT_STRING , sTdCustAcctCycle.sRegionCode);
	OrderSetDataItem(&vMsgBodyType, "op_no"             ,     ORDERDATAFORMAT_NUMBER , sTdCustAcctCycle.sOpNo);
	OrderSetDataItem(&vMsgBodyType, "op_time"           ,     ORDERDATAFORMAT_DATE   , sTdCustAcctCycle.sOpTime);


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}
int OrderInsertNetCardSale(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdNetCardSale
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdNetCardSale	sTdNetCardSale;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdNetCardSale.sLoginAccept);
	Coltrim(sTdNetCardSale.sIdNo		);
	Coltrim(sTdNetCardSale.sMainPhone	);
	Coltrim(sTdNetCardSale.sOpTime		);
	Coltrim(sTdNetCardSale.sTotalDate  );
	Coltrim(sTdNetCardSale.sBindPhone	);
	Coltrim(sTdNetCardSale.sModeCode	);
	Coltrim(sTdNetCardSale.sLoginNo	);
	Coltrim(sTdNetCardSale.sOrgId		);
	Coltrim(sTdNetCardSale.sBeginTime	);
	Coltrim(sTdNetCardSale.sEndTime		);
	Coltrim(sTdNetCardSale.sBindId		);

	EXEC SQL INSERT INTO dNetCardSaleMsg(LOGIN_ACCEPT,ID_NO,MAIN_PHONE,
				OP_TIME,TOTAL_DATE,BIND_PHONE,MODE_CODE,LOGIN_NO,ORG_ID,BEGIN_TIME,END_TIME,BIND_ID)
		VALUES(
				to_number(:sTdNetCardSale.sLoginAccept),
				to_number(:sTdNetCardSale.sIdNo),
				:sTdNetCardSale.sMainPhone    ,
				to_date(:sTdNetCardSale.sOpTime,'yyyymmdd hh24:mi:ss'),
				to_number(:sTdNetCardSale.sTotalDate),
				:sTdNetCardSale.sBindPhone,
				:sTdNetCardSale.sModeCode,
				:sTdNetCardSale.sLoginNo,
				:sTdNetCardSale.sOrgId,
				to_date(:sTdNetCardSale.sBeginTime,'yyyymmdd hh24:mi:ss'),
				to_date(:sTdNetCardSale.sEndTime,'yyyymmdd hh24:mi:ss'),
				to_number(:sTdNetCardSale.sBindId)
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DNETCARDSALEMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "login_accept"	, ORDERDATAFORMAT_NUMBER	, sTdNetCardSale.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "id_no"			, ORDERDATAFORMAT_NUMBER	, sTdNetCardSale.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "main_phone"    , ORDERDATAFORMAT_STRING	, sTdNetCardSale.sMainPhone);
	OrderSetDataItem(&vMsgBodyType, "op_time"		, ORDERDATAFORMAT_DATE		, sTdNetCardSale.sOpTime );
	OrderSetDataItem(&vMsgBodyType, "total_date"    , ORDERDATAFORMAT_NUMBER	, sTdNetCardSale.sTotalDate);
	OrderSetDataItem(&vMsgBodyType, "bind_phone"    , ORDERDATAFORMAT_STRING	, sTdNetCardSale.sBindPhone);
	OrderSetDataItem(&vMsgBodyType, "mode_code"		, ORDERDATAFORMAT_STRING	, sTdNetCardSale.sModeCode );
	OrderSetDataItem(&vMsgBodyType, "login_no"		, ORDERDATAFORMAT_STRING	, sTdNetCardSale.sLoginNo );
	OrderSetDataItem(&vMsgBodyType, "org_id"		, ORDERDATAFORMAT_STRING	, sTdNetCardSale.sOrgId   );
	OrderSetDataItem(&vMsgBodyType, "begin_time"	, ORDERDATAFORMAT_DATE		, sTdNetCardSale.sBeginTime   );
	OrderSetDataItem(&vMsgBodyType, "end_time"		, ORDERDATAFORMAT_DATE		, sTdNetCardSale.sEndTime   );
	OrderSetDataItem(&vMsgBodyType, "bind_id"		, ORDERDATAFORMAT_NUMBER	, sTdNetCardSale.sBindId   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

int OrderDeleteNetCardSale(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						i_id_no,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

char *i_id_no;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dNetCardSaleMsg a WHERE a.id_no=to_number(:NG_Param0) %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"DNETCARDSALEMSG");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,i_id_no);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}
int OrderInsertTransMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdTransMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTransMsg	sTdTransMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdTransMsg.sLoginAccept);
	Coltrim(sTdTransMsg.sIdNo		);
	Coltrim(sTdTransMsg.sPhoneNo	);
	Coltrim(sTdTransMsg.sHomeBelong	);
	Coltrim(sTdTransMsg.sHomeGroup	);
	Coltrim(sTdTransMsg.sBelongOut	);
	Coltrim(sTdTransMsg.sGroupOut	);
	Coltrim(sTdTransMsg.sBelongIn	);
	Coltrim(sTdTransMsg.sGroupIn	);
	Coltrim(sTdTransMsg.sLoginNo	);
	Coltrim(sTdTransMsg.sOrgId		);
	Coltrim(sTdTransMsg.sOpTime		);
	Coltrim(sTdTransMsg.sBeginTime	);
	Coltrim(sTdTransMsg.sEndTime	);

	EXEC SQL INSERT INTO dObTransMsg(LOGIN_ACCEPT,ID_NO,PHONE_NO,
				HOME_BELONG,HOME_GROUP,BELONG_OUT,GROUP_OUT,
				BELONG_IN,GROUP_IN,LOGIN_NO,ORGID,OP_TIME,
				BEGIN_TIME,END_TIME)
		VALUES(
				to_number(:sTdTransMsg.sLoginAccept),
				to_number(:sTdTransMsg.sIdNo),
				:sTdTransMsg.sPhoneNo    ,
				:sTdTransMsg.sHomeBelong,
				:sTdTransMsg.sHomeGroup,
				:sTdTransMsg.sBelongOut,
				:sTdTransMsg.sGroupOut,
				:sTdTransMsg.sBelongIn,
				:sTdTransMsg.sGroupIn,
				:sTdTransMsg.sLoginNo,
				:sTdTransMsg.sOrgId,
				to_date(:sTdTransMsg.sOpTime,'yyyymmdd hh24:mi:ss'),
				to_date(:sTdTransMsg.sBeginTime,'yyyymmdd hh24:mi:ss'),
				to_date(:sTdTransMsg.sEndTime,'yyyymmdd hh24:mi:ss')
		      );

	if (SQLCODE != SQLOK)
		return -500030;

	strcpy(v_table_name,"DOBTRANSMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType, "login_accept"	, ORDERDATAFORMAT_NUMBER	, sTdTransMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "id_no"			, ORDERDATAFORMAT_NUMBER	, sTdTransMsg.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    	, ORDERDATAFORMAT_STRING	, sTdTransMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "home_belong"   , ORDERDATAFORMAT_STRING	, sTdTransMsg.sHomeBelong);
	OrderSetDataItem(&vMsgBodyType, "home_group"    , ORDERDATAFORMAT_STRING	, sTdTransMsg.sHomeGroup);
	OrderSetDataItem(&vMsgBodyType, "belong_out"   , ORDERDATAFORMAT_STRING		, sTdTransMsg.sBelongOut);
	OrderSetDataItem(&vMsgBodyType, "group_out"    , ORDERDATAFORMAT_STRING		, sTdTransMsg.sGroupOut);
	OrderSetDataItem(&vMsgBodyType, "belong_in"   , ORDERDATAFORMAT_STRING		, sTdTransMsg.sBelongIn);
	OrderSetDataItem(&vMsgBodyType, "group_in"    , ORDERDATAFORMAT_STRING		, sTdTransMsg.sGroupIn);
	OrderSetDataItem(&vMsgBodyType, "login_no"		, ORDERDATAFORMAT_STRING	, sTdTransMsg.sLoginNo );
	OrderSetDataItem(&vMsgBodyType, "orgid"		, ORDERDATAFORMAT_STRING	, sTdTransMsg.sOrgId   );
	OrderSetDataItem(&vMsgBodyType, "op_time"		, ORDERDATAFORMAT_DATE		, sTdTransMsg.sOpTime );
	OrderSetDataItem(&vMsgBodyType, "begin_time"	, ORDERDATAFORMAT_DATE		, sTdTransMsg.sBeginTime   );
	OrderSetDataItem(&vMsgBodyType, "end_time"		, ORDERDATAFORMAT_DATE		, sTdTransMsg.sEndTime   );

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}
int OrderUpdateTransMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdTransMsgIndex oldIndex;
TdTransMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdTransMsg	sTdTransMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);

	sprintf(v_sql_buff,"UPDATE dobtransmsg a SET %s WHERE  id_no=to_number(:NG_Param0)  \
	         and a.Phone_NO=rpad(:NG_Param1,15,' ') and Begin_Time=to_date(:NG_Param2,'yyyymmdd hh24:mi:ss') \
	          %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT nvl(to_char(login_accept),chr(0)),
					nvl(to_char(id_no),chr(0)),
					nvl(Phone_NO,chr(0)),
					nvl(home_belong,chr(0)),
					nvl(home_group,chr(0)),
					nvl(belong_out,chr(0)),
					nvl(group_out,chr(0)),
					nvl(belong_in,chr(0)),
					nvl(group_in,chr(0)),
					nvl(login_no,chr(0)),
					nvl(orgid,chr(0)),
					nvl(to_char(OP_TIME,'yyyymmdd hh24:mi:ss'),chr(0)),
					nvl(to_char(Begin_Time,'yyyymmdd hh24:mi:ss'),chr(0)),
					nvl(to_char(End_Time,'yyyymmdd hh24:mi:ss'),chr(0))
				INTO :sTdTransMsg.sLoginAccept,
					:sTdTransMsg.sIdNo,
					:sTdTransMsg.sPhoneNo,
					:sTdTransMsg.sHomeBelong,
					:sTdTransMsg.sHomeGroup,
					:sTdTransMsg.sBelongOut,
					:sTdTransMsg.sGroupOut,
					:sTdTransMsg.sBelongIn,
					:sTdTransMsg.sGroupIn,
					:sTdTransMsg.sLoginNo,
					:sTdTransMsg.sOrgId,
					:sTdTransMsg.sOpTime,
					:sTdTransMsg.sBeginTime,
					:sTdTransMsg.sEndTime
				FROM dobtransmsg
				WHERE id_no = :newIndex.sIdNo
					and Phone_NO=:newIndex.sPhoneNo
					and Begin_Time =:newIndex.sBeginTime;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim( sTdTransMsg.sLoginAccept );
	Coltrim( sTdTransMsg.sIdNo       );
	Coltrim( sTdTransMsg.sPhoneNo    );
	Coltrim( sTdTransMsg.sHomeBelong );
	Coltrim( sTdTransMsg.sHomeGroup  );
	Coltrim( sTdTransMsg.sBelongOut  );
	Coltrim( sTdTransMsg.sGroupOut   );
	Coltrim( sTdTransMsg.sBelongIn   );
	Coltrim( sTdTransMsg.sGroupIn    );
	Coltrim( sTdTransMsg.sLoginNo    );
	Coltrim( sTdTransMsg.sOrgId      );
	Coltrim( sTdTransMsg.sOpTime     );
	Coltrim( sTdTransMsg.sBeginTime  );
	Coltrim( sTdTransMsg.sEndTime    );



	strcpy(v_table_name,"DOBTRANSMSG");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "id_no",		ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);
	OrderSetPrimaryKey(&vMsgBodyType, "phone_no",	ORDERDATAFORMAT_STRING, oldIndex.sPhoneNo);
	OrderSetPrimaryKey(&vMsgBodyType, "begin_time",	ORDERDATAFORMAT_DATE,	oldIndex.sBeginTime);

	OrderSetDataItem(&vMsgBodyType, "login_accept"	, ORDERDATAFORMAT_NUMBER	, sTdTransMsg.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType, "id_no"			, ORDERDATAFORMAT_NUMBER	, sTdTransMsg.sIdNo   );
	OrderSetDataItem(&vMsgBodyType, "phone_no"    	, ORDERDATAFORMAT_STRING	, sTdTransMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "home_belong"   , ORDERDATAFORMAT_STRING	, sTdTransMsg.sHomeBelong);
	OrderSetDataItem(&vMsgBodyType, "home_group"    , ORDERDATAFORMAT_STRING	, sTdTransMsg.sHomeGroup);
	OrderSetDataItem(&vMsgBodyType, "belong_out"   , ORDERDATAFORMAT_STRING		, sTdTransMsg.sBelongOut);
	OrderSetDataItem(&vMsgBodyType, "group_out"    , ORDERDATAFORMAT_STRING		, sTdTransMsg.sGroupOut);
	OrderSetDataItem(&vMsgBodyType, "belong_in"   , ORDERDATAFORMAT_STRING		, sTdTransMsg.sBelongIn);
	OrderSetDataItem(&vMsgBodyType, "group_in"    , ORDERDATAFORMAT_STRING		, sTdTransMsg.sGroupIn);
	OrderSetDataItem(&vMsgBodyType, "login_no"		, ORDERDATAFORMAT_STRING	, sTdTransMsg.sLoginNo );
	OrderSetDataItem(&vMsgBodyType, "orgid"		, ORDERDATAFORMAT_STRING		, sTdTransMsg.sOrgId   );
	OrderSetDataItem(&vMsgBodyType, "op_time"		, ORDERDATAFORMAT_DATE		, sTdTransMsg.sOpTime );
	OrderSetDataItem(&vMsgBodyType, "begin_time"	, ORDERDATAFORMAT_DATE		, sTdTransMsg.sBeginTime );
	OrderSetDataItem(&vMsgBodyType, "end_time"		, ORDERDATAFORMAT_DATE		, sTdTransMsg.sEndTime   );


	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}


int OrderInsertGprsRecordMsg(
	i_sendid_type,i_sendid_no,i_order_right,/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,/*操作类数据*/
	tDGprsRecordMsg
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDGPRSRECORDMSG tDGprsRecordMsg;
{
	int v_ret=0;
	MsgBodyType vMsgBodyType;
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];		/*表名称*/
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];

	Coltrim(i_sendid_no);

	Coltrim(tDGprsRecordMsg.sPhoneNo);
	Coltrim(tDGprsRecordMsg.sIdNo);
	Coltrim(tDGprsRecordMsg.sBeginTime);
	Coltrim(tDGprsRecordMsg.sLoginNo);
	Coltrim(tDGprsRecordMsg.sOpTime);
	Coltrim(tDGprsRecordMsg.sLoginAccept);


	EXEC SQL INSERT INTO DGPRSRECORDMSG(PHONE_NO, ID_NO, BEGIN_TIME, LOGIN_NO, OP_TIME, LOGIN_ACCEPT)
				VALUES(:tDGprsRecordMsg.sPhoneNo,
						to_number(:tDGprsRecordMsg.sIdNo),
						to_date(:tDGprsRecordMsg.sBeginTime, 'yyyymmdd hh24:mi:ss'),
						:tDGprsRecordMsg.sLoginNo,
						to_date(:tDGprsRecordMsg.sOpTime, 'yyyymmdd hh24:mi:ss'),
						to_number(:tDGprsRecordMsg.sLoginAccept) );
	if (SQLCODE != SQLOK)
	{
		return -500130;

	}
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	init(v_table_name);
	strcpy(v_table_name, "DGPRSRECORDMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetDataItem(&vMsgBodyType, "PHONE_NO", ORDERDATAFORMAT_STRING, tDGprsRecordMsg.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType, "ID_NO", ORDERDATAFORMAT_NUMBER, tDGprsRecordMsg.sIdNo);
	OrderSetDataItem(&vMsgBodyType, "BEGIN_TIME", ORDERDATAFORMAT_DATE, tDGprsRecordMsg.sBeginTime);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_NO", ORDERDATAFORMAT_STRING, tDGprsRecordMsg.sLoginNo);
	OrderSetDataItem(&vMsgBodyType, "OP_TIME", ORDERDATAFORMAT_DATE, tDGprsRecordMsg.sOpTime);
	OrderSetDataItem(&vMsgBodyType, "LOGIN_ACCEPT", ORDERDATAFORMAT_NUMBER, tDGprsRecordMsg.sLoginAccept);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
	{
		return -500131;
	}

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type, ORDERTYPEDATA);
	strcpy(v_order_data.id_type, i_sendid_type);
	strcpy(v_order_data.id_no, i_sendid_no);
	strcpy(v_order_data.busi_code, v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type, ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code, i_op_code);
	v_order_data.op_accept = i_op_accept;
	strcpy(v_order_data.op_login, i_op_login);
	strcpy(v_order_data.op_note, i_op_note);
	strcpy(v_order_data.data_format, ORDERDATAFORMAT_XML);


	/*向wOrderSend表插入数据*/
	v_ret=OrderInserSendCrm(&v_order_data, vXmlString);
	if(v_ret != 0)
	{
		printf("++++[%d][%d][%s]++++\n", v_ret, SQLCODE, SQLERRMSG);
		return -500132;
	}

	return 0;
}


int OrderDeleteGprsRecordMsg(
	i_sendid_type,i_sendid_no,i_order_right,	/*分表关键字及工单处理权重*/
	i_op_code,i_op_accept,i_op_login,i_op_note,	/*操作类数据*/
	oldIndex,			/*唯一索引*/
	i_where_sql, i_parameter_array
)
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TDGPRSRECORDMSGIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret=0;
	MsgBodyType vMsgBodyType;
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];		/*表名称*/
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);
	init(v_table_name);
	init(vXmlString);

	sprintf(v_sql_buff, "DELETE FROM DGPRSRECORDMSG a WHERE a.PHONE_NO = rpad(:NG_Param0,15,' ') and a.ID_NO = to_number(:NG_Param1) %s ", i_where_sql);
	printf("v_sql_buff=%s\n",v_sql_buff);
	v_ret=OrderMultiParaDML(v_sql_buff, &i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
	{
		return -500133;
	}

	if (v_ret > 0)
	{
		return 1;
	}

	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType, ORDERTYPEDATA);

	strcpy(v_table_name, "DGPRSRECORDMSG");
	OrderSetTableName(&vMsgBodyType, v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType, "PHONE_NO", ORDERDATAFORMAT_STRING, oldIndex.sPhoneNo);
	OrderSetPrimaryKey(&vMsgBodyType, "ID_NO", ORDERDATAFORMAT_NUMBER, oldIndex.sIdNo);

	v_ret=OrderGenXml(&vMsgBodyType, vXmlString);
	if (v_ret<0)
		return -500134;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);
	init(v_orderdet_data);

	strcpy(v_order_data.order_type, ORDERTYPEDATA);
	strcpy(v_order_data.id_type, i_sendid_type);
	strcpy(v_order_data.id_no, i_sendid_no);
	strcpy(v_order_data.busi_code, v_table_name);
	v_order_data.order_right = i_order_right;
	strcpy(v_order_data.op_type, ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code, i_op_code);
	v_order_data.op_accept = i_op_accept;
	strcpy(v_order_data.op_login, i_op_login);
	strcpy(v_order_data.op_note, i_op_note);
	strcpy(v_order_data.data_format, ORDERDATAFORMAT_XML);


	v_ret=OrderInserSendCrm(&v_order_data, vXmlString);
	if (v_ret!=0)
		return -500135;

	return 0;
}
/*聚汇好友成员信息表*/
int OrderInsertJHHYGroupMebMsg(	i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTdJHHYGroupMebMsg
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdJHHYGroupMebMsg	sTdJHHYGroupMebMsg;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTdJHHYGroupMebMsg.sGroupId);
	Coltrim(sTdJHHYGroupMebMsg.sMemberNo);
	Coltrim(sTdJHHYGroupMebMsg.sMemberId);
	Coltrim(sTdJHHYGroupMebMsg.sMemberType);
	Coltrim(sTdJHHYGroupMebMsg.sProvinceFlag);
	Coltrim(sTdJHHYGroupMebMsg.sModeCode);
	Coltrim(sTdJHHYGroupMebMsg.sFbizCode);
	Coltrim(sTdJHHYGroupMebMsg.sMainFlag);
	Coltrim(sTdJHHYGroupMebMsg.sEffTime);
	Coltrim(sTdJHHYGroupMebMsg.sExpTime);
	Coltrim(sTdJHHYGroupMebMsg.sRspNo);

	EXEC SQL Insert into DJHHYGROUPMEBMSG
					(
						GROUP_ID, MEMBER_NO, ID_NO,MEMBER_TYPE, 
						PROVINCE_FLAG, MODE_CODE, RSP_NO,FBIZ_CODE, 
						MAIN_FLAG,EFF_TIME, EXP_TIME
					)
				Values
					(
						to_number(:sTdJHHYGroupMebMsg.sGroupId),:sTdJHHYGroupMebMsg.sMemberNo,to_number(:sTdJHHYGroupMebMsg.sMemberId),:sTdJHHYGroupMebMsg.sMemberType,
						:sTdJHHYGroupMebMsg.sProvinceFlag,:sTdJHHYGroupMebMsg.sModeCode,:sTdJHHYGroupMebMsg.sFbizCode, to_number(:sTdJHHYGroupMebMsg.sRspNo),
						:sTdJHHYGroupMebMsg.sMainFlag,to_date(:sTdJHHYGroupMebMsg.sEffTime, 'yyyymmdd hh24:mi:ss'), to_date(:sTdJHHYGroupMebMsg.sExpTime, 'yyyymmdd')
					);
	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE!=-1))
		return -500030;

	strcpy(v_table_name,"dJHHYGroupMebMsg");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);
   
	OrderSetDataItem(&vMsgBodyType, "group_id"  	,     ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sGroupId);  
	OrderSetDataItem(&vMsgBodyType, "member_no" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMemberNo); 
	OrderSetDataItem(&vMsgBodyType, "id_no" 	,     	  ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sMemberId); 
	OrderSetDataItem(&vMsgBodyType, "member_type"	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMemberType);   
	OrderSetDataItem(&vMsgBodyType, "prinvice_flag" ,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sProvinceFlag); 
	OrderSetDataItem(&vMsgBodyType, "mode_code" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sModeCode);   
	OrderSetDataItem(&vMsgBodyType, "rsp_no"     	,     ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sRspNo); 
	OrderSetDataItem(&vMsgBodyType, "fbiz_code" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sFbizCode);     
	OrderSetDataItem(&vMsgBodyType, "main_flag"     ,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMainFlag);
	OrderSetDataItem(&vMsgBodyType, "eff_time" 		,     ORDERDATAFORMAT_DATE 	 ,sTdJHHYGroupMebMsg.sEffTime);
	OrderSetDataItem(&vMsgBodyType, "exp_time" 		,     ORDERDATAFORMAT_DATE   ,sTdJHHYGroupMebMsg.sExpTime);
	

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

/*聚汇好友成员信息表*/
int OrderDeleteJHHYGroupMebMsg(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						oldIndex,
						i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdJHHYGroupMebMsgIndex oldIndex;

char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
	EXEC SQL END DECLARE SECTION;
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"DELETE dJHHYGroupMebMsg a WHERE a.group_id=to_number(:NG_Param0) \
	        and a.member_no=:NG_Param1 %s ",i_where_sql);

	v_ret = OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (SQLROWS>1) return -600000;
	if (v_ret < 0)
		return -500033;


	/*没有更新到数据，可以不做后续处理*/
	if (v_ret>0)
		return 1;

	strcpy(v_table_name,"dJHHYGroupMebMsg");
	/*组装报文开始*/

	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"group_id",     ORDERDATAFORMAT_NUMBER,oldIndex.sGroupId);
	OrderSetPrimaryKey(&vMsgBodyType,"member_no",    ORDERDATAFORMAT_STRING,oldIndex.sMemberNo);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500034;

	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_DELETE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		printf("delete_v_ret = %d\n",v_ret);
		return -500035;
	}

	return 0;
}

/*聚汇好友成员信息表*/
int OrderUpdateJHHYGroupMebMsg(i_sendid_type,i_sendid_no,i_order_right,
					   i_op_code,i_op_accept,i_op_login,i_op_note,
					   oldIndex,newIndex,
					   i_update_sql,i_where_sql,i_parameter_array
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TdJHHYGroupMebMsgIndex oldIndex;
TdJHHYGroupMebMsgIndex newIndex;

char *i_update_sql;
char *i_where_sql;
char i_parameter_array[][DLMAXITEMS][DLINTERFACEDATA];
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	EXEC SQL BEGIN DECLARE SECTION;
		char v_sql_buff[DLMAXITEMS*DLINTERFACEDATA];
		TdJHHYGroupMebMsg	sTdJHHYGroupMebMsg;
	EXEC SQL END DECLARE SECTION;

	Coltrim(i_sendid_no);

	init(v_sql_buff);

	sprintf(v_sql_buff,"UPDATE dJHHYGroupMebMsg a SET %s WHERE a.group_id=to_number(:NG_Param0) and a.member_no=rpad(:NG_Param1,2,' ') %s ",i_update_sql,i_where_sql);

	v_ret=OrderMultiParaDML(v_sql_buff,&i_parameter_array[0]);
	if (v_ret<0)
		return -500036;

	/*没有更新到数据，可以不做后续处理*/
	if (v_ret > 0 )
	{
		return 1;
	}
	/*没有更新到数据，可以不做后续处理*/

	EXEC SQL SELECT to_char(GROUP_ID), MEMBER_NO, to_char(ID_NO),to_char(MEMBER_TYPE), 
					PROVINCE_FLAG, MODE_CODE, RSP_NO,FBIZ_CODE, 
					MAIN_FLAG,EFF_TIME, EXP_TIME
			   INTO :sTdJHHYGroupMebMsg.sGroupId ,
                    :sTdJHHYGroupMebMsg.sMemberNo,
                    :sTdJHHYGroupMebMsg.sMemberId,
					:sTdJHHYGroupMebMsg.sMemberType,
					:sTdJHHYGroupMebMsg.sProvinceFlag,
					:sTdJHHYGroupMebMsg.sModeCode,
					:sTdJHHYGroupMebMsg.sModeCode,
					:sTdJHHYGroupMebMsg.sFbizCode,
					:sTdJHHYGroupMebMsg.sMainFlag,
					:sTdJHHYGroupMebMsg.sEffTime,
					:sTdJHHYGroupMebMsg.sExpTime
			   FROM dJHHYGroupMebMsg
			  WHERE group_id = :newIndex.sGroupId and member_no=:newIndex.sMemberNo;

	if (SQLCODE!=SQLOK)
		return -500037;

	Coltrim(sTdJHHYGroupMebMsg.sGroupId);
	Coltrim(sTdJHHYGroupMebMsg.sMemberNo);
	Coltrim(sTdJHHYGroupMebMsg.sMemberId);
	Coltrim(sTdJHHYGroupMebMsg.sMemberType);
	Coltrim(sTdJHHYGroupMebMsg.sProvinceFlag);
	Coltrim(sTdJHHYGroupMebMsg.sModeCode);
	Coltrim(sTdJHHYGroupMebMsg.sRspNo);
	Coltrim(sTdJHHYGroupMebMsg.sFbizCode);
	Coltrim(sTdJHHYGroupMebMsg.sMainFlag);
	Coltrim(sTdJHHYGroupMebMsg.sEffTime);
	Coltrim(sTdJHHYGroupMebMsg.sExpTime);

	strcpy(v_table_name,"dJHHYGroupMebMsg");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetPrimaryKey(&vMsgBodyType,"group_id",      ORDERDATAFORMAT_NUMBER,oldIndex.sGroupId);
	OrderSetPrimaryKey(&vMsgBodyType,"member_no",  ORDERDATAFORMAT_STRING,oldIndex.sMemberNo);

	OrderSetDataItem(&vMsgBodyType, "group_id"  	,     ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sGroupId);  
	OrderSetDataItem(&vMsgBodyType, "member_no" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMemberNo); 
	OrderSetDataItem(&vMsgBodyType, "id_no" 	,     	  ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sMemberId); 
	OrderSetDataItem(&vMsgBodyType, "member_type"	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMemberType);   
	OrderSetDataItem(&vMsgBodyType, "prinvice_flag" ,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sProvinceFlag); 
	OrderSetDataItem(&vMsgBodyType, "mode_code" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sModeCode);   
	OrderSetDataItem(&vMsgBodyType, "rsp_no"     	,     ORDERDATAFORMAT_NUMBER ,sTdJHHYGroupMebMsg.sRspNo); 
	OrderSetDataItem(&vMsgBodyType, "fbiz_code" 	,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sFbizCode);     
	OrderSetDataItem(&vMsgBodyType, "main_flag"     ,     ORDERDATAFORMAT_STRING ,sTdJHHYGroupMebMsg.sMainFlag);
	OrderSetDataItem(&vMsgBodyType, "eff_time" 		,     ORDERDATAFORMAT_DATE 	 ,sTdJHHYGroupMebMsg.sEffTime);
	OrderSetDataItem(&vMsgBodyType, "exp_time" 		,     ORDERDATAFORMAT_DATE   ,sTdJHHYGroupMebMsg.sExpTime);
	
	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret<0)
		return -500038;
	OrderDestroyMsgBody(&vMsgBodyType);
	/*组装报文结束*/

	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_UPDATE);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500039;
	}

	return 0;

}

int OrderInsertChangeCardRecord(i_sendid_type,i_sendid_no,i_order_right,
						i_op_code,i_op_accept,i_op_login,i_op_note,
						sTwChangeCardRecord
					   )
char *i_sendid_type;
char *i_sendid_no;
int  i_order_right;

char *i_op_code;
long i_op_accept;
char *i_op_login;
char *i_op_note;

TwChangeCardRecord	sTwChangeCardRecord;
{
	int v_ret;
	MsgBodyType	vMsgBodyType;
	char vXmlString[DLINTERFACEARRAY*DLINTERFACEDATA];
	OrderTable v_order_data;
	OrderDetTable v_orderdet_data[DLINTERFACEARRAY];
	char v_table_name[DLTABLENAME];

	Coltrim(i_sendid_no);

	Coltrim(sTwChangeCardRecord.sTotalDate);
	Coltrim(sTwChangeCardRecord.sLoginAccept);
	Coltrim(sTwChangeCardRecord.sOpCode);
	Coltrim(sTwChangeCardRecord.sIdNo);
	Coltrim(sTwChangeCardRecord.sPhoneNo);
	Coltrim(sTwChangeCardRecord.sLoginNo);
	Coltrim(sTwChangeCardRecord.sOpTime);
	Coltrim(sTwChangeCardRecord.sOrgId);
	
	EXEC SQL INSERT INTO wChangeCardRecord(TOTAL_DATE,LOGIN_ACCEPT,OP_CODE,ID_NO, PHONE_NO, LOGIN_NO, OP_TIME,ORG_ID)
		     VALUES(to_number(:sTwChangeCardRecord.sTotalDate),to_number(:sTwChangeCardRecord.sLoginAccept),:sTwChangeCardRecord.sOpCode,
		     	    to_number(:sTwChangeCardRecord.sIdNo),:sTwChangeCardRecord.sPhoneNo,:sTwChangeCardRecord.sLoginNo,
		     	    to_date(:sTwChangeCardRecord.sOpTime,'yyyymmdd hh24:mi:ss'),:sTwChangeCardRecord.sOrgId);
	
	if(SQLCODE == -1) return -1;
	else if ((SQLCODE != SQLOK)&&(SQLCODE != -1))
		return -500030;
	

	strcpy(v_table_name,"WChangeCardRecord");
	/*组装报文开始*/
	init(vXmlString);

	OrderInitMsgBody(&vMsgBodyType,ORDERTYPEDATA);

	OrderSetTableName(&vMsgBodyType,v_table_name);

	OrderSetDataItem(&vMsgBodyType,"total_date",ORDERDATAFORMAT_NUMBER,sTwChangeCardRecord.sTotalDate);
	OrderSetDataItem(&vMsgBodyType,"login_accept",ORDERDATAFORMAT_NUMBER,sTwChangeCardRecord.sLoginAccept);
	OrderSetDataItem(&vMsgBodyType,"op_code",ORDERDATAFORMAT_STRING,sTwChangeCardRecord.sOpCode);
	OrderSetDataItem(&vMsgBodyType,"id_no",ORDERDATAFORMAT_NUMBER,  sTwChangeCardRecord.sIdNo);
	OrderSetDataItem(&vMsgBodyType,"phone_no",ORDERDATAFORMAT_STRING,sTwChangeCardRecord.sPhoneNo);
	OrderSetDataItem(&vMsgBodyType,"login_no",ORDERDATAFORMAT_STRING,sTwChangeCardRecord.sLoginNo);
	OrderSetDataItem(&vMsgBodyType,"op_time",ORDERDATAFORMAT_DATE,sTwChangeCardRecord.sOpTime);
	OrderSetDataItem(&vMsgBodyType,"org_id",ORDERDATAFORMAT_STRING,  sTwChangeCardRecord.sOrgId);

	v_ret = OrderGenXml(&vMsgBodyType,vXmlString);
	if (v_ret < 0)
		return -500031;
	OrderDestroyMsgBody(&vMsgBodyType);

	/*组装报文结束*/
	OrderInitStructOrder(&v_order_data);	init(v_orderdet_data);

	strcpy(v_order_data.order_type,ORDERTYPEDATA);
	strcpy(v_order_data.id_type,i_sendid_type);
	strcpy(v_order_data.id_no,i_sendid_no);
	strcpy(v_order_data.busi_code,v_table_name);
	v_order_data.order_right=i_order_right;
	strcpy(v_order_data.op_type,ORDEROPTYPE_INSERT);
	strcpy(v_order_data.op_code,i_op_code);
	v_order_data.op_accept=i_op_accept;
	strcpy(v_order_data.op_login,i_op_login);
	strcpy(v_order_data.op_note,i_op_note);
	strcpy(v_order_data.data_format,ORDERDATAFORMAT_XML);

	v_ret=OrderInserSendCrm(&v_order_data,vXmlString);
	if (v_ret != 0)
	{
		return -500032;
	}

	return 0;
}

